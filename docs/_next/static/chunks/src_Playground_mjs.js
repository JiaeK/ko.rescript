(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["src_Playground_mjs"],{

/***/ "./plugins/cm-reason-mode.js":
/*!***********************************!*\
  !*** ./plugins/cm-reason-mode.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror/addon/mode/simple */ "./node_modules/codemirror/addon/mode/simple.js");
/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/lib/codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1__);
/* module decorator */ module = __webpack_require__.hmd(module);


codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineSimpleMode("reason", {
  start: [{
    regex: /b?"/,
    token: "string",
    next: "string"
  }, {
    regex: /b?r"/,
    token: "string",
    next: "string_raw"
  }, {
    regex: /b?r#+"/,
    token: "string",
    next: "string_raw_hash"
  }, {
    regex: /(\:\s*)(.*)(\s*=)\s/,
    token: [null, "type-annotation", null]
  }, {
    regex: /'(?:[^'\\]|\\(?:[nrt0'"]|x[\da-fA-F]{2}|u\{[\da-fA-F]{6}\}))'/,
    token: "string-2"
  }, {
    regex: /b'(?:[^']|\\(?:['\\nrt0]|x[\da-fA-F]{2}))'/,
    token: "string-2"
  }, {
    regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,
    token: "number"
  }, {
    regex: /(let|type)(\s+rec)?(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,
    token: ["keyword", "keyword2", null, "def"]
  }, {
    regex: /(?:switch|module|as|do|else|external|for|if|in|loop|mod|pub|ref|type|while|open|open\!)\b/,
    token: "keyword"
  }, {
    regex: /(?:rec)\b/,
    token: "keyword2"
  }, {
    regex: /\b(?:char|bool|option|int|string)\b/,
    token: "atom"
  }, {
    regex: /\b(?:true|false)\b/,
    token: "builtin"
  }, {
    regex: /\b(fun)(\s+)([a-zA-Z_\|][a-zA-Z0-9_]*)/,
    token: ["keyword", null, "def"]
  }, {
    regex: /\b([A-Z][a-zA-Z0-9_]*)(\.)/,
    token: ["module", null]
  }, {
    regex: /\b([A-Z][a-zA-Z0-9_]*)/,
    token: ["variant-constructor", null, null, null]
  }, {
    regex: /\[.*\]/,
    token: "decorator"
  }, {
    regex: /#!?\[.*\]/,
    token: "meta"
  }, {
    regex: /\/\/.*/,
    token: "comment"
  }, {
    regex: /\/\*/,
    token: "comment",
    next: "comment"
  }, {
    regex: /[-+\/*=<>!\|]+/,
    token: "operator"
  }, {
    regex: /[a-zA-Z_]\w*!/,
    token: "variable-3"
  }, {
    regex: /[a-zA-Z_]\w*/,
    token: "variable"
  }, {
    regex: /[\{\[\(]/,
    indent: true
  }, {
    regex: /[\}\]\)]/,
    dedent: true
  }],
  variantConstructor: [],
  string: [{
    regex: /"/,
    token: "string",
    next: "start"
  }, {
    regex: /(?:[^\\"]|\\(?:.|$))*/,
    token: "string"
  }],
  string_raw: [{
    regex: /"/,
    token: "string",
    next: "start"
  }, {
    regex: /[^"]*/,
    token: "string"
  }],
  string_raw_hash: [{
    regex: /"#+/,
    token: "string",
    next: "start"
  }, {
    regex: /(?:[^"]|"(?!#))*/,
    token: "string"
  }],
  comment: [{
    regex: /.*?\*\//,
    token: "comment",
    next: "start"
  }, {
    regex: /.*/,
    token: "comment"
  }],
  meta: {
    dontIndentStates: ["comment"],
    electricInput: /^\s*\}$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    lineComment: "//",
    fold: "brace"
  }
});
codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineMIME("text/x-reasonsrc", "reason");
codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineMIME("text/reason", "reason");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./plugins/cm-rescript-mode.js":
/*!*************************************!*\
  !*** ./plugins/cm-rescript-mode.js ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror/addon/mode/simple */ "./node_modules/codemirror/addon/mode/simple.js");
/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/lib/codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1__);
/* module decorator */ module = __webpack_require__.hmd(module);


codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineSimpleMode("rescript", {
  start: [{
    regex: /b?"/,
    token: "string",
    next: "string"
  }, {
    regex: /b?"/,
    token: "string",
    next: "string"
  }, {
    regex: /(\:\s*)(.*)(\s*=)\s/,
    token: [null, "type-annotation", null]
  }, {
    regex: /b?`/,
    token: "string",
    next: "string_interpolation"
  }, {
    regex: /'(?:[^'\\]|\\(?:[nrt0'"]|x[\da-fA-F]{2}|u\{[\da-fA-F]{6}\}))'/,
    token: "string-2"
  }, {
    regex: /b'(?:[^']|\\(?:['\\nrt0]|x[\da-fA-F]{2}))'/,
    token: "string-2"
  }, {
    regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,
    token: "number"
  }, {
    regex: /(let|type)(\s+rec)?(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,
    token: ["keyword", "keyword2", null, "def"]
  }, {
    regex: /(?:and|as|assert|catch|constraint|downto|else|exception|export|external|false|for|if|import|in|include|lazy|let|module|mutable|of|open|private|switch|to|true|try|type|when|while|with\!)\b/,
    token: "keyword"
  }, {
    regex: /(?:rec|list)\b/,
    token: "keyword2"
  }, {
    regex: /\b(?:char|bool|option|int|string)\b/,
    token: "atom"
  }, {
    regex: /\b(?:true|false)\b/,
    token: "builtin"
  }, {
    regex: /\b([A-Z][a-zA-Z0-9_]*)(\.)/,
    token: ["module", null]
  }, {
    regex: /\b([A-Z][a-zA-Z0-9_]*)/,
    token: ["variant-constructor", null, null, null]
  }, {
    regex: /#[a-zA-Z0-9_"]*/,
    token: "variant-constructor"
  }, {
    regex: /@.[\w\.\(\)]*/,
    token: "decorator"
  }, {
    regex: /#!?\[.*\]/,
    token: "meta"
  }, {
    regex: /\/\/.*/,
    token: "comment"
  }, {
    regex: /\/\*/,
    token: "comment",
    next: "comment"
  }, {
    regex: /[-+\/*=<>!\|]+/,
    token: "operator"
  }, {
    regex: /[a-zA-Z_]\w*!/,
    token: "variable-3"
  }, {
    regex: /[a-zA-Z_]\w*/,
    token: "variable"
  }, {
    regex: /[\{\[\(]/,
    indent: true
  }, {
    regex: /[\}\]\)]/,
    dedent: true
  }],
  variantConstructor: [],
  string: [{
    regex: /"/,
    token: "string",
    next: "start"
  }, {
    regex: /(?:[^\\"]|\\(?:.|$))*/,
    token: "string"
  }],
  list: [{
    regex: /list{/,
    token: "keyword2",
    next: "start"
  }, {
    regex: /[^`]*/,
    token: "string"
  }],
  string_interpolation: [{
    regex: /`/,
    token: "string",
    next: "start"
  }, {
    regex: /[^`]*/,
    token: "string"
  }],
  comment: [{
    regex: /.*?\*\//,
    token: "comment",
    next: "start"
  }, {
    regex: /.*/,
    token: "comment"
  }],
  meta: {
    dontIndentStates: ["comment"],
    electricInput: /^\s*\}$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    lineComment: "//",
    fold: "brace"
  }
});
codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineMIME("text/x-reasonsrc", "reason");
codemirror_lib_codemirror__WEBPACK_IMPORTED_MODULE_1___default().defineMIME("text/reason", "reason");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/Playground.mjs":
/*!****************************!*\
  !*** ./src/Playground.mjs ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$$default": function() { return /* binding */ $$default; },
/* harmony export */   "default": function() { return /* binding */ $$default; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _components_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/Icon.mjs */ "./src/components/Icon.mjs");
/* harmony import */ var _components_Meta_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Meta.mjs */ "./src/components/Meta.mjs");
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var _components_Text_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/Text.mjs */ "./src/components/Text.mjs");
/* harmony import */ var _common_Util_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/Util.mjs */ "./src/common/Util.mjs");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _components_AnsiPre_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/AnsiPre.mjs */ "./src/components/AnsiPre.mjs");
/* harmony import */ var rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rescript/lib/es6/js_dict.js */ "./node_modules/rescript/lib/es6/js_dict.js");
/* harmony import */ var _components_Markdown_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/Markdown.mjs */ "./src/components/Markdown.mjs");
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lz-string */ "./node_modules/lz-string/libs/lz-string.js");
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var _components_CodeMirror_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/CodeMirror.mjs */ "./src/components/CodeMirror.mjs");
/* harmony import */ var _components_Navigation_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/Navigation.mjs */ "./src/components/Navigation.mjs");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_belt_Result_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rescript/lib/es6/belt_Result.js */ "./node_modules/rescript/lib/es6/belt_Result.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _common_HighlightJs_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./common/HighlightJs.mjs */ "./src/common/HighlightJs.mjs");
/* harmony import */ var _common_CompilerManagerHook_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./common/CompilerManagerHook.mjs */ "./src/common/CompilerManagerHook.mjs");
/* harmony import */ var _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./bindings/RescriptCompilerApi.mjs */ "./src/bindings/RescriptCompilerApi.mjs");
/* harmony import */ var _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./common/WarningFlagDescription.mjs */ "./src/common/WarningFlagDescription.mjs");
/* module decorator */ module = __webpack_require__.hmd(module);


var _s = $RefreshSig$(),
    _s2 = $RefreshSig$(),
    _s3 = $RefreshSig$(),
    _s4 = $RefreshSig$(),
    _s5 = $RefreshSig$(),
    _s6 = $RefreshSig$();























if ( true && typeof window.navigator !== "undefined") {
  __webpack_require__(/*! codemirror/mode/javascript/javascript */ "./node_modules/codemirror/mode/javascript/javascript.js");

  __webpack_require__(/*! codemirror/addon/scroll/simplescrollbars */ "./node_modules/codemirror/addon/scroll/simplescrollbars.js");

  __webpack_require__(/*! plugins/cm-rescript-mode */ "./plugins/cm-rescript-mode.js");

  __webpack_require__(/*! plugins/cm-reason-mode */ "./plugins/cm-reason-mode.js");
}

;

function Playground$DropdownSelect(Props) {
  var onChange = Props.onChange;
  var name = Props.name;
  var value = Props.value;
  var disabledOpt = Props.disabled;
  var children = Props.children;
  var disabled = disabledOpt !== void 0 ? disabledOpt : false;
  var opacity = disabled ? " opacity-50" : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("select", {
    className: "text-14 bg-transparent border border-gray-80 inline-block rounded px-4 py-1 font-semibold" + opacity,
    disabled: disabled,
    name: name,
    value: value,
    onChange: onChange
  }, children);
}

_c = Playground$DropdownSelect;

function Playground$ToggleSelection(Props) {
  var onChange = Props.onChange;
  var values = Props.values;
  var toLabel = Props.toLabel;
  var selected = Props.selected;
  var disabledOpt = Props.disabled;
  var disabled = disabledOpt !== void 0 ? disabledOpt : false;
  var values$1 = values.length === 0 ? [selected] : values;
  var i = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.getIndexBy(values$1, function (lang) {
    return lang === selected;
  });
  var selectedIndex = i !== void 0 ? i : 0;
  var elements = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(values$1, function (i2, value) {
    var active = i2 === selectedIndex ? "bg-fire text-white font-bold" : "bg-gray-80 opacity-50";

    var label = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(toLabel, value);

    var onMouseDown = function onMouseDown(evt) {
      evt.preventDefault();
      evt.stopPropagation();

      if (i2 === selectedIndex) {
        return;
      }

      var value2 = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.get(values$1, i2);

      if (value2 !== void 0) {
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(onChange, rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(value2));
      }
    };

    var onClick = function onClick(param) {};

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", {
      key: label,
      className: "mr-1 px-2 py-1 rounded inline-block  " + active,
      disabled: disabled,
      onClick: onClick,
      onMouseDown: onMouseDown
    }, label);
  });
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: (disabled ? "opacity-25" : "") + "flex w-full"
  }, elements);
}

_c2 = Playground$ToggleSelection;

function defaultMakeTabClass(active) {
  var rest = active ? "text-fire font-medium bg-gray-100 hover:cursor-default" : "hover:cursor-pointer";
  return "flex items-center h-12 px-4 pr-24 " + rest;
}

function Playground$Pane(Props) {
  _s();

  var disabledOpt = Props.disabled;
  var tabs = Props.tabs;
  var makeTabClassOpt = Props.makeTabClass;
  var selectedOpt = Props.selected;
  var disabled = disabledOpt !== void 0 ? disabledOpt : false;
  var makeTabClass = makeTabClassOpt !== void 0 ? makeTabClassOpt : defaultMakeTabClass;
  var selected = selectedOpt !== void 0 ? selectedOpt : 0;
  var match = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {
    if (selected < 0 || selected >= tabs.length) {
      return 0;
    } else {
      return selected;
    }
  });
  var setCurrent = match[1];
  var current = match[0];
  react__WEBPACK_IMPORTED_MODULE_7__.useEffect(function () {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setCurrent, function (param) {
      return selected;
    });
  }, [selected]);
  var headers = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(tabs, function (i, tab) {
    var title = tab.title;

    var onMouseDown = function onMouseDown(evt) {
      evt.preventDefault();
      evt.stopPropagation();

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setCurrent, function (param) {
        return i;
      });
    };

    var active = current === i;

    var onClick = function onClick(param) {};

    var className = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(makeTabClass, active);

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", {
      key: String(i) + ("-" + title),
      className: className,
      disabled: disabled,
      onClick: onClick,
      onMouseDown: onMouseDown
    }, title);
  });
  var body = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(tabs, function (i, tab) {
    var className = current === i ? "block h-full" : "hidden";
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
      key: String(i),
      className: className
    }, tab.content);
  });
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex bg-gray-100 w-full " + (disabled ? "opacity-50" : "")
  }, headers), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, body)));
}

_s(Playground$Pane, "egwnPyh8Sh5ABX7OfLkPmmtPLw8=");

_c3 = Playground$Pane;

function renderTitle(targetLang, result) {
  var errClass = "text-white-80";
  var warnClass = "text-white font-bold";
  var okClass = "text-white-80";
  var match;

  if (typeof result === "number") {
    match = [okClass, "Ready"];
  } else if (result.TAG === 0) {
    switch (result._0.TAG | 0) {
      case 0:
        match = [okClass, "Format Successful"];
        break;

      case 1:
        match = [errClass, "Syntax Errors"];
        break;

      case 2:
        match = [errClass, "Unexpected Error"];
        break;

      case 3:
        match = [errClass, "Unknown Result"];
        break;
    }
  } else {
    var result$1 = result._0;

    switch (result$1.TAG | 0) {
      case 0:
        switch (result$1._0.TAG | 0) {
          case 0:
            match = [errClass, "Syntax Errors (" + (_bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(targetLang) + ")")];
            break;

          case 1:
            match = [errClass, "Type Errors"];
            break;

          case 2:
            match = [warnClass, "Warning Errors"];
            break;

          case 3:
            match = [errClass, "Config Error"];
            break;

          case 4:
            match = [errClass, "Errors"];
            break;
        }

        break;

      case 1:
        var warningNum = result$1._0.warnings.length;
        match = warningNum === 0 ? [okClass, "Compiled successfully"] : [warnClass, "Compiled with " + (String(warningNum) + " Warning(s)")];
        break;

      case 2:
        match = [errClass, "Unexpected Error"];
        break;

      case 3:
        match = [errClass, "Unknown Result"];
        break;
    }
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
    className: match[0]
  }, match[1]);
}

function Playground$Statusbar(Props) {
  var actionIndicatorKey = Props.actionIndicatorKey;
  var state = Props.state;

  if (typeof state === "number") {
    return null;
  }

  switch (state.TAG | 0) {
    case 2:
    case 3:
      break;

    default:
      return null;
  }

  var ready = state._0;
  var result = ready.result;
  var activityIndicatorColor;

  if (typeof result === "number") {
    activityIndicatorColor = "bg-turtle-dark";
  } else if (result.TAG === 0) {
    activityIndicatorColor = result._0.TAG === 0 ? "bg-turtle-dark" : "bg-fire-70";
  } else {
    var match = result._0;
    activityIndicatorColor = match.TAG === 1 ? match._0.warnings.length === 0 ? "bg-turtle-dark" : "bg-orange" : "bg-fire-70";
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "py-2 pb-3 flex items-center text-white " + activityIndicatorColor
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex items-center font-medium px-4"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    key: actionIndicatorKey,
    className: "pr-4 animate-pulse"
  }, renderTitle(ready.targetLang, result))));
}

_c4 = Playground$Statusbar;

function Playground$ResultPane$PreWrap(Props) {
  var classNameOpt = Props.className;
  var children = Props.children;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("pre", {
    className: "whitespace-pre-wrap " + className
  }, children);
}

_c5 = Playground$ResultPane$PreWrap;

function compactErrorLine(highlightOpt, prefix, locMsg) {
  var highlight = highlightOpt !== void 0 ? highlightOpt : false;
  var prefixColor = prefix === "W" ? "text-orange" : "text-fire";
  var prefixText = prefix === "W" ? "[W]" : "[E]";
  var highlightClass = highlight ? prefix === "W" ? "bg-orange-15" : "bg-fire-90 rounded" : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "font-mono mb-4 pb-6 last:mb-0 last:pb-0 last:border-0 border-b border-gray-80 "
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "p-2 " + highlightClass
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
    className: prefixColor
  }, prefixText), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
    className: "font-medium text-gray-40"
  }, " Line " + locMsg.row + ", column " + locMsg.column + ":"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_AnsiPre_mjs__WEBPACK_IMPORTED_MODULE_8__.make, {
    className: "whitespace-pre-wrap ",
    children: locMsg.shortMsg
  })));
}

function isHighlighted(focusedRowCol, locMsg) {
  if (focusedRowCol !== void 0 && focusedRowCol[0] === locMsg.row) {
    return focusedRowCol[1] === locMsg.column;
  } else {
    return false;
  }
}

function filterHighlightedLocMsgs(focusedRowCol, locMsgs) {
  if (focusedRowCol === void 0) {
    return locMsgs;
  }

  var fCol = focusedRowCol[1];
  var fRow = focusedRowCol[0];
  var filtered = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.keep(locMsgs, function (locMsg) {
    if (fRow === locMsg.row) {
      return fCol === locMsg.column;
    } else {
      return false;
    }
  });

  if (filtered.length === 0) {
    return locMsgs;
  } else {
    return filtered;
  }
}

function filterHighlightedLocWarnings(focusedRowCol, warnings) {
  if (focusedRowCol === void 0) {
    return warnings;
  }

  var fCol = focusedRowCol[1];
  var fRow = focusedRowCol[0];
  var filtered = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.keep(warnings, function (warning) {
    var details = warning.details;

    if (fRow === details.row) {
      return fCol === details.column;
    } else {
      return false;
    }
  });

  if (filtered.length === 0) {
    return warnings;
  } else {
    return filtered;
  }
}

function renderResult(focusedRowCol, targetLang, compilerVersion, result) {
  var msg;
  var json;

  if (typeof result === "number") {
    var syntax = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(targetLang);
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
      children: "This playground is now running on compiler version " + compilerVersion + " with " + syntax + " syntax"
    });
  }

  if (result.TAG === 0) {
    var msg$1 = result._0;

    switch (msg$1.TAG | 0) {
      case 0:
        var match = msg$1._0;
        var toLang = match.toLang;
        var msg$2;

        if (match.fromLang === toLang) {
          msg$2 = "Formatting completed with 0 errors";
        } else {
          var toStr = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(toLang);
          msg$2 = "Switched to " + toStr + " with 0 errors";
        }

        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
          children: msg$2
        });

      case 1:
        var toLang$1 = msg$1.toLang;
        var fromLang = msg$1.fromLang;
        var errs = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(filterHighlightedLocMsgs(focusedRowCol, msg$1.details), function (i, locMsg) {
          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
            key: String(i)
          }, compactErrorLine(isHighlighted(focusedRowCol, locMsg), "E", locMsg));
        });
        var msg$3;

        if (fromLang === toLang$1) {
          var langStr = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(toLang$1);
          msg$3 = "The code is not valid " + langStr + " syntax.";
        } else {
          var fromStr = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(fromLang);
          var toStr$1 = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toString(toLang$1);
          msg$3 = 'Could not convert from "' + fromStr + '" to "' + toStr$1 + '" due to malformed syntax:';
        }

        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
          className: "text-16 mb-4",
          children: msg$3
        }), errs);

      case 2:
        return msg$1._0;

      case 3:
        msg = msg$1._0;
        json = msg$1._1;
        break;
    }
  } else {
    var result$1 = result._0;

    switch (result$1.TAG | 0) {
      case 0:
        var result$2 = result$1._0;

        switch (result$2.TAG | 0) {
          case 2:
            return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(filterHighlightedLocWarnings(focusedRowCol, result$2._0), function (i, warning) {
              var match2;
              match2 = warning.TAG === 0 ? ["W", warning.details] : ["E", warning.details];
              var details = match2[1];
              return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
                key: String(i)
              }, compactErrorLine(isHighlighted(focusedRowCol, details), match2[0], details));
            });

          case 3:
            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, "There are some issues with your compiler flag configuration:", result$2._0.msg);

          default:
            return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(filterHighlightedLocMsgs(focusedRowCol, result$2._0), function (i, locMsg) {
              return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
                key: String(i)
              }, compactErrorLine(isHighlighted(focusedRowCol, locMsg), "E", locMsg));
            });
        }

      case 1:
        var warnings = result$1._0.warnings;

        if (warnings.length === 0) {
          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
            children: "0 Errors, 0 Warnings"
          });
        } else {
          return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(filterHighlightedLocWarnings(focusedRowCol, warnings), function (i, warning) {
            var match2;
            match2 = warning.TAG === 0 ? ["W", warning.details] : ["E", warning.details];
            var details = match2[1];
            return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
              key: String(i)
            }, compactErrorLine(isHighlighted(focusedRowCol, details), match2[0], details));
          });
        }

      case 2:
        return result$1._0;

      case 3:
        msg = result$1._0;
        json = result$1._1;
        break;
    }
  }

  var subheader = "font-bold text-gray-40 text-16";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
    children: null
  }, "The compiler bundle API returned a result that couldn't be interpreted. Please open an issue on our ", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_Markdown_mjs__WEBPACK_IMPORTED_MODULE_10__.A.make, {
    href: "https://github.com/rescript-association/rescript-lang.org/issues",
    children: "issue tracker"
  }), "."), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-4"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
    children: null
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: subheader
  }, "Message: "), msg)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-4"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane$PreWrap, {
    children: null
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
    className: subheader
  }, "Received JSON payload:"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, _common_Util_mjs__WEBPACK_IMPORTED_MODULE_5__.Json.prettyStringify(json)))));
}

function renderTitle$1(result) {
  var errClass = "text-fire";
  var warnClass = "text-orange";
  var okClass = "text-turtle-dark";
  var match;

  if (typeof result === "number") {
    match = [okClass, "Ready"];
  } else if (result.TAG === 0) {
    switch (result._0.TAG | 0) {
      case 0:
        match = [okClass, "Format Successful"];
        break;

      case 1:
        match = [errClass, "Syntax Errors"];
        break;

      case 2:
        match = [errClass, "Unexpected Error"];
        break;

      case 3:
        match = [errClass, "Unknown Result"];
        break;
    }
  } else {
    var result$1 = result._0;

    switch (result$1.TAG | 0) {
      case 0:
        switch (result$1._0.TAG | 0) {
          case 0:
            match = [errClass, "Syntax Errors"];
            break;

          case 1:
            match = [errClass, "Type Errors"];
            break;

          case 2:
            match = [warnClass, "Warning Errors"];
            break;

          case 3:
            match = [errClass, "Config Error"];
            break;

          case 4:
            match = [errClass, "Errors"];
            break;
        }

        break;

      case 1:
        var warningNum = result$1._0.warnings.length;
        match = warningNum === 0 ? [okClass, "Compiled successfully"] : [warnClass, "Compiled with " + (String(warningNum) + " Warning(s)")];
        break;

      case 2:
        match = [errClass, "Unexpected Error"];
        break;

      case 3:
        match = [errClass, "Unknown Result"];
        break;
    }
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
    className: match[0]
  }, match[1]);
}

function Playground$ResultPane(Props) {
  var targetLang = Props.targetLang;
  var compilerVersion = Props.compilerVersion;
  var focusedRowCol = Props.focusedRowCol;
  var result = Props.result;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "pt-4 bg-0 overflow-y-auto hide-scrollbar"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex items-center text-16 font-medium px-4"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "pr-4"
  }, renderTitle$1(result))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: ""
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "bg-gray-90 text-gray-20 px-4 py-4"
  }, renderResult(focusedRowCol, targetLang, compilerVersion, result))));
}

_c6 = Playground$ResultPane;

function updateInput(prev, input) {
  var suggestion;

  if (input === "") {
    suggestion = 0;
  } else {
    var last = input.length - 1 | 0;
    var match = input[last];
    var exit = 0;

    switch (match) {
      case "+":
      case "-":
        exit = 1;
        break;

      default:
        var results = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.parse(input);

        if (results.TAG === 0) {
          var tokens = results._0;
          var last$1 = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.get(tokens, tokens.length - 1 | 0);

          if (last$1 !== void 0) {
            var results$1 = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.fuzzyLookup(last$1.flag);

            if (results$1.length === 0) {
              suggestion = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 1,
                _0: "No results"
              }, Symbol["for"]("name"), "ErrorSuggestion");
            } else {
              var precedingTokens = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.slice(tokens, 0, tokens.length - 1 | 0);
              var modifier = last$1.enabled ? "+" : "-";
              suggestion = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 0,
                modifier: modifier,
                precedingTokens: precedingTokens,
                results: results$1,
                selected: 0
              }, Symbol["for"]("name"), "FuzzySuggestions");
            }
          } else {
            suggestion = 0;
          }
        } else {
          var exit$1 = 0;

          switch (input) {
            case "+":
            case "-":
              exit$1 = 2;
              break;

            default:
              suggestion = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 1,
                _0: results._0
              }, Symbol["for"]("name"), "ErrorSuggestion");
          }

          if (exit$1 === 2) {
            var results$2 = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.lookupAll(void 0);
            suggestion = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 0,
              modifier: input,
              precedingTokens: [],
              results: results$2,
              selected: 0
            }, Symbol["for"]("name"), "FuzzySuggestions");
          }
        }

    }

    if (exit === 1) {
      var results$3 = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.lookupAll(void 0);
      var partial = input.substring(0, last);
      var tokens$1 = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.parse(partial);
      var precedingTokens$1;
      precedingTokens$1 = tokens$1.TAG === 0 ? tokens$1._0 : [];
      suggestion = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        modifier: match,
        precedingTokens: precedingTokens$1,
        results: results$3,
        selected: 0
      }, Symbol["for"]("name"), "FuzzySuggestions");
    }
  }

  switch (prev.TAG | 0) {
    case 0:
    case 1:
    case 2:
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 2,
        suggestion: suggestion,
        input: input
      }, Symbol["for"]("name"), "Typing");
  }
}

function Playground$WarningFlagsWidget(Props) {
  _s2();

  var onUpdate = Props.onUpdate;
  var flags = Props.flags;
  var match = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 0,
      input: ""
    }, Symbol["for"]("name"), "HideSuggestion");
  });
  var setState = match[1];
  var state = match[0];
  var listboxRef = react__WEBPACK_IMPORTED_MODULE_7__.useRef(null);
  var inputRef = react__WEBPACK_IMPORTED_MODULE_7__.useRef(null);
  var chips = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(flags, function (i, token2) {
    var flag = token2.flag;
    var enabled = token2.enabled;
    var isActive2;

    switch (state.TAG | 0) {
      case 1:
        isActive2 = state.token.flag === flag;
        break;

      case 0:
      case 2:
        isActive2 = false;
        break;
    }

    var full = (enabled ? "+" : "-") + flag;
    var color = enabled ? isActive2 ? "bg-gray-40 text-turtle-dark" : "text-turtle-dark" : isActive2 ? "bg-gray-40 text-fire" : "text-fire";
    var hoverEnabled;

    switch (state.TAG | 0) {
      case 0:
        hoverEnabled = false;
        break;

      case 1:
      case 2:
        hoverEnabled = true;
        break;
    }

    var match2;

    if (hoverEnabled) {
      var enter = function enter(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 1,
            lastState: prev,
            token: token2
          }, Symbol["for"]("name"), "ShowTokenHint");
        });
      };

      var leave = function leave(evt) {
        evt.preventDefault();
        evt.stopPropagation();

        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
          switch (prev.TAG | 0) {
            case 1:
              return prev.lastState;

            case 0:
            case 2:
              return prev;
          }
        });
      };

      match2 = [enter, leave];
    } else {
      match2 = [void 0, void 0];
    }

    var onClick2 = function onClick2(evt) {
      evt.preventDefault();

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(onUpdate, rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.keep(flags, function (t) {
        return t.flag !== flag;
      }));
    };

    var tmp2 = {
      key: String(i) + flag,
      className: color + " hover:cursor-default text-16 inline-block border border-gray-40 rounded-full px-2 mr-1",
      onClick: onClick2
    };
    var tmp$1 = match2[0];

    if (tmp$1 !== void 0) {
      tmp2.onMouseEnter = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(tmp$1);
    }

    var tmp$2 = match2[1];

    if (tmp$2 !== void 0) {
      tmp2.onMouseLeave = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(tmp$2);
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", tmp2, full);
  });

  var onKeyDown = function onKeyDown(evt) {
    var key = evt.key;
    var ctrlKey = evt.ctrlKey;
    var full = (ctrlKey ? "CTRL+" : "") + key;
    var exit2 = 0;

    switch (full) {
      case "ArrowLeft":
      case "ArrowRight":
        return;

      case "ArrowDown":
      case "CTRL+n":
        exit2 = 1;
        break;

      case "ArrowUp":
      case "CTRL+p":
        exit2 = 2;
        break;

      case "Enter":
        switch (state.TAG | 0) {
          case 0:
          case 1:
            break;

          case 2:
            var match2 = state.suggestion;

            if (typeof match2 !== "number" && match2.TAG === 0) {
              var match$12 = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.get(match2.results, match2.selected);

              if (match$12 !== void 0) {
                var token_enabled = match2.modifier === "+";
                var token_flag = match$12[0];
                var token2 = {
                  enabled: token_enabled,
                  flag: token_flag
                };
                var newTokens = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.concat(match2.precedingTokens, [token2]);
                var all = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.merge(flags, newTokens);

                rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(onUpdate, all);

                rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
                  return updateInput(prev, "");
                });
              }
            }

            break;
        }

        evt.preventDefault();
        return;

      case "Escape":
        return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_15__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.nullable_to_opt(inputRef.current), function (el) {
          el.blur();
        });

      case "Tab":
        switch (state.TAG | 0) {
          case 0:
          case 1:
            return;

          case 2:
            var match$22 = state.suggestion;

            if (typeof match$22 === "number") {
              return;
            }

            if (match$22.TAG !== 0) {
              return;
            }

            var match$3 = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.get(match$22.results, match$22.selected);

            if (match$3 !== void 0) {
              var flag = match$22.modifier + match$3[0];
              var completed = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.tokensToString(match$22.precedingTokens) + flag;

              rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
                return updateInput(prev, completed);
              });
            }

            evt.preventDefault();
            return;
        }

      default:
        switch (state.TAG | 0) {
          case 0:
          case 1:
            console.log(full);
            return;

          case 2:
            var tmp2 = state.suggestion;

            if (typeof tmp2 === "number") {
              console.log(full);
              return;
            }

            if (tmp2.TAG !== 0) {
              if (full !== "Backspace") {
                evt.preventDefault();
                return;
              } else {
                return;
              }
            }

            console.log(full);
            return;
        }

    }

    switch (exit2) {
      case 1:
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
          switch (prev.TAG | 0) {
            case 0:
            case 1:
              return prev;

            case 2:
              var suggestion = prev.suggestion;

              if (typeof suggestion === "number") {
                return prev;
              }

              if (suggestion.TAG !== 0) {
                return prev;
              }

              var selected2 = suggestion.selected;
              var nextIdx = selected2 < (suggestion.results.length - 1 | 0) ? selected2 + 1 | 0 : 0;
              return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 2,
                suggestion: (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 0,
                  modifier: suggestion.modifier,
                  precedingTokens: suggestion.precedingTokens,
                  results: suggestion.results,
                  selected: nextIdx
                }, Symbol["for"]("name"), "FuzzySuggestions"),
                input: prev.input
              }, Symbol["for"]("name"), "Typing");
          }
        });

        evt.preventDefault();
        return;

      case 2:
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
          switch (prev.TAG | 0) {
            case 0:
            case 1:
              return prev;

            case 2:
              var suggestion = prev.suggestion;

              if (typeof suggestion === "number") {
                return prev;
              }

              if (suggestion.TAG !== 0) {
                return prev;
              }

              var selected2 = suggestion.selected;
              var nextIdx = selected2 > 0 ? selected2 - 1 | 0 : suggestion.results.length - 1 | 0;
              return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 2,
                suggestion: (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 0,
                  modifier: suggestion.modifier,
                  precedingTokens: suggestion.precedingTokens,
                  results: suggestion.results,
                  selected: nextIdx
                }, Symbol["for"]("name"), "FuzzySuggestions"),
                input: prev.input
              }, Symbol["for"]("name"), "Typing");
          }
        });

        evt.preventDefault();
        return;
    }
  };

  var suggestions;

  switch (state.TAG | 0) {
    case 0:
      suggestions = void 0;
      break;

    case 1:
      var token = state.token;
      suggestions = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.some(rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.map(_common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.lookup(token.flag), function (param) {
        var match2 = token.enabled ? ["(Enabled) ", "text-turtle-dark"] : ["(Disabled) ", "text-fire"];
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
          key: param[0]
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("span", {
          className: match2[1]
        }, match2[0]), param[1]);
      }));
      break;

    case 2:
      var msg = state.suggestion;
      var tmp;

      if (typeof msg === "number") {
        tmp = "Type + / - followed by a number or letter (e.g. +a+1)";
      } else if (msg.TAG === 0) {
        var selected = msg.selected;
        var precedingTokens = msg.precedingTokens;
        var modifier = msg.modifier;
        tmp = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.mapWithIndex(msg.results, function (i, param) {
          var flag = param[0];
          var activeClass2 = selected === i ? "bg-gray-40" : "";
          var ref = selected === i ? rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.some(function (dom) {
            var parent = listboxRef.current;

            if (!(parent == null) && !(dom == null)) {
              if (parent.scrollHeight <= parent.clientHeight) {
                return;
              }

              var scrollBottom = parent.clientHeight + parent.scrollTop | 0;
              var elementBottom = dom.offsetTop + dom.offsetHeight | 0;

              if (elementBottom > scrollBottom) {
                parent.scrollTop = elementBottom - parent.clientHeight | 0;
                return;
              } else if ((dom.offsetTop - dom.offsetHeight | 0) < parent.scrollTop) {
                parent.scrollTop = dom.offsetTop - dom.offsetHeight | 0;
                return;
              } else {
                return;
              }
            }
          }) : void 0;

          var onMouseEnter = function onMouseEnter(evt) {
            evt.preventDefault();

            rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
              switch (prev.TAG | 0) {
                case 0:
                case 1:
                  return prev;

                case 2:
                  var fuzzySuggestion = prev.suggestion;

                  if (typeof fuzzySuggestion === "number" || fuzzySuggestion.TAG !== 0) {
                    return prev;
                  } else {
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 2,
                      suggestion: (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                        TAG: 0,
                        modifier: fuzzySuggestion.modifier,
                        precedingTokens: fuzzySuggestion.precedingTokens,
                        results: fuzzySuggestion.results,
                        selected: i
                      }, Symbol["for"]("name"), "FuzzySuggestions"),
                      input: state.input
                    }, Symbol["for"]("name"), "Typing");
                  }

              }
            });
          };

          var onClick2 = function onClick2(evt) {
            evt.preventDefault();

            rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
              switch (prev.TAG | 0) {
                case 0:
                case 1:
                  return prev;

                case 2:
                  var full = modifier + flag;
                  var completed = _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.tokensToString(precedingTokens) + full;
                  return updateInput(prev, completed);
              }
            });
          };

          var tmp2 = {
            key: flag,
            className: activeClass2,
            onMouseDown: onClick2,
            onMouseEnter: onMouseEnter
          };

          if (ref !== void 0) {
            tmp2.ref = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(ref);
          }

          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", tmp2, modifier + (flag + (": " + param[1])));
        });
      } else {
        tmp = msg._0;
      }

      suggestions = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.some(tmp);
      break;
  }

  var suggestionBox = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_15__.getWithDefault(rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_15__.map(suggestions, function (elements) {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
      ref: listboxRef,
      className: "p-2 absolute overflow-auto z-50 border-b rounded border-l border-r block w-full bg-gray-100",
      style: {
        maxHeight: "15rem"
      }
    }, elements);
  }), null);

  var onChange = function onChange(evt) {
    evt.preventDefault();
    var input = evt.target.value;

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
      return updateInput(prev, input);
    });
  };

  var onBlur = function onBlur(evt) {
    evt.preventDefault();
    evt.stopPropagation();

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
      switch (prev.TAG | 0) {
        case 0:
          return prev;

        case 1:
          var match2 = prev.lastState;

          switch (match2.TAG | 0) {
            case 0:
            case 1:
              return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 0,
                input: ""
              }, Symbol["for"]("name"), "HideSuggestion");

            case 2:
              return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 0,
                input: match2.input
              }, Symbol["for"]("name"), "HideSuggestion");
          }

        case 2:
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 0,
            input: prev.input
          }, Symbol["for"]("name"), "HideSuggestion");
      }
    });
  };

  var onFocus = function onFocus(evt) {
    var input = evt.target.value;

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (prev) {
      return updateInput(prev, input);
    });
  };

  var isActive;

  switch (state.TAG | 0) {
    case 0:
      isActive = false;
      break;

    case 1:
    case 2:
      isActive = true;
      break;
  }

  var deleteButton;
  var exit = 0;
  var len = flags.length;

  if (len !== 1) {
    if (len !== 0) {
      exit = 1;
    } else {
      deleteButton = null;
    }
  } else {
    var match$1 = flags[0];

    if (match$1.enabled || match$1.flag !== "a") {
      exit = 1;
    } else {
      deleteButton = null;
    }
  }

  if (exit === 1) {
    var onMouseDown = function onMouseDown(evt) {
      evt.preventDefault();

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(onUpdate, [{
        enabled: false,
        flag: "a"
      }]);
    };

    var onClick = function onClick(param) {};

    var onFocus$1 = function onFocus$1(evt) {
      evt.preventDefault();
      evt.stopPropagation();
    };

    deleteButton = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", {
      className: "focus:outline-none self-start focus:ring hover:cursor-pointer hover:bg-gray-40 p-2 rounded-full",
      tabIndex: 0,
      onFocus: onFocus$1,
      onClick: onClick,
      onMouseDown: onMouseDown
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Close.make, {}));
  }

  var activeClass = isActive ? "border-white" : "border-gray-60";

  var areaOnFocus = function areaOnFocus(_evt) {
    if (!isActive) {
      return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_15__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.nullable_to_opt(inputRef.current), function (el) {
        el.focus();
      });
    }
  };

  var inputValue;

  switch (state.TAG | 0) {
    case 0:
      inputValue = state.input;
      break;

    case 1:
      var match$2 = state.lastState;

      switch (match$2.TAG | 0) {
        case 0:
        case 1:
          inputValue = "";
          break;

        case 2:
          inputValue = match$2.input;
          break;
      }

      break;

    case 2:
      inputValue = state.input;
      break;
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "relative",
    tabIndex: -1,
    onKeyDown: onKeyDown,
    onFocus: areaOnFocus
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex justify-between border p-2 " + activeClass
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, chips, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("input", {
    ref: inputRef,
    className: "outline-none bg-gray-90 placeholder-gray-20 placeholder-opacity-50",
    tabIndex: 0,
    placeholder: "Flags",
    type: "text",
    value: inputValue,
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: onChange
  })), deleteButton), suggestionBox);
}

_s2(Playground$WarningFlagsWidget, "VD3HYuSmEub6hQs9XKEmH5/ybQk=");

_c7 = Playground$WarningFlagsWidget;

function Playground$Settings(Props) {
  var readyState = Props.readyState;
  var dispatch = Props.dispatch;
  var setConfig = Props.setConfig;
  var editorCode = Props.editorCode;
  var config = Props.config;
  var availableTargetLangs = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Version.availableLanguages(readyState.selected.apiVersion);

  var onTargetLangSelect = function onTargetLangSelect(lang) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(dispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 1,
      lang: lang,
      code: editorCode.current
    }, Symbol["for"]("name"), "SwitchLanguage"));
  };

  var onWarningFlagsUpdate = function onWarningFlagsUpdate(flags) {
    var normalizeEmptyFlags = function normalizeEmptyFlags(flags2) {
      if (flags2.length !== 0) {
        return flags2;
      } else {
        return [{
          enabled: false,
          flag: "a"
        }];
      }
    };

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setConfig, {
      module_system: config.module_system,
      warn_flags: _common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.tokensToString(normalizeEmptyFlags(flags))
    });
  };

  var onModuleSystemUpdate = function onModuleSystemUpdate(module_system) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setConfig, {
      module_system: module_system,
      warn_flags: config.warn_flags
    });
  };

  var warnFlagTokens = rescript_lib_es6_belt_Result_js__WEBPACK_IMPORTED_MODULE_16__.getWithDefault(_common_WarningFlagDescription_mjs__WEBPACK_IMPORTED_MODULE_21__.Parser.parse(config.warn_flags), []);

  var onResetClick = function onResetClick(evt) {
    evt.preventDefault();

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setConfig, {
      module_system: "nodejs",
      warn_flags: "+a-4-9-20-40-41-42-50-61-102-109"
    });
  };

  var titleClass = "hl-5 text-gray-20 mb-2";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "p-4 pt-8 bg-gray-90 text-gray-20"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: titleClass
  }, "ReScript Version"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$DropdownSelect, {
    onChange: function onChange(evt) {
      evt.preventDefault();
      var id = evt.target.value;

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(dispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        id: id,
        libraries: readyState.selected.libraries
      }, Symbol["for"]("name"), "SwitchToCompiler"));
    },
    name: "compilerVersions",
    value: readyState.selected.id,
    children: rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.map(readyState.versions, function (version) {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("option", {
        key: version,
        className: "py-4",
        value: version
      }, version);
    })
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: titleClass
  }, "Syntax"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ToggleSelection, {
    onChange: onTargetLangSelect,
    values: availableTargetLangs,
    toLabel: function toLabel(lang) {
      return _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toExt(lang).toUpperCase();
    },
    selected: readyState.targetLang
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: titleClass
  }, "Module-System"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ToggleSelection, {
    onChange: onModuleSystemUpdate,
    values: ["nodejs", "es6"],
    toLabel: function toLabel(value) {
      return value;
    },
    selected: config.module_system
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: titleClass
  }, "Enabled Libraries"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("ul", void 0, rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_12__.map(readyState.selected.libraries, function (lib) {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("li", {
      key: lib,
      className: "ml-2"
    }, lib);
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "mt-8"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: titleClass
  }, "Warning Flags", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", {
    className: "ml-6 text-12 " + _components_Text_mjs__WEBPACK_IMPORTED_MODULE_4__.Link.standalone,
    onMouseDown: onResetClick
  }, "[reset]")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex justify-end"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    style: {
      maxWidth: "40rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$WarningFlagsWidget, {
    onUpdate: onWarningFlagsUpdate,
    flags: warnFlagTokens
  }))));
}

_c8 = Playground$Settings;

function Playground$ControlPanel$Button(Props) {
  var children = Props.children;
  var onClick = Props.onClick;
  var tmp = {
    className: "inline-block text-sky hover:cursor-pointer hover:bg-sky hover:text-white-80-tr rounded border active:bg-sky-70 border-sky-70 px-2 py-1 "
  };

  if (onClick !== void 0) {
    tmp.onClick = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(onClick);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", tmp, children);
}

_c9 = Playground$ControlPanel$Button;

var copyToClipboard = function copyToClipboard(str) {
  try {
    var el = document.createElement("textarea");
    el.value = str;
    el.setAttribute("readonly", "");
    el.style.position = "absolute";
    el.style.left = "-9999px";
    document.body.appendChild(el);
    var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
    el.select();
    document.execCommand("copy");
    document.body.removeChild(el);

    if (selected) {
      document.getSelection().removeAllRanges();
      document.getSelection().addRange(selected);
    }

    return true;
  } catch (e) {
    return false;
  }
};

function Playground$ControlPanel$ShareButton(Props) {
  _s3();

  var createShareLink = Props.createShareLink;
  var actionIndicatorKey = Props.actionIndicatorKey;
  var match = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {
    return 0;
  });
  var setState = match[1];
  react__WEBPACK_IMPORTED_MODULE_7__.useEffect(function () {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (param) {
      return 0;
    });
  }, [actionIndicatorKey]);

  var onClick = function onClick(evt) {
    evt.preventDefault();

    var url = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(createShareLink, void 0);

    var ret = copyToClipboard(url);

    if (ret) {
      return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setState, function (param) {
        return 1;
      });
    }
  };

  var match$1 = match[0] ? ["\u5DF2\u88AB\u590D\u5236\u5230\u526A\u5207\u677F\uFF01", "bg-turtle-dark border-turtle-dark"] : ["\u590D\u5236\u5171\u4EAB\u94FE\u63A5", " bg-sky body-xs active:bg-sky-70 border-sky-70"];
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("button", {
    className: match$1[1] + " w-40 transition-all duration-500 ease-in-out inline-block hover:cursor-pointer hover:text-white-80 text-white rounded border px-2 py-1 ",
    onClick: onClick
  }, match$1[0]));
}

_s3(Playground$ControlPanel$ShareButton, "RtN9c3DjR2D3vb21AFWse2wVAYU=");

_c10 = Playground$ControlPanel$ShareButton;

function Playground$ControlPanel(Props) {
  _s4();

  var actionIndicatorKey = Props.actionIndicatorKey;
  var state = Props.state;
  var dispatch = Props.dispatch;
  var editorCode = Props.editorCode;
  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Router.useRouter(void 0);
  var children;
  var exit = 0;

  if (typeof state === "number") {
    children = "Initializing...";
  } else {
    switch (state.TAG | 0) {
      case 0:
        children = null;
        break;

      case 1:
        children = "Switching Compiler...";
        break;

      case 2:
      case 3:
        exit = 1;
        break;
    }
  }

  if (exit === 1) {
    var ready = state._0;

    var onFormatClick = function onFormatClick(evt) {
      evt.preventDefault();

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(dispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 2,
        _0: editorCode.current
      }, Symbol["for"]("name"), "Format"));
    };

    var createShareLink = function createShareLink(param) {
      var lang = ready.targetLang;
      var params = lang >= 2 ? [] : [["ext", _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_20__.Lang.toExt(lang)]];
      params.push(["code", lz_string__WEBPACK_IMPORTED_MODULE_11__.compressToEncodedURIComponent(editorCode.current)]);
      var querystring = params.map(function (param2) {
        return param2[0] + "=" + param2[1];
      }).join("&");
      var url = window.location.origin + router.route + "?" + querystring;
      _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Router.replace(router, url);
      return url;
    };

    children = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
      className: "mr-2"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ControlPanel$Button, {
      children: "\u683C\u5F0F\u5316",
      onClick: onFormatClick
    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ControlPanel$ShareButton, {
      createShareLink: createShareLink,
      actionIndicatorKey: actionIndicatorKey
    }));
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "flex justify-end items-center h-12 bg-gray-100 px-4"
  }, children);
}

_s4(Playground$ControlPanel, "fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=", true);

_c11 = Playground$ControlPanel;

function locMsgToCmError(kind, locMsg) {
  return {
    row: locMsg.row,
    column: locMsg.column,
    endRow: locMsg.endRow,
    endColumn: locMsg.endColumn,
    text: locMsg.shortMsg,
    kind: kind
  };
}

function codeFromResult(result) {
  if (typeof result === "number") {
    return "/* No JS code generated */";
  }

  if (result.TAG === 0) {
    return "/* No JS code generated */";
  }

  var comp = result._0;

  if (comp.TAG === 1) {
    return comp._0.js_code;
  } else {
    return "/* No JS code generated */";
  }
}

function Playground$OutputPanel(Props) {
  _s5();

  var compilerDispatch = Props.compilerDispatch;
  var compilerState = Props.compilerState;
  var editorCode = Props.editorCode;
  var prevState = react__WEBPACK_IMPORTED_MODULE_7__.useRef(void 0);
  var prev = prevState.current;
  var cmCode;

  if (prev !== void 0) {
    var exit = 0;
    var exit$1 = 0;

    if (typeof compilerState === "number") {
      cmCode = void 0;
    } else {
      switch (compilerState.TAG | 0) {
        case 2:
          if (typeof compilerState._0.result === "number") {
            cmCode = void 0;
          } else {
            exit$1 = 2;
          }

          break;

        case 3:
          exit$1 = 2;
          break;

        default:
          cmCode = void 0;
      }
    }

    if (exit$1 === 2) {
      if (typeof prev === "number" || prev.TAG !== 2) {
        exit = 1;
      } else {
        var result = prev._0.result;

        if (typeof compilerState !== "number") {
          if (compilerState.TAG === 2) {
            var ready = compilerState._0;
            var match = ready.result;
            cmCode = typeof match === "number" || match.TAG === 0 || match._0.TAG !== 1 ? void 0 : codeFromResult(ready.result);
          } else {
            cmCode = typeof result === "number" || result.TAG === 0 || result._0.TAG !== 1 ? void 0 : codeFromResult(result);
          }
        }
      }
    }

    if (exit === 1 && typeof compilerState !== "number") {
      if (compilerState.TAG === 2) {
        var result$1 = compilerState._0.result;

        if (typeof result$1 !== "number") {
          cmCode = result$1.TAG === 0 || result$1._0.TAG !== 1 ? void 0 : codeFromResult(result$1);
        }
      } else {
        cmCode = void 0;
      }
    }
  } else {
    cmCode = typeof compilerState === "number" || compilerState.TAG !== 2 ? void 0 : codeFromResult(compilerState._0.result);
  }

  prevState.current = compilerState;
  var resultPane;
  var exit$2 = 0;

  if (typeof compilerState === "number") {
    resultPane = null;
  } else {
    switch (compilerState.TAG | 0) {
      case 2:
      case 3:
        exit$2 = 1;
        break;

      default:
        resultPane = null;
    }
  }

  if (exit$2 === 1) {
    var ready$1 = compilerState._0;
    var match$1 = ready$1.result;
    var exit$3 = 0;

    if (typeof match$1 === "number") {
      exit$3 = 2;
    } else if (match$1.TAG === 0) {
      if (match$1._0.TAG === 0) {
        resultPane = null;
      } else {
        exit$3 = 2;
      }
    } else if (match$1._0.TAG === 1) {
      resultPane = null;
    } else {
      exit$3 = 2;
    }

    if (exit$3 === 2) {
      resultPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane, {
        targetLang: ready$1.targetLang,
        compilerVersion: ready$1.selected.compilerVersion,
        result: ready$1.result
      });
    }
  }

  var match$2 = cmCode !== void 0 ? [cmCode, true] : ["", false];
  var codeElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("pre", {
    className: "whitespace-pre-wrap overflow-y-auto p-4 " + (match$2[1] ? "block" : "hidden"),
    style: {
      height: "calc(100vh - 11.5rem)"
    }
  }, _common_HighlightJs_mjs__WEBPACK_IMPORTED_MODULE_18__.renderHLJS(void 0, true, match$2[0], "js", void 0));
  var output = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "relative w-full bg-gray-90 text-gray-20",
    style: {
      height: "calc(100vh - 9rem)"
    }
  }, resultPane, codeElement);
  var errorPane;

  if (typeof compilerState === "number") {
    errorPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, "Initalizing Playground...");
  } else if (compilerState.TAG === 0) {
    errorPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, "Setup failed: " + compilerState._0);
  } else {
    var ready$2 = compilerState._0;
    errorPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ResultPane, {
      targetLang: ready$2.targetLang,
      compilerVersion: ready$2.selected.compilerVersion,
      result: ready$2.result
    });
  }

  var settingsPane;

  if (typeof compilerState === "number") {
    settingsPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, "Initalizing Playground...");
  } else if (compilerState.TAG === 0) {
    settingsPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", void 0, "Setup failed: " + compilerState._0);
  } else {
    var ready$3 = compilerState._0;
    var config = ready$3.selected.config;

    var setConfig = function setConfig(config2) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(compilerDispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 4,
        _0: config2
      }, Symbol["for"]("name"), "UpdateConfig"));
    };

    settingsPane = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$Settings, {
      readyState: ready$3,
      dispatch: compilerDispatch,
      setConfig: setConfig,
      editorCode: editorCode,
      config: config
    });
  }

  var prevSelected = react__WEBPACK_IMPORTED_MODULE_7__.useRef(0);
  var selected;

  if (typeof compilerState === "number") {
    selected = 0;
  } else {
    switch (compilerState.TAG | 0) {
      case 2:
        var match$3 = compilerState._0.result;
        selected = typeof match$3 === "number" ? 1 : match$3.TAG === 0 ? match$3._0.TAG === 0 ? 0 : 1 : match$3._0.TAG === 1 ? 0 : 1;
        break;

      case 3:
        selected = prevSelected.current;
        break;

      default:
        selected = 0;
    }
  }

  prevSelected.current = selected;
  var tabs = [{
    title: "JavaScript",
    content: output
  }, {
    title: "Problems",
    content: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
      style: {
        height: "50%"
      }
    }, errorPane)
  }, {
    title: "Settings",
    content: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
      style: {
        height: "50%"
      }
    }, settingsPane)
  }];

  var makeTabClass = function makeTabClass(active) {
    var activeClass = active ? "text-white font-medium bg-gray-90 hover:cursor-default" : "";
    return "flex items-center h-12 px-4 pr-16 " + activeClass;
  };

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "h-full bg-gray-90"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$Pane, {
    tabs: tabs,
    makeTabClass: makeTabClass
  }));
}

_s5(Playground$OutputPanel, "P+hKwDQYhAy3Mpgmpmw4mO2rVwQ=");

_c12 = Playground$OutputPanel;
var initialResContent = 'module Button = {\n  @react.component\n  let make = (~count: int) => {\n    let times = switch count {\n    | 1 => "once"\n    | 2 => "twice"\n    | n => Belt.Int.toString(n) ++ " times"\n    }\n    let msg = "Click me " ++ times\n\n    <button> {msg->React.string} </button>\n  }\n}\n';

function Playground$default(Props) {
  _s6();

  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Router.useRouter(void 0);
  var match = rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_9__.get(router.query, "ext");
  var initialLang = match === "re" ? 0 : 2;
  var match$1 = rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_9__.get(router.query, "code");
  var initialContent;

  if (match$1 !== void 0) {
    initialContent = lz_string__WEBPACK_IMPORTED_MODULE_11__.decompressFromEncodedURIComponent(match$1);
  } else {
    switch (initialLang) {
      case 0:
        initialContent = 'Js.log("Hello Reason 3.6!");';
        break;

      case 1:
      case 2:
        initialContent = initialResContent;
        break;
    }
  }

  var match$2 = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {
    return 0;
  });
  var setActionCount = match$2[1];
  var actionCount = match$2[0];

  var onAction = function onAction(param) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setActionCount, function (prev) {
      if (prev > 1e6) {
        return 0;
      } else {
        return prev + 1 | 0;
      }
    });
  };

  var match$3 = _common_CompilerManagerHook_mjs__WEBPACK_IMPORTED_MODULE_19__.useCompilerManager(initialLang, onAction, void 0);
  var compilerDispatch = match$3[1];
  var compilerState = match$3[0];
  var overlayState = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {
    return false;
  });
  var windowWidth = _components_CodeMirror_mjs__WEBPACK_IMPORTED_MODULE_13__.useWindowWidth(void 0);
  var match$4 = react__WEBPACK_IMPORTED_MODULE_7__.useState(function () {});
  var setFocusedRowCol = match$4[1];
  var editorCode = react__WEBPACK_IMPORTED_MODULE_7__.useRef(initialContent);

  if (typeof compilerState !== "number" && compilerState.TAG === 2) {
    var ready = compilerState._0;
    var match$5 = ready.result;

    if (typeof match$5 === "number") {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(compilerDispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 3,
        _0: ready.targetLang,
        _1: editorCode.current
      }, Symbol["for"]("name"), "CompileCode"));
    } else if (match$5.TAG === 0) {
      var match$6 = match$5._0;

      if (match$6.TAG === 0) {
        editorCode.current = match$6._0.code;
      }
    }
  }

  var typingTimer = react__WEBPACK_IMPORTED_MODULE_7__.useRef(void 0);
  var timeoutCompile = react__WEBPACK_IMPORTED_MODULE_7__.useRef(function (param) {});
  react__WEBPACK_IMPORTED_MODULE_7__.useEffect(function () {
    timeoutCompile.current = function (param) {
      if (typeof compilerState === "number" || compilerState.TAG !== 2) {
        return;
      } else {
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(compilerDispatch, (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 3,
          _0: compilerState._0.targetLang,
          _1: editorCode.current
        }, Symbol["for"]("name"), "CompileCode"));
      }
    };
  }, [compilerState]);
  var cmErrors;

  if (typeof compilerState === "number") {
    cmErrors = [];
  } else if (compilerState.TAG === 2) {
    var result = compilerState._0.result;

    if (typeof result === "number") {
      cmErrors = [];
    } else if (result.TAG === 0) {
      var match$7 = result._0;
      cmErrors = match$7.TAG === 1 ? match$7.details.map(function (param) {
        return locMsgToCmError("Error", param);
      }) : [];
    } else {
      var result$1 = result._0;

      switch (result$1.TAG | 0) {
        case 0:
          var result$2 = result$1._0;

          switch (result$2.TAG | 0) {
            case 2:
              cmErrors = result$2._0.map(function (warning) {
                return locMsgToCmError("Warning", warning.details);
              });
              break;

            case 3:
              cmErrors = [];
              break;

            default:
              cmErrors = result$2._0.map(function (param) {
                return locMsgToCmError("Error", param);
              });
          }

          break;

        case 1:
          cmErrors = result$1._0.warnings.map(function (warning) {
            return locMsgToCmError("Warning", warning.details);
          });
          break;

        case 2:
        case 3:
          cmErrors = [];
          break;
      }
    }
  } else {
    cmErrors = [];
  }

  var cmHoverHints;

  if (typeof compilerState === "number") {
    cmHoverHints = [];
  } else if (compilerState.TAG === 2) {
    var match$8 = compilerState._0.result;

    if (typeof match$8 === "number") {
      cmHoverHints = [];
    } else if (match$8.TAG === 0) {
      cmHoverHints = [];
    } else {
      var match$9 = match$8._0;
      cmHoverHints = match$9.TAG === 1 ? match$9._0.type_hints.map(function (hint) {
        var start = hint._0.start;
        var end = hint._0.end;
        return {
          start: {
            line: start.line,
            col: start.col
          },
          end: {
            line: end.line,
            col: end.col
          },
          hint: hint._0.hint
        };
      }) : [];
    }
  } else {
    cmHoverHints = [];
  }

  var mode;

  if (typeof compilerState === "number" || compilerState.TAG !== 2) {
    mode = "rescript";
  } else {
    switch (compilerState._0.targetLang) {
      case 0:
        mode = "reason";
        break;

      case 1:
      case 2:
        mode = "rescript";
        break;
    }
  }

  var tmp = {
    className: "w-full lg:border-r pl-2 border-gray-80"
  };
  var tmp$1 = windowWidth > 1024 ? {
    maxWidth: "60%"
  } : void 0;

  if (tmp$1 !== void 0) {
    tmp.style = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(tmp$1);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(react__WEBPACK_IMPORTED_MODULE_7__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_Meta_mjs__WEBPACK_IMPORTED_MODULE_2__.make, {
    description: "Try ReScript in the browser",
    title: "ReScript Playground"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Head.make, {
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("style", void 0, "body { background-color: #010427; } ")
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "text-16 bg-gray-100"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "text-gray-40 text-14"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_Navigation_mjs__WEBPACK_IMPORTED_MODULE_14__.make, {
    fixed: false,
    overlayState: overlayState
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("main", {
    className: "bg-gray-100 lg:overflow-hidden lg:h-screen",
    style: {
      maxHeight: "calc(100vh - 4.5rem)"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "w-full h-full flex flex-col lg:flex-row border-t border-gray-80"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", tmp, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "bg-gray-100 text-gray-20"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$ControlPanel, {
    actionIndicatorKey: String(actionCount),
    state: compilerState,
    dispatch: compilerDispatch,
    editorCode: editorCode
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(_components_CodeMirror_mjs__WEBPACK_IMPORTED_MODULE_13__.make, {
    errors: cmErrors,
    hoverHints: cmHoverHints,
    minHeight: "calc(100vh - 10rem)",
    maxHeight: "calc(100vh - 10rem)",
    className: "w-full py-4",
    onChange: function onChange(value) {
      editorCode.current = value;
      var timer = typingTimer.current;

      if (timer !== void 0) {
        clearTimeout(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.valFromOption(timer));
      }

      var timer$1 = setTimeout(function (param) {
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(timeoutCompile.current, void 0);

        typingTimer.current = void 0;
      }, 100);
      typingTimer.current = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_17__.some(timer$1);
    },
    onMarkerFocus: function onMarkerFocus(rowCol) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setFocusedRowCol, function (_prev) {
        return rowCol;
      });
    },
    onMarkerFocusLeave: function onMarkerFocusLeave(param) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_6__._1(setFocusedRowCol, function (param2) {});
    },
    value: editorCode.current,
    mode: mode
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "relative w-full overflow-x-hidden h-screen lg:h-auto lg:w-1/2",
    style: {
      maxWidth: windowWidth > 1024 ? "56rem" : "100%"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$OutputPanel, {
    compilerDispatch: compilerDispatch,
    compilerState: compilerState,
    editorCode: editorCode
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement("div", {
    className: "absolute bottom-0 w-full"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_7__.createElement(Playground$Statusbar, {
    actionIndicatorKey: String(actionCount),
    state: compilerState
  }))))))));
}

_s6(Playground$default, "wOSODVpORQROAv4fqO2/kuDx6MM=", true, function () {
  return [_common_CompilerManagerHook_mjs__WEBPACK_IMPORTED_MODULE_19__.useCompilerManager, _components_CodeMirror_mjs__WEBPACK_IMPORTED_MODULE_13__.useWindowWidth];
});

_c13 = Playground$default;
var $$default = Playground$default;


var _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;

$RefreshReg$(_c, "Playground$DropdownSelect");
$RefreshReg$(_c2, "Playground$ToggleSelection");
$RefreshReg$(_c3, "Playground$Pane");
$RefreshReg$(_c4, "Playground$Statusbar");
$RefreshReg$(_c5, "Playground$ResultPane$PreWrap");
$RefreshReg$(_c6, "Playground$ResultPane");
$RefreshReg$(_c7, "Playground$WarningFlagsWidget");
$RefreshReg$(_c8, "Playground$Settings");
$RefreshReg$(_c9, "Playground$ControlPanel$Button");
$RefreshReg$(_c10, "Playground$ControlPanel$ShareButton");
$RefreshReg$(_c11, "Playground$ControlPanel");
$RefreshReg$(_c12, "Playground$OutputPanel");
$RefreshReg$(_c13, "Playground$default");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/bindings/Next.mjs":
/*!*******************************!*\
  !*** ./src/bindings/Next.mjs ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GetServerSideProps": function() { return /* binding */ GetServerSideProps; },
/* harmony export */   "GetStaticProps": function() { return /* binding */ GetStaticProps; },
/* harmony export */   "GetStaticPaths": function() { return /* binding */ GetStaticPaths; },
/* harmony export */   "Link": function() { return /* binding */ Link$1; },
/* harmony export */   "Router": function() { return /* binding */ Router$1; },
/* harmony export */   "Head": function() { return /* binding */ Head$1; },
/* harmony export */   "$$Error": function() { return /* binding */ $$Error$1; },
/* harmony export */   "Dynamic": function() { return /* binding */ Dynamic; }
/* harmony export */ });
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/head */ "./node_modules/next/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/error */ "./node_modules/next/error.js");
/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ "./node_modules/next/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);
/* module decorator */ module = __webpack_require__.hmd(module);
var _s = $RefreshSig$();






var Req = {};
var GetStaticProps = {};
var GetStaticPaths = {};
var GetServerSideProps_Res = {
  setHeader: function setHeader(prim0, prim1, prim2) {
    prim0.setHeader(prim1, prim2);
  },
  write: function write(prim0, prim1) {
    prim0.write(prim1);
  },
  end_: function end_(prim) {
    prim.end();
  }
};
var GetServerSideProps = {
  Req: Req,
  Res: GetServerSideProps_Res
};
var Link$1 = {
  make: (next_link__WEBPACK_IMPORTED_MODULE_1___default())
};
var Router_Events = {
  on: function on(prim0, prim1) {
    prim0.on(prim1.NAME, prim1.VAL);
  },
  off: function off(prim0, prim1) {
    prim0.off(prim1.NAME, prim1.VAL);
  }
};

function Router_push(prim0, prim1) {
  prim0.push(prim1);
}

_c = Router_push;

function Router_pushObj(prim0, prim1) {
  prim0.push(prim1);
}

_c2 = Router_pushObj;

function Router_useRouter(prim) {
  _s();

  return next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter();
}

_s(Router_useRouter, "CeygcqajjFExIxFEzW4x/gfWEGQ=", false, function () {
  return [next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter];
});

_c3 = Router_useRouter;

function Router_replace(prim0, prim1) {
  prim0.replace(prim1);
}

_c4 = Router_replace;

function Router_replaceObj(prim0, prim1) {
  prim0.replace(prim1);
}

_c5 = Router_replaceObj;
var Router$1 = {
  Events: Router_Events,
  push: Router_push,
  pushObj: Router_pushObj,
  useRouter: Router_useRouter,
  replace: Router_replace,
  replaceObj: Router_replaceObj
};
var Head$1 = {
  make: (next_head__WEBPACK_IMPORTED_MODULE_0___default())
};
var $$Error$1 = {
  make: (next_error__WEBPACK_IMPORTED_MODULE_2___default())
};
var Dynamic = {
  options: function options(prim0, prim1, prim2) {
    var tmp = {};

    if (prim0 !== void 0) {
      tmp.ssr = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__.valFromOption(prim0);
    }

    if (prim1 !== void 0) {
      tmp.loading = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__.valFromOption(prim1);
    }

    return tmp;
  }
};


var _c, _c2, _c3, _c4, _c5;

$RefreshReg$(_c, "Router_push");
$RefreshReg$(_c2, "Router_pushObj");
$RefreshReg$(_c3, "Router_useRouter");
$RefreshReg$(_c4, "Router_replace");
$RefreshReg$(_c5, "Router_replaceObj");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/bindings/RescriptCompilerApi.mjs":
/*!**********************************************!*\
  !*** ./src/bindings/RescriptCompilerApi.mjs ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Lang": function() { return /* binding */ Lang; },
/* harmony export */   "Version": function() { return /* binding */ Version; },
/* harmony export */   "LocMsg": function() { return /* binding */ LocMsg; },
/* harmony export */   "Warning": function() { return /* binding */ Warning; },
/* harmony export */   "WarningFlag": function() { return /* binding */ WarningFlag; },
/* harmony export */   "TypeHint": function() { return /* binding */ TypeHint; },
/* harmony export */   "CompileSuccess": function() { return /* binding */ CompileSuccess; },
/* harmony export */   "ConvertSuccess": function() { return /* binding */ ConvertSuccess; },
/* harmony export */   "CompileFail": function() { return /* binding */ CompileFail; },
/* harmony export */   "CompilationResult": function() { return /* binding */ CompilationResult; },
/* harmony export */   "ConversionResult": function() { return /* binding */ ConversionResult; },
/* harmony export */   "Config": function() { return /* binding */ Config; },
/* harmony export */   "Compiler": function() { return /* binding */ Compiler; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var rescript_lib_es6_js_exn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/js_exn.js */ "./node_modules/rescript/lib/es6/js_exn.js");
/* harmony import */ var rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/js_dict.js */ "./node_modules/rescript/lib/es6/js_dict.js");
/* harmony import */ var rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/belt_Int.js */ "./node_modules/rescript/lib/es6/belt_Int.js");
/* harmony import */ var rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/belt_List.js */ "./node_modules/rescript/lib/es6/belt_List.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../vendor/Json_decode.mjs */ "./src/vendor/Json_decode.mjs");
/* harmony import */ var rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/caml_js_exceptions.js */ "./node_modules/rescript/lib/es6/caml_js_exceptions.js");
/* module decorator */ module = __webpack_require__.hmd(module);









function toString(t) {
  switch (t) {
    case 0:
      return "Reason";

    case 1:
      return "OCaml";

    case 2:
      return "ReScript";
  }
}

function toExt(t) {
  switch (t) {
    case 0:
      return "re";

    case 1:
      return "ml";

    case 2:
      return "res";
  }
}

function decode(json) {
  var other = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string(json);

  switch (other) {
    case "ml":
      return 1;

    case "re":
      return 0;

    case "res":
      return 2;

    default:
      throw {
        RE_EXN_ID: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.DecodeError,
        _1: 'Unknown language "' + other + '"',
        Error: new Error()
      };
  }
}

var Lang = {
  toString: toString,
  toExt: toExt,
  decode: decode
};

function fromString(apiVersion) {
  var match = rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_4__.fromArray(apiVersion.split("."));

  if (!match) {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      _0: apiVersion
    }, Symbol["for"]("name"), "UnknownVersion");
  }

  var maj = match.hd;
  var match$1 = match.tl;

  if (!match$1) {
    if (maj === "2") {
      return 1;
    } else {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        _0: apiVersion
      }, Symbol["for"]("name"), "UnknownVersion");
    }
  }

  var maj$1 = rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_3__.fromString(maj);
  rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_3__.fromString(match$1.hd);

  if (maj$1 !== void 0 && maj$1 >= 1) {
    return 0;
  } else {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      _0: apiVersion
    }, Symbol["for"]("name"), "UnknownVersion");
  }
}

function availableLanguages(t) {
  if (t === 0) {
    return [0, 2];
  } else {
    return [2];
  }
}

var Version = {
  fromString: fromString,
  defaultTargetLang: 2,
  availableLanguages: availableLanguages
};

function decode$1(json) {
  return {
    fullMsg: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("fullMsg", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    shortMsg: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("shortMsg", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    row: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("row", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json),
    column: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("column", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json),
    endRow: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("endRow", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json),
    endColumn: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("endColumn", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json)
  };
}

function toCompactErrorLine(prefix, locMsg) {
  var prefix$1 = prefix === "W" ? "W" : "E";
  return "[1;31m[" + prefix$1 + "] Line " + locMsg.row + ", " + locMsg.column + ":[0m " + locMsg.shortMsg;
}

function makeId(t) {
  return String(t.row) + ("-" + (String(t.endRow) + ("-" + (String(t.column) + ("-" + String(t.endColumn))))));
}

function dedupe(arr) {
  var result = {};

  for (var i = 0, i_finish = arr.length; i < i_finish; ++i) {
    var locMsg = arr[i];
    var id = makeId(locMsg);
    result[id] = locMsg;
  }

  return rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_2__.values(result);
}

var LocMsg = {
  decode: decode$1,
  toCompactErrorLine: toCompactErrorLine,
  makeId: makeId,
  dedupe: dedupe
};

function decode$2(json) {
  var warnNumber = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("warnNumber", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json);
  var details = decode$1(json);

  if (_vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("isError", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.bool, json)) {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 1,
      warnNumber: warnNumber,
      details: details
    }, Symbol["for"]("name"), "WarnErr");
  } else {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 0,
      warnNumber: warnNumber,
      details: details
    }, Symbol["for"]("name"), "Warn");
  }
}

function toCompactErrorLine$1(t) {
  var prefix;
  prefix = t.TAG === 0 ? "W" : "E";
  var details = t.details;
  var msg = "(Warning number " + t.warnNumber + ") " + details.shortMsg;
  return "[1;31m[" + prefix + "] Line " + details.row + ", " + details.column + ":[0m " + msg;
}

var Warning = {
  decode: decode$2,
  toCompactErrorLine: toCompactErrorLine$1
};

function decode$3(json) {
  return {
    msg: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("msg", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    warn_flags: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("warn_flags", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    warn_error_flags: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("warn_error_flags", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json)
  };
}

var WarningFlag = {
  decode: decode$3
};

function decodePosition(json) {
  return {
    line: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("line", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json),
    col: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("col", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.$$int, json)
  };
}

function decode$4(json) {
  var data_start = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("start", decodePosition, json);
  var data_end = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("end", decodePosition, json);
  var data_hint = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("hint", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json);
  var data = {
    start: data_start,
    end: data_end,
    hint: data_hint
  };
  var other = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("kind", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json);

  switch (other) {
    case "binding":
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 2,
        _0: data
      }, Symbol["for"]("name"), "Binding");

    case "core_type":
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 3,
        _0: data
      }, Symbol["for"]("name"), "CoreType");

    case "expression":
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: data
      }, Symbol["for"]("name"), "Expression");

    case "type_declaration":
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        _0: data
      }, Symbol["for"]("name"), "TypeDeclaration");

    default:
      throw {
        RE_EXN_ID: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.DecodeError,
        _1: 'Unknown kind "' + other + '" type hint',
        Error: new Error()
      };
  }
}

function decode$5(time, json) {
  return {
    js_code: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("js_code", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    warnings: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("warnings", function (param) {
      return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$2, param);
    }, json),
    type_hints: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.withDefault([], function (param) {
      return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("type_hints", function (param2) {
        return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$4, param2);
      }, param);
    }, json),
    time: time
  };
}

var CompileSuccess = {
  decode: decode$5
};

function decode$6(json) {
  return {
    code: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("code", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json),
    fromLang: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("fromLang", decode, json),
    toLang: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("toLang", decode, json)
  };
}

var ConvertSuccess = {
  decode: decode$6
};

function decode$7(json) {
  var other = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("type", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json);

  switch (other) {
    case "other_error":
      var locMsgs = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("errors", function (param) {
        return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$1, param);
      }, json);
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 4,
        _0: locMsgs
      }, Symbol["for"]("name"), "OtherErr");

    case "syntax_error":
      var locMsgs$1 = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("errors", function (param) {
        return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$1, param);
      }, json);
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        _0: dedupe(locMsgs$1)
      }, Symbol["for"]("name"), "SyntaxErr");

    case "type_error":
      var locMsgs$2 = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("errors", function (param) {
        return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$1, param);
      }, json);
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: locMsgs$2
      }, Symbol["for"]("name"), "TypecheckErr");

    case "warning_error":
      var warnings = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("errors", function (param) {
        return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$2, param);
      }, json);
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 2,
        _0: warnings
      }, Symbol["for"]("name"), "WarningErr");

    case "warning_flag_error":
      var warningFlag = decode$3(json);
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 3,
        _0: warningFlag
      }, Symbol["for"]("name"), "WarningFlagErr");

    default:
      throw {
        RE_EXN_ID: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.DecodeError,
        _1: 'Unknown type "' + other + '" in CompileFail result',
        Error: new Error()
      };
  }
}

var CompileFail = {
  decode: decode$7
};

function decode$8(time, json) {
  try {
    var match = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("type", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json);

    switch (match) {
      case "success":
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 1,
          _0: decode$5(time, json)
        }, Symbol["for"]("name"), "Success");

      case "unexpected_error":
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 2,
          _0: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("msg", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json)
        }, Symbol["for"]("name"), "UnexpectedError");

      default:
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: decode$7(json)
        }, Symbol["for"]("name"), "Fail");
    }
  } catch (raw_errMsg) {
    var errMsg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_errMsg);

    if (errMsg.RE_EXN_ID === _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.DecodeError) {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 3,
        _0: errMsg._1,
        _1: json
      }, Symbol["for"]("name"), "Unknown");
    }

    throw errMsg;
  }
}

var CompilationResult = {
  decode: decode$8
};

function decode$9(fromLang, toLang, json) {
  try {
    var other = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("type", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json);

    switch (other) {
      case "success":
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: decode$6(json)
        }, Symbol["for"]("name"), "Success");

      case "syntax_error":
        var locMsgs = _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("errors", function (param) {
          return _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.array(decode$1, param);
        }, json);
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 1,
          fromLang: fromLang,
          toLang: toLang,
          details: locMsgs
        }, Symbol["for"]("name"), "Fail");

      case "unexpected_error":
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 2,
          _0: _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.field("msg", _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.string, json)
        }, Symbol["for"]("name"), "UnexpectedError");

      default:
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 3,
          _0: 'Unknown conversion result type "' + other + '"',
          _1: json
        }, Symbol["for"]("name"), "Unknown");
    }
  } catch (raw_errMsg) {
    var errMsg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_errMsg);

    if (errMsg.RE_EXN_ID === _vendor_Json_decode_mjs__WEBPACK_IMPORTED_MODULE_6__.DecodeError) {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 3,
        _0: errMsg._1,
        _1: json
      }, Symbol["for"]("name"), "Unknown");
    }

    throw errMsg;
  }
}

var ConversionResult = {
  decode: decode$9
};
var Config = {};

function resCompile(t, code) {
  var startTime = performance.now();
  var json = t.rescript.compile(code);
  var stopTime = performance.now();
  return decode$8(stopTime - startTime, json);
}

function resFormat(t, code) {
  var json = t.rescript.format(code);
  return decode$9(2, 2, json);
}

function reasonCompile(t, code) {
  var startTime = performance.now();
  var json = t.reason.compile(code);
  var stopTime = performance.now();
  return decode$8(stopTime - startTime, json);
}

function reasonFormat(t, code) {
  var json = t.reason.format(code);
  return decode$9(0, 0, json);
}

function ocamlCompile(t, code) {
  var startTime = performance.now();
  var json = t.ocaml.compile(code);
  var stopTime = performance.now();
  return decode$8(stopTime - startTime, json);
}

function setConfig(t, config) {
  var match = config.module_system;
  var moduleSystem;

  switch (match) {
    case "es6":
      moduleSystem = "es6";
      break;

    case "nodejs":
      moduleSystem = "nodejs";
      break;

    default:
      moduleSystem = void 0;
  }

  rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_5__.forEach(moduleSystem, function (moduleSystem2) {
    t.setModuleSystem(moduleSystem2);
  });
  t.setWarnFlags(config.warn_flags);
}

function convertSyntax(fromLang, toLang, code, t) {
  try {
    return decode$9(fromLang, toLang, t.convertSyntax(toExt(fromLang), toExt(toLang), code));
  } catch (raw_obj) {
    var obj = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_obj);

    if (obj.RE_EXN_ID === rescript_lib_es6_js_exn_js__WEBPACK_IMPORTED_MODULE_1__.$$Error) {
      var m = obj._1.message;

      if (m !== void 0) {
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 2,
          _0: m
        }, Symbol["for"]("name"), "UnexpectedError");
      } else {
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 2,
          _0: ""
        }, Symbol["for"]("name"), "UnexpectedError");
      }
    }

    throw obj;
  }
}

var TypeHint = {
  decode: decode$4
};

function Compiler_version(prim) {
  return prim.version;
}

_c = Compiler_version;

function Compiler_resVersion(prim) {
  return prim.rescript.version;
}

_c2 = Compiler_resVersion;

function Compiler_ocamlVersion(prim) {
  return prim.ocaml.version;
}

_c3 = Compiler_ocamlVersion;

function Compiler_getConfig(prim) {
  return prim.getConfig();
}

_c4 = Compiler_getConfig;

function Compiler_setFilename(prim0, prim1) {
  return prim0.setFilename(prim1);
}

_c5 = Compiler_setFilename;

function Compiler_setModuleSystem(prim0, prim1) {
  return prim0.setModuleSystem(prim1);
}

_c6 = Compiler_setModuleSystem;

function Compiler_setWarnFlags(prim0, prim1) {
  return prim0.setWarnFlags(prim1);
}

_c7 = Compiler_setWarnFlags;
var Compiler = {
  version: Compiler_version,
  resVersion: Compiler_resVersion,
  resCompile: resCompile,
  resFormat: resFormat,
  reasonCompile: reasonCompile,
  reasonFormat: reasonFormat,
  ocamlVersion: Compiler_ocamlVersion,
  ocamlCompile: ocamlCompile,
  getConfig: Compiler_getConfig,
  setFilename: Compiler_setFilename,
  setModuleSystem: Compiler_setModuleSystem,
  setWarnFlags: Compiler_setWarnFlags,
  setConfig: setConfig,
  convertSyntax: convertSyntax
};


var _c, _c2, _c3, _c4, _c5, _c6, _c7;

$RefreshReg$(_c, "Compiler_version");
$RefreshReg$(_c2, "Compiler_resVersion");
$RefreshReg$(_c3, "Compiler_ocamlVersion");
$RefreshReg$(_c4, "Compiler_getConfig");
$RefreshReg$(_c5, "Compiler_setFilename");
$RefreshReg$(_c6, "Compiler_setModuleSystem");
$RefreshReg$(_c7, "Compiler_setWarnFlags");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Ansi.mjs":
/*!*****************************!*\
  !*** ./src/common/Ansi.mjs ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Color": function() { return /* binding */ Color; },
/* harmony export */   "Sgr": function() { return /* binding */ Sgr; },
/* harmony export */   "esc": function() { return /* binding */ esc; },
/* harmony export */   "isAscii": function() { return /* binding */ isAscii; },
/* harmony export */   "$$Location": function() { return /* binding */ $$Location; },
/* harmony export */   "Lexer": function() { return /* binding */ Lexer; },
/* harmony export */   "parse": function() { return /* binding */ parse; },
/* harmony export */   "onlyText": function() { return /* binding */ onlyText; },
/* harmony export */   "SgrString": function() { return /* binding */ SgrString; },
/* harmony export */   "Printer": function() { return /* binding */ Printer; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/caml_array.js */ "./node_modules/rescript/lib/es6/caml_array.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* module decorator */ module = __webpack_require__.hmd(module);






function toString(c) {
  switch (c) {
    case 0:
      return "black";

    case 1:
      return "red";

    case 2:
      return "green";

    case 3:
      return "yellow";

    case 4:
      return "blue";

    case 5:
      return "magenta";

    case 6:
      return "cyan";

    case 7:
      return "white";
  }
}

var Color = {
  toString: toString
};

function paramToString(s) {
  if (typeof s === "number") {
    return "bold";
  }

  switch (s.TAG | 0) {
    case 0:
      return "Fg(" + (toString(s._0) + ")");

    case 1:
      return "Bg(" + (toString(s._0) + ")");

    case 2:
      return "Unknown: " + s._0;
  }
}

var Sgr = {
  paramToString: paramToString
};
var esc = "";

function isAscii(c) {
  return /[\x40-\x7F]/.test(c);
}

function fromString(input) {
  return {
    input: input,
    pos: -1
  };
}

function isDone(p) {
  return p.pos >= p.input.length;
}

function next(p) {
  if (isDone(p)) {
    return p.input[p.pos];
  }

  var c = p.input[p.pos + 1 | 0];
  p.pos = p.pos + 1 | 0;
  return c;
}

function untilNextEsc(p) {
  var ret;

  while (!isDone(p) && ret === void 0) {
    var c = next(p);

    if (c === esc) {
      ret = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.some(void 0);
    }
  }

  ;
  return ret;
}

function look(p, num) {
  var length = p.input.length;
  var pos = (p.pos + num | 0) >= length ? length - 1 | 0 : p.pos + num | 0;
  return p.input[pos];
}

var $$Location = {
  fromString: fromString,
  isDone: isDone,
  next: next,
  untilNextEsc: untilNextEsc,
  look: look
};

function lex(_accOpt, _stateOpt, p) {
  while (true) {
    var accOpt = _accOpt;
    var stateOpt = _stateOpt;
    var acc = accOpt !== void 0 ? accOpt : [];
    var state = stateOpt !== void 0 ? stateOpt : 0;

    if (isDone(p)) {
      return acc;
    }

    if (typeof state === "number") {
      var c = next(p);
      var state$1 = c === esc ? (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        startPos: p.pos,
        content: ""
      }, Symbol["for"]("name"), "ReadSgr") : (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        startPos: p.pos,
        content: c
      }, Symbol["for"]("name"), "ReadText");
      _stateOpt = state$1;
      _accOpt = acc;
      continue;
    }

    if (state.TAG === 0) {
      var content = state.content;
      var startPos = state.startPos;
      var c$1 = next(p);

      if (c$1 !== "[" && isAscii(c$1)) {
        var raw = content + c$1;
        var loc_endPos = (startPos + raw.length | 0) - 1 | 0;
        var loc = {
          startPos: startPos,
          endPos: loc_endPos
        };
        var x = /\[([0-9;]+)([\x40-\x7F])/.exec(raw);
        var token;

        if (x !== null) {
          var str = rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_2__.get(x, 1);

          if (str == null) {
            token = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 1,
              loc: loc,
              raw: raw,
              params: []
            }, Symbol["for"]("name"), "Sgr");
          } else {
            var other = (str == null ? void 0 : rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.some(str)).split(";");
            var exit = 0;

            if (other.length !== 1) {
              exit = 1;
            } else {
              var match = other[0];

              if (match === "0") {
                token = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 2,
                  loc: loc,
                  raw: raw
                }, Symbol["for"]("name"), "ClearSgr");
              } else {
                exit = 1;
              }
            }

            if (exit === 1) {
              var params = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.map(other, function (s) {
                switch (s) {
                  case "1":
                    return 0;

                  case "30":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 0
                    }, Symbol["for"]("name"), "Fg");

                  case "31":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 1
                    }, Symbol["for"]("name"), "Fg");

                  case "32":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 2
                    }, Symbol["for"]("name"), "Fg");

                  case "33":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 3
                    }, Symbol["for"]("name"), "Fg");

                  case "34":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 4
                    }, Symbol["for"]("name"), "Fg");

                  case "35":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 5
                    }, Symbol["for"]("name"), "Fg");

                  case "36":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 6
                    }, Symbol["for"]("name"), "Fg");

                  case "37":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 0,
                      _0: 7
                    }, Symbol["for"]("name"), "Fg");

                  case "40":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 0
                    }, Symbol["for"]("name"), "Bg");

                  case "41":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 1
                    }, Symbol["for"]("name"), "Bg");

                  case "42":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 2
                    }, Symbol["for"]("name"), "Bg");

                  case "43":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 3
                    }, Symbol["for"]("name"), "Bg");

                  case "44":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 4
                    }, Symbol["for"]("name"), "Bg");

                  case "45":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 5
                    }, Symbol["for"]("name"), "Bg");

                  case "46":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 6
                    }, Symbol["for"]("name"), "Bg");

                  case "47":
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 1,
                      _0: 7
                    }, Symbol["for"]("name"), "Bg");

                  default:
                    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                      TAG: 2,
                      _0: s
                    }, Symbol["for"]("name"), "Unknown");
                }
              });
              token = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 1,
                loc: loc,
                raw: raw,
                params: params
              }, Symbol["for"]("name"), "Sgr");
            }
          }
        } else {
          token = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 1,
            loc: loc,
            raw: raw,
            params: []
          }, Symbol["for"]("name"), "Sgr");
        }

        acc.push(token);
        _stateOpt = 0;
        _accOpt = acc;
        continue;
      }

      _stateOpt = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        startPos: startPos,
        content: content + c$1
      }, Symbol["for"]("name"), "ReadSgr");
      _accOpt = acc;
      continue;
    }

    var content$1 = state.content;
    var startPos$1 = state.startPos;
    var c$2 = next(p);
    var endPos = p.pos - 1 | 0;

    if (c$2 === esc) {
      var token_0 = {
        startPos: startPos$1,
        endPos: endPos
      };

      var token$1 = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        loc: token_0,
        content: content$1
      }, Symbol["for"]("name"), "Text");

      acc.push(token$1);
      _stateOpt = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        startPos: p.pos,
        content: c$2
      }, Symbol["for"]("name"), "ReadSgr");
      _accOpt = acc;
      continue;
    }

    if (isDone(p)) {
      var token_0$1 = {
        startPos: startPos$1,
        endPos: endPos
      };

      var token$2 = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        loc: token_0$1,
        content: content$1
      }, Symbol["for"]("name"), "Text");

      acc.push(token$2);
      return acc;
    }

    var content$2 = content$1 + c$2;
    _stateOpt = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 1,
      startPos: startPos$1,
      content: content$2
    }, Symbol["for"]("name"), "ReadText");
    _accOpt = acc;
    continue;
  }

  ;
}

function lex$1(p) {
  return lex(void 0, void 0, p);
}

var Lexer = {
  lex: lex$1
};

function parse(input) {
  return lex(void 0, void 0, {
    input: input,
    pos: -1
  });
}

function onlyText(tokens) {
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.keep(tokens, function (x) {
    switch (x.TAG | 0) {
      case 0:
        return true;

      case 1:
      case 2:
        return false;
    }
  });
}

function fromTokens(tokens) {
  var ret = [];
  var params = [];
  var content = "";
  var length = tokens.length;

  for (var i = 0; i < length; ++i) {
    var token = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.getExn(tokens, i);
    var isLast = i === (length - 1 | 0);

    switch (token.TAG | 0) {
      case 0:
        content = content + token.content;

        if (isLast && content !== "") {
          var element = {
            content: content,
            params: params
          };
          ret.push(element);
        }

        break;

      case 1:
        var match = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.reduce(rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.concat(params, token.params), [void 0, void 0, []], function (acc, next2) {
          var other = acc[2];
          var bg = acc[1];
          var fg = acc[0];

          if (typeof next2 !== "number") {
            switch (next2.TAG | 0) {
              case 0:
                return [next2, bg, other];

              case 1:
                return [fg, next2, other];

              case 2:
                break;
            }
          }

          if (rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.undefined_to_opt(other.find(function (o2) {
            return next2 === o2;
          })) === void 0) {
            other.push(next2);
          }

          return [fg, bg, other];
        });

        if (content !== "") {
          var element$1 = {
            content: content,
            params: params
          };
          ret.push(element$1);
          content = "";
        }

        params = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.concatMany([rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.mapWithDefault(match[0], [], function (v) {
          return [v];
        }), rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.mapWithDefault(match[1], [], function (v) {
          return [v];
        }), match[2]]);
        break;

      case 2:
        if (content !== "") {
          var element$2 = {
            content: content,
            params: params
          };
          ret.push(element$2);
          params = [];
          content = "";
        }

        break;
    }
  }

  return ret;
}

function toString$1(e) {
  var content = e.content.replace(/\n/g, "\\n").replace(esc, "");
  var params = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.map(e.params, paramToString).join(", ");
  return "SgrString params: " + params + " | content: " + content;
}

var SgrString = {
  fromTokens: fromTokens,
  toString: toString$1
};

function tokenString(t) {
  switch (t.TAG | 0) {
    case 0:
      var match = t.loc;
      var content = t.content.replace(/\n/g, "\\n").replace(esc, "");
      return 'Text "' + content + '" (' + match.startPos + " to " + match.endPos + ")";

    case 1:
      var match$1 = t.loc;
      var raw = t.raw.replace(esc, "");
      var params = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.map(t.params, paramToString).join(", ");
      return 'Sgr "' + raw + '" -> ' + params + " (" + match$1.startPos + " to " + match$1.endPos + ")";

    case 2:
      var match$2 = t.loc;
      var raw$1 = t.raw.replace(esc, "");
      return 'Clear Sgr "' + raw$1 + '" (' + match$2.startPos + " to " + match$2.endPos + ")";
  }
}

function plainString(tokens) {
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_1__.map(tokens, function (x) {
    switch (x.TAG | 0) {
      case 0:
        return x.content;

      case 1:
      case 2:
        return "";
    }
  }).join("");
}

var Printer = {
  tokenString: tokenString,
  plainString: plainString
};


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/CompilerManagerHook.mjs":
/*!********************************************!*\
  !*** ./src/common/CompilerManagerHook.mjs ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FinalResult": function() { return /* binding */ FinalResult; },
/* harmony export */   "useCompilerManager": function() { return /* binding */ useCompilerManager; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/belt_Int.js */ "./node_modules/rescript/lib/es6/belt_Int.js");
/* harmony import */ var rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/belt_List.js */ "./node_modules/rescript/lib/es6/belt_List.js");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/caml_array.js */ "./node_modules/rescript/lib/es6/caml_array.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _ffi_loadScript__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ffi/loadScript */ "./src/ffi/loadScript.js");
/* harmony import */ var _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../bindings/RescriptCompilerApi.mjs */ "./src/bindings/RescriptCompilerApi.mjs");
/* module decorator */ module = __webpack_require__.hmd(module);


var _s = $RefreshSig$();













function loadScriptPromise(url) {
  return new Promise(function (resolve, _reject) {
    (0,_ffi_loadScript__WEBPACK_IMPORTED_MODULE_9__.default)(url, function (param) {
      resolve((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        _0: void 0
      }, Symbol["for"]("name"), "Ok"));
    }, function (_err) {
      resolve((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: "Could not load script: " + url
      }, Symbol["for"]("name"), "Error"));
    });
  });
}

var versions = ["v10.0.1", "v10.0.0", "v9.1.2", "v9.0.2", "v9.0.1", "v9.0.0", "v8.4.2", "v8.3.0-dev.2"];

function getCompilerUrl(version) {
  return "https://cdn.rescript-lang.org/" + version + "/compiler.js";
}

function getLibraryCmijUrl(version, libraryName) {
  return "https://cdn.rescript-lang.org/" + version + "/" + libraryName + "/cmij.js";
}

var FinalResult = {};

function migrateLibraries(version, libraries) {
  var match = rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_4__.fromArray(version.split("."));

  if (!match) {
    return libraries;
  }

  var version$1 = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__.getWithDefault(rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_3__.fromString(match.hd.replace("v", "")), 0);
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.map(libraries, function (library) {
    if (version$1 >= 9) {
      if (library === "reason-react") {
        return "@rescript/react";
      } else {
        return library;
      }
    } else if (library === "@rescript/react") {
      return "reason-react";
    } else {
      return library;
    }
  });
}

function attachCompilerAndLibraries(version, libraries, param) {
  var compilerUrl = getCompilerUrl(version);
  return loadScriptPromise(compilerUrl).then(function (r) {
    if (r.TAG === 0) {
      return r;
    } else {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: "Could not load compiler from url " + compilerUrl
      }, Symbol["for"]("name"), "Error");
    }
  }).then(function (r) {
    var tmp;
    tmp = r.TAG === 0 ? rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.map(libraries, function (lib) {
      var cmijUrl = getLibraryCmijUrl(version, lib);
      return loadScriptPromise(cmijUrl).then(function (r2) {
        if (r2.TAG === 0) {
          return r2;
        } else {
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 1,
            _0: "Could not load cmij from url " + cmijUrl
          }, Symbol["for"]("name"), "Error");
        }
      });
    }) : [Promise.resolve((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 1,
      _0: r._0
    }, Symbol["for"]("name"), "Error"))];
    return Promise.all(tmp);
  }).then(function (all) {
    var errors = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.keepMap(all, function (r) {
      if (r.TAG === 0) {
        return;
      } else {
        return r._0;
      }
    });

    if (errors.length !== 0) {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: errors
      }, Symbol["for"]("name"), "Error");
    } else {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 0,
        _0: void 0
      }, Symbol["for"]("name"), "Ok");
    }
  });
}

function useCompilerManager(initialLangOpt, onAction, param) {
  _s();

  var initialLang = initialLangOpt !== void 0 ? initialLangOpt : 2;
  var match = react__WEBPACK_IMPORTED_MODULE_2__.useState(function () {
    return 0;
  });
  var setState = match[1];
  var state = match[0];

  var dispatch = function dispatch(action) {
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__.forEach(onAction, function (cb) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(cb, action);
    });

    switch (action.TAG | 0) {
      case 0:
        var libraries = action.libraries;
        var id = action.id;

        if (typeof state === "number") {
          return;
        }

        if (state.TAG !== 2) {
          return;
        }

        var ready = state._0;

        if (ready.selected.id !== id) {
          return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
            return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 1,
              _0: ready,
              _1: id,
              _2: libraries
            }, Symbol["for"]("name"), "SwitchingCompiler");
          });
        } else {
          return;
        }

      case 1:
        var code = action.code;
        var lang = action.lang;

        if (typeof state === "number") {
          return;
        }

        if (state.TAG !== 2) {
          return;
        }

        var ready$1 = state._0;
        var instance = ready$1.selected.instance;
        var availableTargetLangs = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.availableLanguages(ready$1.selected.apiVersion);
        var currentLang = ready$1.targetLang;
        return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_8__.undefined_to_opt(availableTargetLangs.find(function (l) {
          return l === lang;
        })), function (lang2) {
          var match3 = ready$1.selected.apiVersion;
          var match$1;

          if (match3 === 0) {
            var convResult2;

            switch (currentLang) {
              case 0:
                convResult2 = lang2 >= 2 ? _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.convertSyntax(0, 2, code, instance) : void 0;
                break;

              case 1:
                convResult2 = void 0;
                break;

              case 2:
                convResult2 = lang2 !== 0 ? void 0 : _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.convertSyntax(2, 0, code, instance);
                break;
            }

            if (convResult2 !== void 0) {
              if (convResult2.TAG === 0) {
                match$1 = [(0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 0,
                  _0: convResult2
                }, Symbol["for"]("name"), "Conv"), lang2];
              } else {
                var secondTry = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.convertSyntax(lang2, lang2, code, instance);
                match$1 = [(0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 0,
                  _0: secondTry
                }, Symbol["for"]("name"), "Conv"), lang2];
              }
            } else {
              match$1 = [0, lang2];
            }
          } else {
            match$1 = [0, lang2];
          }

          var targetLang = match$1[1];
          var result2 = match$1[0];

          rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
            return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 2,
              _0: {
                versions: ready$1.versions,
                selected: ready$1.selected,
                targetLang: targetLang,
                errors: [],
                result: result2
              }
            }, Symbol["for"]("name"), "Ready");
          });
        });

      case 2:
        var code$1 = action._0;

        if (typeof state === "number") {
          return;
        }

        if (state.TAG !== 2) {
          return;
        }

        var ready$2 = state._0;
        var instance$1 = ready$2.selected.instance;
        var match2 = ready$2.targetLang;
        var convResult;

        switch (match2) {
          case 0:
            convResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.reasonFormat(instance$1, code$1);
            break;

          case 1:
            convResult = void 0;
            break;

          case 2:
            convResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.resFormat(instance$1, code$1);
            break;
        }

        var result = convResult !== void 0 && !(convResult.TAG === 0 && code$1 === convResult._0.code) ? (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: convResult
        }, Symbol["for"]("name"), "Conv") : ready$2.result;
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 2,
            _0: {
              versions: ready$2.versions,
              selected: ready$2.selected,
              targetLang: ready$2.targetLang,
              errors: [],
              result: result
            }
          }, Symbol["for"]("name"), "Ready");
        });

      case 3:
        var code$2 = action._1;
        var lang$1 = action._0;

        if (typeof state === "number") {
          return;
        }

        if (state.TAG !== 2) {
          return;
        }

        var ready$3 = state._0;
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 3,
            _0: ready$3,
            _1: [lang$1, code$2]
          }, Symbol["for"]("name"), "Compiling");
        });

      case 4:
        var config = action._0;

        if (typeof state === "number") {
          return;
        }

        if (state.TAG !== 2) {
          return;
        }

        var ready$4 = state._0;
        _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.setConfig(ready$4.selected.instance, config);
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
          var init = ready$4.selected;
          var selected_id = init.id;
          var selected_apiVersion = init.apiVersion;
          var selected_compilerVersion = init.compilerVersion;
          var selected_ocamlVersion = init.ocamlVersion;
          var selected_libraries = init.libraries;
          var selected_instance = init.instance;
          var selected = {
            id: selected_id,
            apiVersion: selected_apiVersion,
            compilerVersion: selected_compilerVersion,
            ocamlVersion: selected_ocamlVersion,
            libraries: selected_libraries,
            config: config,
            instance: selected_instance
          };
          return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 2,
            _0: {
              versions: ready$4.versions,
              selected: selected,
              targetLang: ready$4.targetLang,
              errors: ready$4.errors,
              result: ready$4.result
            }
          }, Symbol["for"]("name"), "Ready");
        });
    }
  };

  var dispatchError = function dispatchError(err) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (prev) {
      var msg = err._0;

      if (typeof prev === "number") {
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: msg
        }, Symbol["for"]("name"), "SetupFailed");
      }

      if (prev.TAG !== 2) {
        return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: msg
        }, Symbol["for"]("name"), "SetupFailed");
      }

      var ready = prev._0;
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 2,
        _0: {
          versions: ready.versions,
          selected: ready.selected,
          targetLang: ready.targetLang,
          errors: ready.errors.concat([msg]),
          result: ready.result
        }
      }, Symbol["for"]("name"), "Ready");
    });
  };

  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {
    if (typeof state === "number") {
      if (versions.length !== 0) {
        var latest = rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_6__.get(versions, 0);
        var libraries = ["@rescript/react"];
        attachCompilerAndLibraries(latest, libraries, void 0).then(function (result) {
          if (result.TAG === 0) {
            var instance2 = rescript_compiler.make();
            var apiVersion2 = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.fromString(rescript_compiler.api_version);
            var config = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.getConfig(instance2);
            var selected_compilerVersion = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.version(instance2);
            var selected_ocamlVersion = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.ocamlVersion(instance2);
            var selected = {
              id: latest,
              apiVersion: apiVersion2,
              compilerVersion: selected_compilerVersion,
              ocamlVersion: selected_ocamlVersion,
              libraries: libraries,
              config: config,
              instance: instance2
            };
            var targetLang = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__.getWithDefault(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_8__.undefined_to_opt(_bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.availableLanguages(apiVersion2).find(function (l) {
              return l === initialLang;
            })), _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.defaultTargetLang);
            return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
              return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                TAG: 2,
                _0: {
                  versions: versions,
                  selected: selected,
                  targetLang: targetLang,
                  errors: [],
                  result: 0
                }
              }, Symbol["for"]("name"), "Ready");
            });
          }

          var msg = result._0.join("; ");

          dispatchError((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
            TAG: 1,
            _0: msg
          }, Symbol["for"]("name"), "CompilerLoadingError"));
        });
      } else {
        dispatchError((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          TAG: 0,
          _0: "No compiler versions found"
        }, Symbol["for"]("name"), "SetupError"));
      }
    } else {
      switch (state.TAG | 0) {
        case 1:
          var version = state._1;
          var ready = state._0;
          var migratedLibraries = migrateLibraries(version, state._2);
          attachCompilerAndLibraries(version, migratedLibraries, void 0).then(function (result) {
            if (result.TAG === 0) {
              var prim = getCompilerUrl(ready.selected.id);
              _ffi_loadScript__WEBPACK_IMPORTED_MODULE_9__.removeScript(prim);
              rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.forEach(ready.selected.libraries, function (lib) {
                var prim2 = getLibraryCmijUrl(ready.selected.id, lib);
                _ffi_loadScript__WEBPACK_IMPORTED_MODULE_9__.removeScript(prim2);
              });
              var instance2 = rescript_compiler.make();
              var apiVersion2 = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.fromString(rescript_compiler.api_version);
              var config = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.getConfig(instance2);
              var selected_compilerVersion = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.version(instance2);
              var selected_ocamlVersion = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.ocamlVersion(instance2);
              var selected = {
                id: version,
                apiVersion: apiVersion2,
                compilerVersion: selected_compilerVersion,
                ocamlVersion: selected_ocamlVersion,
                libraries: migratedLibraries,
                config: config,
                instance: instance2
              };
              return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
                return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 2,
                  _0: {
                    versions: ready.versions,
                    selected: selected,
                    targetLang: _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Version.defaultTargetLang,
                    errors: [],
                    result: 0
                  }
                }, Symbol["for"]("name"), "Ready");
              });
            }

            var msg = result._0.join("; ");

            dispatchError((0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 1,
              _0: msg
            }, Symbol["for"]("name"), "CompilerLoadingError"));
          });
          break;

        case 0:
        case 2:
          break;

        case 3:
          var match2 = state._1;
          var code = match2[1];
          var lang = match2[0];
          var ready$1 = state._0;
          var apiVersion = ready$1.selected.apiVersion;
          var instance = ready$1.selected.instance;
          var compResult;

          if (typeof apiVersion === "number") {
            if (apiVersion !== 0) {
              switch (lang) {
                case 0:
                  compResult = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                    TAG: 2,
                    _0: 'Reason not supported with API version "' + apiVersion + '"'
                  }, Symbol["for"]("name"), "UnexpectedError");
                  break;

                case 1:
                  compResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.ocamlCompile(instance, code);
                  break;

                case 2:
                  compResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.resCompile(instance, code);
                  break;
              }
            } else {
              switch (lang) {
                case 0:
                  compResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.reasonCompile(instance, code);
                  break;

                case 1:
                  compResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.ocamlCompile(instance, code);
                  break;

                case 2:
                  compResult = _bindings_RescriptCompilerApi_mjs__WEBPACK_IMPORTED_MODULE_10__.Compiler.resCompile(instance, code);
                  break;
              }
            }
          } else {
            compResult = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 2,
              _0: "Can't handle result of compiler API version \"" + apiVersion._0 + '"'
            }, Symbol["for"]("name"), "UnexpectedError");
          }

          rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
            return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              TAG: 2,
              _0: {
                versions: ready$1.versions,
                selected: ready$1.selected,
                targetLang: ready$1.targetLang,
                errors: ready$1.errors,
                result: (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
                  TAG: 1,
                  _0: compResult
                }, Symbol["for"]("name"), "Comp")
              }
            }, Symbol["for"]("name"), "Ready");
          });

          break;
      }
    }
  }, [state]);
  return [state, dispatch];
}

_s(useCompilerManager, "RtN9c3DjR2D3vb21AFWse2wVAYU=");



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Constants.mjs":
/*!**********************************!*\
  !*** ./src/common/Constants.mjs ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allManualVersions": function() { return /* binding */ allManualVersions; },
/* harmony export */   "languageManual": function() { return /* binding */ languageManual; },
/* harmony export */   "ecosystem": function() { return /* binding */ ecosystem; },
/* harmony export */   "tools": function() { return /* binding */ tools; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
var allManualVersions = [["latest", "v9.1 - v10.0"], ["v9.0.0", "v8.2 - v9.0"], ["v8.0.0", "v6.0 - v8.2"]];

function languageManual(version) {
  return [["\u6982\u89C8", "/docs-cn/manual/" + version + "/introduction"], ["\u8BED\u8A00\u7279\u6027", "/docs-cn/manual/" + version + "/overview"], ["\u4E0E JS \u4E92\u64CD\u4F5C", "/docs-cn/manual/" + version + "/embed-raw-javascript"], ["\u6784\u5EFA\u7CFB\u7EDF", "/docs-cn/manual/" + version + "/build-overview"]];
}

var ecosystem = [["Package Index", "/packages"], ["rescript-react", "/docs/react/latest/introduction"], ["GenType", "/docs/gentype/latest/introduction"], ["Reanalyze", "https://github.com/reason-association/reanalyze"]];
var tools = [["Syntax Lookup", "/syntax-lookup"]];


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/HighlightJs.mjs":
/*!************************************!*\
  !*** ./src/common/HighlightJs.mjs ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "renderHLJS": function() { return /* binding */ renderHLJS; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rescript_lib_es6_js_exn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/js_exn.js */ "./node_modules/rescript/lib/es6/js_exn.js");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/caml_js_exceptions.js */ "./node_modules/rescript/lib/es6/caml_js_exceptions.js");
/* harmony import */ var highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! highlight.js/lib/core */ "./node_modules/highlight.js/lib/core.js");
/* harmony import */ var highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_5__);
/* module decorator */ module = __webpack_require__.hmd(module);







function renderHLJS(highlightedLinesOpt, darkmodeOpt, code, lang, param) {
  var highlightedLines = highlightedLinesOpt !== void 0 ? highlightedLinesOpt : [];
  var darkmode = darkmodeOpt !== void 0 ? darkmodeOpt : false;
  var match;

  try {
    match = [lang, highlight_js_lib_core__WEBPACK_IMPORTED_MODULE_5__.highlight(lang, code).value];
  } catch (raw_exn) {
    var exn = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_4__.internalToOCamlException(raw_exn);

    if (exn.RE_EXN_ID === rescript_lib_es6_js_exn_js__WEBPACK_IMPORTED_MODULE_1__.$$Error) {
      match = ["text", code];
    } else {
      throw exn;
    }
  }

  var highlighted = match[1];
  var highlighted$1 = highlightedLines.length !== 0 ? rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__.mapWithIndex(highlighted.split("\n"), function (i, line) {
    if (rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__.undefined_to_opt(highlightedLines.find(function (lnum) {
      return lnum === (i + 1 | 0);
    })) === void 0) {
      return '<span class="inline-block text-inherit opacity-50">' + (line + "</span>");
    }

    var content = line === "" ? "&nbsp;" : line;
    return '<span class="inline-block">' + (content + "</span>");
  }).join("\n") : highlighted;
  var dark = darkmode ? "dark" : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("code", {
    className: "hljs lang-" + (match[0] + (" " + dark)),
    dangerouslySetInnerHTML: {
      __html: highlighted$1
    }
  });
}



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Hooks.mjs":
/*!******************************!*\
  !*** ./src/common/Hooks.mjs ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useOutsideClick": function() { return /* binding */ useOutsideClick; },
/* harmony export */   "useWindowWidth": function() { return /* binding */ useWindowWidth; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* module decorator */ module = __webpack_require__.hmd(module);


var _s = $RefreshSig$(),
    _s2 = $RefreshSig$();

var useOutsideClick = function useOutsideClick(outerRef, trigger) {
  _s();

  var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

  function handleClickOutside(event) {
    if (outerRef.current && !outerRef.current.contains(event.target)) {
      trigger();
    }
  }

  React.useEffect(function () {
    document.addEventListener("mousedown", handleClickOutside);
    return function () {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  });
};

_s(useOutsideClick, "OD7bBpZva5O2jO+Puf00hKivP7c=");

var useWindowWidth = function useWindowWidth() {
  _s2();

  var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

  var isClient = true;

  function getSize() {
    return {
      width: isClient ? window.innerWidth : void 0,
      height: isClient ? window.innerHeight : void 0
    };
  }

  var _React$useState = React.useState(getSize),
      _React$useState2 = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_React$useState, 2),
      windowSize = _React$useState2[0],
      setWindowSize = _React$useState2[1];

  React.useEffect(function () {
    if (!isClient) {
      return false;
    }

    function handleResize() {
      setWindowSize(getSize());
    }

    window.addEventListener("resize", handleResize);
    return function () {
      return window.removeEventListener("resize", handleResize);
    };
  }, []);

  if (windowSize) {
    return windowSize.width;
  }

  return null;
};

_s2(useWindowWidth, "BavKeL6E6tNTiGKbwq7Pn4eTing=");



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/LangUtil.mjs":
/*!*********************************!*\
  !*** ./src/common/LangUtil.mjs ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "langDocBase": function() { return /* binding */ langDocBase; },
/* harmony export */   "whichLang": function() { return /* binding */ whichLang; }
/* harmony export */ });
/* harmony import */ var rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rescript/lib/es6/caml_array.js */ "./node_modules/rescript/lib/es6/caml_array.js");
/* module decorator */ module = __webpack_require__.hmd(module);


function langDocBase(lang) {
  if (lang) {
    return "docs-cn";
  } else {
    return "docs";
  }
}

function whichLang(url) {
  if (url.base.length === 0) {
    return 0;
  }

  var match = rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_0__.get(url.base, 0);

  if (match === "docs-cn") {
    return 1;
  } else {
    return 0;
  }
}



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Mdx.mjs":
/*!****************************!*\
  !*** ./src/common/Mdx.mjs ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrToReactElement": function() { return /* binding */ arrToReactElement; },
/* harmony export */   "getMdxType": function() { return /* binding */ getMdxType; },
/* harmony export */   "getMdxClassName": function() { return /* binding */ getMdxClassName; },
/* harmony export */   "fromReactElement": function() { return /* binding */ fromReactElement; },
/* harmony export */   "MdxChildren": function() { return /* binding */ MdxChildren; },
/* harmony export */   "Components": function() { return /* binding */ Components; },
/* harmony export */   "Provider": function() { return /* binding */ Provider; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mdx-js/react */ "./node_modules/@mdx-js/react/dist/esm.js");
/* module decorator */ module = __webpack_require__.hmd(module);




var getMdxType = function getMdxType(element) {
  if (element == null || element.props == null) {
    return "unknown";
  }

  return element.props.mdxType;
};

var getMdxClassName = function getMdxClassName(element) {
  if (element == null || element.props == null) {
    return;
  }

  return element.props.className;
};

function classify(v) {
  if (function (a) {
    return a instanceof Array;
  }(v)) {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 2,
      _0: v
    }, Symbol["for"]("name"), "Array");
  } else if (typeof v === "string") {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 0,
      _0: v
    }, Symbol["for"]("name"), "String");
  } else if (typeof v === "object") {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 1,
      _0: v
    }, Symbol["for"]("name"), "Element");
  } else {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 3,
      _0: v
    }, Symbol["for"]("name"), "Unknown");
  }
}

var getMdxChildren = function getMdxChildren(element) {
  if (typeof element === "string") {
    return element;
  }

  if (element == null || element.props == null || element.props.children == null) {
    return;
  }

  return element.props.children;
};

function arrToReactElement(prim) {
  return prim;
}

function fromReactElement(prim) {
  return prim;
}

function MdxChildren_toReactElement(prim) {
  return prim;
}

_c = MdxChildren_toReactElement;
var MdxChildren = {
  classify: classify,
  getMdxChildren: getMdxChildren,
  toReactElement: MdxChildren_toReactElement
};
var Components = {
  t: function t(prim0, prim1, prim2, prim3, prim4, prim5, prim6, prim7, prim8, prim9, prim10, prim11, prim12, prim13, prim14, prim15, prim16, prim17, prim18, prim19, prim20, prim21, prim22, prim23, prim24, prim25, prim26) {
    var tmp = {};

    if (prim0 !== void 0) {
      tmp.Cite = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim0);
    }

    if (prim1 !== void 0) {
      tmp.Info = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim1);
    }

    if (prim2 !== void 0) {
      tmp.Warn = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim2);
    }

    if (prim3 !== void 0) {
      tmp.Intro = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim3);
    }

    if (prim4 !== void 0) {
      tmp.UrlBox = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim4);
    }

    if (prim5 !== void 0) {
      tmp.CodeTab = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim5);
    }

    if (prim6 !== void 0) {
      tmp.p = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim6);
    }

    if (prim7 !== void 0) {
      tmp.li = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim7);
    }

    if (prim8 !== void 0) {
      tmp.h1 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim8);
    }

    if (prim9 !== void 0) {
      tmp.h2 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim9);
    }

    if (prim10 !== void 0) {
      tmp.h3 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim10);
    }

    if (prim11 !== void 0) {
      tmp.h4 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim11);
    }

    if (prim12 !== void 0) {
      tmp.h5 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim12);
    }

    if (prim13 !== void 0) {
      tmp.ul = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim13);
    }

    if (prim14 !== void 0) {
      tmp.ol = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim14);
    }

    if (prim15 !== void 0) {
      tmp.table = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim15);
    }

    if (prim16 !== void 0) {
      tmp.thead = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim16);
    }

    if (prim17 !== void 0) {
      tmp.th = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim17);
    }

    if (prim18 !== void 0) {
      tmp.td = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim18);
    }

    if (prim19 !== void 0) {
      tmp.blockquote = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim19);
    }

    if (prim20 !== void 0) {
      tmp.inlineCode = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim20);
    }

    if (prim21 !== void 0) {
      tmp.strong = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim21);
    }

    if (prim22 !== void 0) {
      tmp.hr = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim22);
    }

    if (prim23 !== void 0) {
      tmp.code = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim23);
    }

    if (prim24 !== void 0) {
      tmp.pre = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim24);
    }

    if (prim25 !== void 0) {
      tmp.a = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_1__.valFromOption(prim25);
    }

    return tmp;
  }
};
var Provider = {
  make: _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.MDXProvider
};


var _c;

$RefreshReg$(_c, "MdxChildren_toReactElement");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Url.mjs":
/*!****************************!*\
  !*** ./src/common/Url.mjs ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": function() { return /* binding */ parse; },
/* harmony export */   "prettyString": function() { return /* binding */ prettyString; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Util_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Util.mjs */ "./src/common/Util.mjs");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/caml_array.js */ "./node_modules/rescript/lib/es6/caml_array.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function prettyString(str) {
  return _Util_mjs__WEBPACK_IMPORTED_MODULE_1__.$$String.capitalize(_Util_mjs__WEBPACK_IMPORTED_MODULE_1__.$$String.camelCase(str));
}

function parse(route) {
  var fullpath = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__.keep(route.split("/"), function (s) {
    return s !== "";
  });
  var foundVersionIndex = fullpath.findIndex(function (chunk) {
    return /latest|v\d+(\.\d+)?(\.\d+)?/.test(chunk);
  });
  var match;

  if (foundVersionIndex === -1) {
    match = [1, fullpath, []];
  } else {
    var v = rescript_lib_es6_caml_array_js__WEBPACK_IMPORTED_MODULE_3__.get(fullpath, foundVersionIndex);
    var version = v === "latest" ? 0 : (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      _0: v
    }, Symbol["for"]("name"), "Version");
    match = [version, fullpath.slice(0, foundVersionIndex), fullpath.slice(foundVersionIndex + 1 | 0, fullpath.length)];
  }

  return {
    fullpath: fullpath,
    base: match[1],
    version: match[0],
    pagepath: match[2]
  };
}



;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/Util.mjs":
/*!*****************************!*\
  !*** ./src/common/Util.mjs ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Url": function() { return /* binding */ Url; },
/* harmony export */   "Unsafe": function() { return /* binding */ Unsafe; },
/* harmony export */   "$$String": function() { return /* binding */ $$String; },
/* harmony export */   "$$Date": function() { return /* binding */ $$Date; },
/* harmony export */   "Json": function() { return /* binding */ Json; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
var camelCase = function camelCase(str) {
  return str.replace(/-([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
};

var capitalize = function capitalize(str) {
  return str && str.charAt(0).toUpperCase() + str.substring(1);
};

var $$String = {
  camelCase: camelCase,
  capitalize: capitalize
};

var isAbsolute = function isAbsolute(str) {
  var r = new RegExp("^(?:[a-z]+:)?//", "i");

  if (r.test(str)) {
    return true;
  }

  return false;
};

var Url = {
  isAbsolute: isAbsolute
};

function toDayMonthYear(date) {
  return new Intl.DateTimeFormat("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric"
  }).format(date);
}

var $$Date = {
  toDayMonthYear: toDayMonthYear
};
var Unsafe = {
  elementAsString: function elementAsString(prim) {
    return prim;
  }
};
var Json = {
  prettyStringify: function prettyStringify(prim) {
    return JSON.stringify(prim, null, 4);
  }
};


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/common/WarningFlagDescription.mjs":
/*!***********************************************!*\
  !*** ./src/common/WarningFlagDescription.mjs ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Parser": function() { return /* binding */ Parser; },
/* harmony export */   "lookup": function() { return /* binding */ lookup; },
/* harmony export */   "lookupAll": function() { return /* binding */ lookupAll; },
/* harmony export */   "fuzzyLookup": function() { return /* binding */ fuzzyLookup; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Url_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Url.mjs */ "./src/common/Url.mjs");
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/js_dict.js */ "./node_modules/rescript/lib/es6/js_dict.js");
/* harmony import */ var rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/belt_Int.js */ "./node_modules/rescript/lib/es6/belt_Int.js");
/* harmony import */ var _LangUtil_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LangUtil.mjs */ "./src/common/LangUtil.mjs");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var rescript_lib_es6_caml_exceptions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rescript/lib/es6/caml_exceptions.js */ "./node_modules/rescript/lib/es6/caml_exceptions.js");
/* harmony import */ var rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rescript/lib/es6/caml_js_exceptions.js */ "./node_modules/rescript/lib/es6/caml_js_exceptions.js");
/* module decorator */ module = __webpack_require__.hmd(module);


var _s = $RefreshSig$();











var numeric = [[1, "Suspicious-looking start-of-comment mark."], [2, "Suspicious-looking end-of-comment mark."], [3, "Deprecated feature."], [4, "Fragile pattern matching: matching that will remain complete even if additional constructors are added to one of the variant types matched."], [5, "Partially applied function: expression whose result has function type and is ignored."], [6, "Label omitted in function application."], [8, "Partial match: missing cases in pattern-matching."], [9, "Missing fields in a record pattern."], [10, "Expression on the left-hand side of a sequence that doesn't have type \"unit\" (and that is not a function, see warning number 5)."], [11, "Redundant case in a pattern matching (unused match case)."], [12, "Redundant sub-pattern in a pattern-matching."], [14, "Illegal backslash escape in a string constant."], [16, "Unerasable optional argument."], [20, "Unused function argument."], [21, "Non-returning statement."], [23, 'Useless record "with" clause.'], [24, "Bad module name: the source file name is not a valid ReScript module name."], [26, "Suspicious unused variable: unused variable that is bound with \"let\" or \"as\", and doesn't start with an underscore (\"_\") character."], [27, "Innocuous unused variable: unused variable that is not bound with \"let\" nor \"as\", and doesn't start with an underscore (\"_\") character."], [28, "Wildcard pattern given as argument to a constant constructor."], [29, "Unescaped end-of-line in a string constant (non-portable code)."], [30, "Two labels or constructors of the same name are defined in two mutually recursive types."], [32, "Unused value declaration."], [33, "Unused open statement."], [34, "Unused type declaration."], [35, "Unused for-loop index."], [36, "Unused ancestor variable."], [37, "Unused constructor."], [38, "Unused extension constructor."], [39, "Unused rec flag."], [43, "Nonoptional label applied as optional."], [44, "Open statement shadows an already defined identifier."], [45, "Open statement shadows an already defined label or constructor."], [46, "Error in environment variable."], [47, "Illegal attribute payload."], [48, "Implicit elimination of optional arguments."], [49, "Absent cmi file when looking up module alias."], [50, "Unexpected documentation comment."], [52, "Fragile constant pattern."], [53, "Attribute cannot appear in this context"], [54, "Attribute used more than once on an expression"], [56, "Unreachable case in a pattern-matching (based on type information)."], [57, "Ambiguous or-pattern variables under guard"], [59, "Assignment to non-mutable value"], [60, "Unused module declaration"], [61, "Unboxable type in primitive declaration"], [62, "Type constraint on GADT type declaration"], [101, "Unused bs attributes"], [102, "Polymorphic comparison introduced (maybe unsafe)"], [103, "Fragile FFI definitions"], [104, "bs.deriving warning with customized message "], [105, "External name is inferred from val name is unsafe from refactoring when changing value name"], [106, "Unimplemented primitive used:"], [107, "Integer literal exceeds the range of representable integers of type int"], [108, "Uninterpreted delimiters (for unicode)"], [109, "Toplevel expression has unit type"]];
var numericCn = [[1, "\u770B\u8D77\u6765\u5F88\u53EF\u7591\u7684\u6CE8\u91CA\u5F00\u542F\u6807\u8BB0\u3002"], [2, "\u770B\u8D77\u6765\u5F88\u53EF\u7591\u7684\u6CE8\u91CA\u7ED3\u5C3E\u6807\u8BB0\u3002"], [3, "\u5DF2\u88AB\u5E9F\u5F03\u7684\u7279\u6027"], [4, "\u8106\u5F31\u7684\u6A21\u5F0F\u5339\u914D\uFF1A\u5373\u4F7F\u5728\u5339\u914D\u7684\u67D0\u4E2A\u53D8\u4F53\u7C7B\u578B\u4E0A\u589E\u52A0\u4E86\u989D\u5916\u7684\u6784\u9020\u51FD\u6570\uFF0C\u5339\u914D\u4ECD\u7136\u5B8C\u6574\u3002"], [5, "\u90E8\u5206\u5E94\u7528\u7684\u51FD\u6570\uFF1A\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B\u4E3A\u51FD\u6570\u4E14\u88AB\u5FFD\u7565\u4E86\u3002  "], [6, "\u51FD\u6570\u8C03\u7528\u65F6\u7701\u7565\u5FFD\u7565\u4E86\u6807\u7B7E"], [8, "\u90E8\u5206\u5339\u914D\uFF1A\u90E8\u5206\u6A21\u5F0F\u672A\u88AB\u5339\u914D\u5230"], [9, "\u8BB0\u5F55\u6A21\u5F0F\u4E2D\u6709\u672A\u88AB\u5339\u914D\u5230\u7684\u5B57\u6BB5"], [10, "\u5E8F\u5217\u5DE6\u4FA7\u7684\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B\u4E0D\u4E3A\"unit\"\uFF08\u4E5F\u4E0D\u4E3A\u51FD\u6570\uFF0C\u8BF7\u770B5\u53F7\u8B66\u544A\uFF09"], [11, "\u6A21\u5F0F\u5339\u914D\u4E2D\u6709\u5197\u4F59\u7684\u5206\u652F\uFF08\u4E0D\u4F1A\u88AB\u7528\u5230\u7684\u5206\u652F\uFF09"], [12, "\u6A21\u5F0F\u5339\u914D\u4E2D\u6709\u5197\u4F59\u7684\u5B50\u6A21\u5F0F"], [14, "\u5B57\u7B26\u4E32\u5E38\u91CF\u4E2D\u6709\u975E\u6CD5\u7684\u8F6C\u4E49\u5B57\u7B26"], [16, "\u4E0D\u53EF\u64E6\u9664\u7684\u53EF\u9009\u53C2\u6570\u3002"], [20, "\u672A\u88AB\u4F7F\u7528\u7684\u51FD\u6570\u53C2\u6570"], [21, "\u4E0D\u4F1A\u8FD4\u56DE\u7684\u8BED\u53E5"], [23, "\u8BB0\u5F55\u5B58\u5728\u6CA1\u6709\u7528\u5230\u7684\u201Cwith\u201D\u3002"], [24, "\u4E0D\u826F\u7684\u6A21\u5757\u540D\uFF1A\u6E90\u4EE3\u7801\u7684\u6587\u4EF6\u540D\u4E0D\u662F\u6709\u6548\u7684 ReScript \u6A21\u5757\u540D\u3002"], [26, "\u53EF\u7591\u7684\u672A\u4F7F\u7528\u53D8\u91CF\uFF1A\u672A\u4F7F\u7528\u7684\u53D8\u91CF\uFF0C\u4E0E \"let\" \u6216 \"as\" \u7ED1\u5B9A\uFF0C\u5E76\u4E14\u4E0D\u4EE5\u4E0B\u5212\u7EBF (\"_\") \u5B57\u7B26\u5F00\u5934\u3002"], [27, "\u65E0\u5BB3\u7684\u672A\u4F7F\u7528\u53D8\u91CF\uFF1A\u672A\u4E0E \"let\" \u6216 \"as\" \u7ED1\u5B9A\u7684\u672A\u4F7F\u7528\u53D8\u91CF\uFF0C\u5E76\u4E14\u4E0D\u4EE5\u4E0B\u5212\u7EBF (\"_\") \u5B57\u7B26\u5F00\u5934\u3002"], [28, "\u901A\u914D\u7B26\u6A21\u5F0F\u4F5C\u4E3A\u5E38\u91CF\u6784\u9020\u51FD\u6570\u7684\u53C2\u6570\u7ED9\u51FA\u3002"], [29, "\u5B57\u7B26\u4E32\u5E38\u91CF\u4E2D\u672A\u8F6C\u4E49\u7684\u6362\u884C\u7B26\uFF08\u4E0D\u53EF\u79FB\u690D\u4EE3\u7801\uFF09\u3002"], [30, "\u5728\u4E24\u4E2A\u76F8\u4E92\u9012\u5F52\u7684\u7C7B\u578B\u4E2D\u5B9A\u4E49\u4E86\u4E24\u4E2A\u540C\u540D\u7684\u6807\u7B7E\u6216\u6784\u9020\u51FD\u6570\u3002"], [32, "\u672A\u88AB\u4F7F\u7528\u7684\u503C\u58F0\u660E\u3002"], [33, "\u672A\u88AB\u4F7F\u7528\u7684 open \u8BED\u53E5\u3002"], [34, "\u672A\u88AB\u4F7F\u7528\u7684\u7C7B\u578B\u58F0\u660E\u3002"], [35, "\u672A\u88AB\u4F7F\u7528\u7684 for \u5FAA\u73AF\u4E0B\u6807"], [37, "\u672A\u88AB\u4F7F\u7528\u7684\u6784\u9020\u5668\u3002"], [38, "\u672A\u88AB\u4F7F\u7528\u7684\u6269\u5C55\u6784\u9020\u5668"], [39, "\u672A\u88AB\u4F7F\u7528\u7684 rec \u6807\u8BB0"], [43, "\u975E\u53EF\u9009\u6807\u7B7E\u4F5C\u4E3A\u53EF\u9009\u6807\u7B7E\u5E94\u7528\u3002"], [44, "Open \u8BED\u53E5\u4E86\u9690\u85CF\u5DF2\u5B9A\u4E49\u7684\u6807\u8BC6\u7B26\u3002"], [45, "Open \u8BED\u53E5\u9690\u85CF\u5DF2\u5B9A\u4E49\u7684\u6807\u7B7E\u6216\u6784\u9020\u51FD\u6570\u3002"], [46, "\u73AF\u5883\u53D8\u91CF\u9519\u8BEF\u3002"], [47, "\u975E\u6CD5\u5C5E\u6027\u88C5\u8F7D\uFF08payload\uFF09\u3002"], [48, "\u53EF\u9009\u53C2\u6570\u88AB\u9690\u5F0F\u6D88\u9664\u3002"], [49, "\u67E5\u627E\u6A21\u5757\u522B\u540D\u65F6\u7F3A\u5C11 cmi \u6587\u4EF6\u3002"], [52, "\u8106\u5F31\u7684\u5E38\u91CF\u6A21\u5F0F\u3002"], [53, "\u5C5E\u6027\u4E0D\u80FD\u51FA\u73B0\u5728\u5F53\u524D\u4E0A\u4E0B\u6587\u4E2D"], [54, "\u5C5E\u6027\u88AB\u4F7F\u7528\u4E86\u591A\u4E8E\u4E00\u6B21"], [56, "\u4E0D\u53EF\u8FBE\u7684\u6A21\u5F0F\u5206\u652F (\u57FA\u4E8E\u7C7B\u578B\u4FE1\u606F\u5F97\u51FA\u7684\u7ED3\u8BBA)\u3002"], [57, "\u5728\u4F7F\u7528\u6A21\u5F0F\u5B88\u536B\uFF08guard\uFF09\u7684\u60C5\u51B5\u4E0B\u4F7F\u7528\u4E86\u6709\u6B67\u4E49\u7684 \"or\" \u6A21\u5F0F"], [59, "\u5BF9\u4E0D\u53EF\u53D8\u7684\u503C\u8FDB\u884C\u8D4B\u503C"], [60, "\u672A\u4F7F\u7528\u7684\u6A21\u5757\u58F0\u660E"], [61, "\u4E0D\u53EF\u62C6\u7BB1\u7684\u57FA\u672C\u7C7B\u578B"], [62, "\u901A\u7528\u4EE3\u6570\u6570\u636E\u7C7B\u578B\uFF08GADT\uFF09\u5B58\u5728\u7C7B\u578B\u7EA6\u675F"], [101, "\u672A\u88AB\u4F7F\u7528\u7684 \"bs\" \u5C5E\u6027"], [102, "\u4F7F\u7528\u4E86\u591A\u6001\u6BD4\u8F83\uFF08\u53EF\u80FD\u4E0D\u5B89\u5168\uFF09"], [103, "\u8106\u5F31\u7684 FFI \u5B9A\u4E49"], [104, "bs.deriving \u7684\u81EA\u5B9A\u4E49\u8B66\u544A\u4FE1\u606F"], [105, "external \u7684\u540D\u79F0\u662F\u4ECE val \u4E2D\u63A8\u65AD\u51FA\u6765\u7684\uFF0C\u8BE5\u540D\u79F0\u5728\u66F4\u6539\u503C\u540D\u79F0\u65F6\u5BF9\u91CD\u6784\u662F\u4E0D\u5B89\u5168\u7684"], [106, "\u4F7F\u7528\u4E86\u672A\u5B9E\u73B0\u7684\u57FA\u672C\u7C7B\u578B"], [107, "\u6574\u6570\u5B57\u9762\u503C\u8D85\u51FA\u4E86\u7C7B\u578B int \u53EF\u8868\u8FBE\u7684\u8303\u56F4"], [108, "\u672A\u89E3\u91CA\u7684\u5206\u9694\u7B26\uFF08\u7528\u4E8E unicode\uFF09"], [109, "\u9876\u5C42\u8868\u8FBE\u5F0F\u7684\u7C7B\u578B\u4E3A unit"]];
rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.map(numeric, function (prim) {
  return prim[0];
});
var letterDescriptions = [["a", "All flags"]];

function getDescription(num, numeric2) {
  return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_7__.map(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_8__.undefined_to_opt(numeric2.find(function (param) {
    return num === param[0];
  })), function (param) {
    return param[1];
  });
}

function lookupAll(param) {
  _s();

  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.useRouter(void 0);
  var url = _Url_mjs__WEBPACK_IMPORTED_MODULE_1__.parse(router.route);
  var lang = _LangUtil_mjs__WEBPACK_IMPORTED_MODULE_5__.whichLang(url);
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.map(numeric, function (param2) {
    var desc = param2[1];
    var num = param2[0];
    var tmp;

    if (lang) {
      var desc$1 = getDescription(num, numericCn);
      tmp = desc$1 !== void 0 ? desc$1 : desc;
    } else {
      tmp = desc;
    }

    return [String(num), tmp];
  });
}

_s(lookupAll, "fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=", true);

function lookup(str) {
  var num = rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_4__.fromString(str);

  if (num !== void 0) {
    var description = getDescription(num, numeric);

    if (description !== void 0) {
      return [[str, description]];
    } else {
      return [];
    }
  }

  var search = str.toLowerCase();
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.keep(letterDescriptions, function (param) {
    return param[0] === search;
  });
}

function fuzzyLookup(str) {
  var letters = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.keep(letterDescriptions, function (param) {
    return param[0].startsWith(str);
  });
  var numbers = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.map(rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.keep(numeric, function (param) {
    return String(param[0]).startsWith(str);
  }), function (param) {
    return [String(param[0]), param[1]];
  });
  return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.concat(letters, numbers);
}

var InvalidInput = /* @__PURE__ */rescript_lib_es6_caml_exceptions_js__WEBPACK_IMPORTED_MODULE_9__.create("WarningFlagDescription.Parser.InvalidInput");

function isModifier(str) {
  if (str === "+") {
    return true;
  } else {
    return str === "-";
  }
}

function parseExn(input) {
  var ret = [];
  var pos = 0;
  var state = 0;
  var last = input.length - 1 | 0;

  while (pos <= last) {
    var cur = input[pos];
    var match = state;
    var newState;

    if (match) {
      var acc = match.acc;
      var modifier = match.modifier;
      var next = (pos + 1 | 0) < last ? input[pos + 1 | 0] : cur;

      if (isModifier(cur)) {
        throw {
          RE_EXN_ID: InvalidInput,
          _1: "'+' and '-' not allowed in flag name on pos " + String(pos),
          Error: new Error()
        };
      }

      if (next === "+" || next === "-" || pos >= last) {
        var token_enabled = modifier === "+";
        var token_flag = acc + cur;
        var token = {
          enabled: token_enabled,
          flag: token_flag
        };
        ret.push(token);
        newState = 0;
      } else {
        newState = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
          modifier: modifier,
          acc: acc + cur
        }, Symbol["for"]("name"), "ParseFlag");
      }
    } else if (cur === "+" || cur === "-") {
      newState = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        modifier: cur,
        acc: ""
      }, Symbol["for"]("name"), "ParseFlag");
    } else {
      throw {
        RE_EXN_ID: InvalidInput,
        _1: "Expected '+' or '-' on pos " + String(pos),
        Error: new Error()
      };
    }

    state = newState;
    pos = pos + 1 | 0;
  }

  ;
  var match$1 = state;

  if (match$1 && match$1.acc === "") {
    throw {
      RE_EXN_ID: InvalidInput,
      _1: "Expected flag name after '" + (match$1.modifier + ("' on pos " + String(pos))),
      Error: new Error()
    };
  }

  return ret;
}

function parse(input) {
  try {
    return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      TAG: 0,
      _0: parseExn(input)
    }, Symbol["for"]("name"), "Ok");
  } catch (raw_str) {
    var str = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_10__.internalToOCamlException(raw_str);

    if (str.RE_EXN_ID === InvalidInput) {
      return (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
        TAG: 1,
        _0: str._1
      }, Symbol["for"]("name"), "Error");
    }

    throw str;
  }
}

function merge(base, other) {
  var dict = rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_3__.fromArray(rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.map(base.slice(), function (token) {
    return [token.flag, token];
  }));
  rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_6__.forEach(other, function (token) {
    dict[token.flag] = token;
  });
  return rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_3__.values(dict).sort(function (t1, t2) {
    var f1 = t1.flag;
    var f2 = t2.flag;
    var match = Number.isNaN(Number(f1));
    var match$1 = Number.isNaN(Number(f2));

    if (match) {
      if (match$1) {
        return f1.localeCompare(f2) | 0;
      } else {
        return -1;
      }
    } else if (match$1) {
      return 1;
    } else {
      return f1.localeCompare(f2) | 0;
    }
  });
}

function tokensToString(tokens) {
  return tokens.map(function (token) {
    var modifier = token.enabled ? "+" : "-";
    return modifier + token.flag;
  }).join("");
}

var Parser = {
  parse: parse,
  merge: merge,
  tokensToString: tokensToString
};


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/AnsiPre.mjs":
/*!************************************!*\
  !*** ./src/components/AnsiPre.mjs ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make": function() { return /* binding */ make; }
/* harmony export */ });
/* harmony import */ var _common_Ansi_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Ansi.mjs */ "./src/common/Ansi.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* module decorator */ module = __webpack_require__.hmd(module);





function mapColor(target, c) {
  if (target) {
    switch (c) {
      case 0:
        return "bg-gray-100";

      case 1:
        return "bg-fire";

      case 2:
        return "bg-turtle-dark";

      case 3:
        return "bg-orange-dark";

      case 5:
        return "bg-berry";

      case 4:
      case 6:
        return "bg-water-dark";

      case 7:
        return "bg-gray-10";
    }
  } else {
    switch (c) {
      case 0:
        return "text-gray-100";

      case 1:
        return "text-fire-70";

      case 2:
        return "text-turtle-dark";

      case 3:
        return "text-orange-dark";

      case 5:
        return "text-berry";

      case 4:
      case 6:
        return "text-water-dark";

      case 7:
        return "text-gray-10";
    }
  }
}

function AnsiPre(Props) {
  var className = Props.className;
  var children = Props.children;
  var spans = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_2__.mapWithIndex(_common_Ansi_mjs__WEBPACK_IMPORTED_MODULE_0__.SgrString.fromTokens(_common_Ansi_mjs__WEBPACK_IMPORTED_MODULE_0__.parse(children)), function (i, str) {
    var key = String(i);
    var className2 = str.params.map(function (p) {
      if (typeof p === "number") {
        return "bold";
      }

      switch (p.TAG | 0) {
        case 0:
          return mapColor(0, p._0);

        case 1:
          return mapColor(1, p._0);

        case 2:
          return "";
      }
    }).join(" ");
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", {
      key: key,
      className: className2
    }, str.content);
  });
  var tmp = {};

  if (className !== void 0) {
    tmp.className = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_3__.valFromOption(className);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("pre", tmp, spans);
}

_c = AnsiPre;
var make = AnsiPre;


var _c;

$RefreshReg$(_c, "AnsiPre");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/CodeExample.mjs":
/*!****************************************!*\
  !*** ./src/components/CodeExample.mjs ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make": function() { return /* binding */ make; },
/* harmony export */   "Toggle": function() { return /* binding */ Toggle; }
/* harmony export */ });
/* harmony import */ var _Icon_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Icon.mjs */ "./src/components/Icon.mjs");
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lz-string */ "./node_modules/lz-string/libs/lz-string.js");
/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _common_HighlightJs_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/HighlightJs.mjs */ "./src/common/HighlightJs.mjs");
/* module decorator */ module = __webpack_require__.hmd(module);
var _s = $RefreshSig$(),
    _s2 = $RefreshSig$();











function langShortname(lang) {
  switch (lang) {
    case "bash":
      return "sh";

    case "ocaml":
      return "ml";

    case "reason":
    case "reasonml":
      return "re";

    case "text":
      return "";

    default:
      return lang;
  }
}

var copyToClipboard = function copyToClipboard(str) {
  try {
    var el = document.createElement("textarea");
    el.value = str;
    el.setAttribute("readonly", "");
    el.style.position = "absolute";
    el.style.left = "-9999px";
    document.body.appendChild(el);
    var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
    el.select();
    document.execCommand("copy");
    document.body.removeChild(el);

    if (selected) {
      document.getSelection().removeAllRanges();
      document.getSelection().addRange(selected);
    }

    return true;
  } catch (e) {
    return false;
  }
};

function CodeExample$CopyButton(Props) {
  _s();

  var code = Props.code;
  var match = react__WEBPACK_IMPORTED_MODULE_3__.useState(function () {
    return 0;
  });
  var setState = match[1];
  var state = match[0];
  var buttonRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(null);

  var onClick = function onClick(evt) {
    evt.preventDefault();

    if (copyToClipboard(code)) {
      return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(setState, function (param) {
        return 1;
      });
    } else {
      return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(setState, function (param) {
        return 2;
      });
    }
  };

  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    if (state !== 1) {
      return;
    }

    var buttonEl = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_6__.getExn(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_7__.nullable_to_opt(buttonRef.current));
    var bannerEl = document.createElement("div");
    bannerEl.className = "opacity-0 absolute -top-6 right-0 -mt-5 -mr-4 px-4 py-2 w-40 rounded-lg captions text-white bg-gray-100 text-gray-80-tr transition-all duration-1000 ease-in-out ";
    var textNode = document.createTextNode("Copied to clipboard");
    bannerEl.appendChild(textNode);
    buttonEl.appendChild(bannerEl);
    var nextFrameId = window.requestAnimationFrame(function (param) {
      bannerEl.classList.toggle("opacity-0");
      bannerEl.classList.toggle("opacity-100");
    });
    var timeoutId = setTimeout(function (param) {
      buttonEl.removeChild(bannerEl);

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(setState, function (param2) {
        return 0;
      });
    }, 3e3);
    return function (param) {
      window.cancelAnimationFrame(nextFrameId);
      clearTimeout(timeoutId);
    };
  }, [state]);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("button", {
    ref: buttonRef,
    className: "relative",
    disabled: state === 1,
    onClick: onClick
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_0__.Clipboard.make, {
    className: "text-gray-30 mt-px hover:cursor-pointer hover:text-gray-60 hover:bg-gray-30 w-6 h-6 p-1 rounded transition-all duration-300 ease-in-out"
  }));
}

_s(CodeExample$CopyButton, "7WpWhxniWO/Rm3KETbvvh8s+hoE=");

_c = CodeExample$CopyButton;

function CodeExample(Props) {
  var highlightedLinesOpt = Props.highlightedLines;
  var code = Props.code;
  var showLabelOpt = Props.showLabel;
  var langOpt = Props.lang;
  var highlightedLines = highlightedLinesOpt !== void 0 ? highlightedLinesOpt : [];
  var showLabel = showLabelOpt !== void 0 ? showLabelOpt : true;
  var lang = langOpt !== void 0 ? langOpt : "text";
  var children = _common_HighlightJs_mjs__WEBPACK_IMPORTED_MODULE_8__.renderHLJS(highlightedLines, void 0, code, lang, void 0);
  var label;

  if (showLabel) {
    var label$1 = langShortname(lang);
    label = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "absolute right-0 px-4 pb-4 font-sans text-12 font-bold text-gray-30"
    }, label$1.toUpperCase());
  } else {
    label = null;
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
    className: "relative w-full flex-col rounded-none xs:rounded border-t border-b xs:border border-gray-20 bg-gray-10 py-2 text-gray-80"
  }, label, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
    className: "px-5 text-14 pt-4 pb-2 overflow-x-auto -mt-2"
  }, children));
}

_c2 = CodeExample;

function CodeExample$Toggle(Props) {
  _s2();

  var tabs = Props.tabs;
  var match = react__WEBPACK_IMPORTED_MODULE_3__.useState(function () {
    return 0;
  });
  var setSelected = match[1];
  var selected = match[0];

  if (tabs.length !== 1) {
    var numberOfItems = tabs.length;
    var tabElements = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.mapWithIndex(tabs, function (i, tab2) {
      var label = tab2.label;
      var label$1;

      if (label !== void 0) {
        label$1 = label;
      } else {
        var lang = tab2.lang;
        label$1 = lang !== void 0 ? langShortname(lang).toUpperCase() : String(i);
      }

      var activeClass = selected === i ? "font-medium text-12 text-gray-40 bg-gray-5 border-t-2 first:border-l" : "font-medium text-12 hover:text-gray-60 border-t-2 bg-gray-20 hover:cursor-pointer";

      var onClick = function onClick(evt) {
        evt.preventDefault();

        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(setSelected, function (param) {
          return i;
        });
      };

      var key = label$1 + ("-" + String(i));
      var paddingX = numberOfItems >= 3 ? numberOfItems >= 4 ? "" : "lg:px-8" : numberOfItems > 0 ? "sm:px-4" : "";
      var borderColor = selected === i ? "#696B7D #EDF0F2" : "transparent";
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("span", {
        key: key,
        className: paddingX + (" flex-none px-5 inline-block p-1 first:rounded-tl " + activeClass),
        style: {
          borderColor: borderColor
        },
        onClick: onClick
      }, label$1);
    });
    var children = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_6__.getWithDefault(rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_6__.map(rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_5__.get(tabs, selected), function (tab2) {
      var lang = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_6__.getWithDefault(tab2.lang, "text");
      return _common_HighlightJs_mjs__WEBPACK_IMPORTED_MODULE_8__.renderHLJS(tab2.highlightedLines, void 0, tab2.code, lang, void 0);
    }), null);
    var tab = tabs.find(function (tab2) {
      var match2 = tab2.lang;

      if (match2 === void 0) {
        return false;
      }

      switch (match2) {
        case "res":
        case "rescript":
          return true;

        default:
          return false;
      }
    });
    var buttonDiv;

    if (tab !== void 0 && tab.code !== "") {
      var playgroundLinkButton = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_1__.Link.make, {
        href: "/try?code=" + lz_string__WEBPACK_IMPORTED_MODULE_4__.compressToEncodedURIComponent(tab.code) + "}",
        children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("a", {
          target: "_blank"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_0__.ExternalLink.make, {
          className: "text-gray-30 mt-px hover:cursor-pointer hover:text-gray-60 hover:bg-gray-30 w-6 h-6 p-1 rounded transition-all duration-300 ease-in-out"
        }))
      });
      var copyButton = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement(CodeExample$CopyButton, {
        code: tab.code
      });
      buttonDiv = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
        className: "flex items-center justify-end h-full pr-4 space-x-2"
      }, playgroundLinkButton, copyButton);
    } else {
      buttonDiv = null;
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "relative pt-6 w-full rounded-none text-gray-80"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "absolute flex w-full font-sans bg-transparent text-14 text-gray-40 ",
      style: {
        marginTop: "-26px"
      }
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "flex ml-2 xs:ml-0"
    }, tabElements), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "flex-1 w-full bg-gray-20 border-b rounded-tr border-gray-20 items-center"
    }, buttonDiv)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", {
      className: "px-4 lg:px-5 text-14 pb-4 pt-4 overflow-x-auto bg-gray-10 border-gray-20 xs:rounded-b border"
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("pre", void 0, children)));
  }

  var tab$1 = tabs[0];
  return CodeExample({
    highlightedLines: tab$1.highlightedLines,
    code: tab$1.code,
    lang: tab$1.lang,
    showLabel: true
  });
}

_s2(CodeExample$Toggle, "HFqJCID6HTuWj2bob40pbU5k9oM=");

_c3 = CodeExample$Toggle;
var Toggle = {
  make: CodeExample$Toggle
};
var make = CodeExample;


var _c, _c2, _c3;

$RefreshReg$(_c, "CodeExample$CopyButton");
$RefreshReg$(_c2, "CodeExample");
$RefreshReg$(_c3, "CodeExample$Toggle");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/CodeMirror.mjs":
/*!***************************************!*\
  !*** ./src/components/CodeMirror.mjs ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$$Error": function() { return /* binding */ $$Error; },
/* harmony export */   "HoverHint": function() { return /* binding */ HoverHint; },
/* harmony export */   "CM": function() { return /* binding */ CM; },
/* harmony export */   "useWindowWidth": function() { return /* binding */ useWindowWidth; },
/* harmony export */   "make": function() { return /* binding */ make$2; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var rescript_lib_es6_belt_Id_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/belt_Id.js */ "./node_modules/rescript/lib/es6/belt_Id.js");
/* harmony import */ var rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rescript/lib/es6/belt_Int.js */ "./node_modules/rescript/lib/es6/belt_Int.js");
/* harmony import */ var rescript_lib_es6_caml_obj_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/caml_obj.js */ "./node_modules/rescript/lib/es6/caml_obj.js");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var rescript_lib_es6_belt_HashMap_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rescript/lib/es6/belt_HashMap.js */ "./node_modules/rescript/lib/es6/belt_HashMap.js");
/* module decorator */ module = __webpack_require__.hmd(module);



var _s = $RefreshSig$(),
    _s2 = $RefreshSig$(),
    _s3 = $RefreshSig$();












var useWindowWidth = function useWindowWidth() {
  _s();

  var isClient = true;

  function getSize() {
    return {
      width: isClient ? window.innerWidth : 0,
      height: isClient ? window.innerHeight : 0
    };
  }

  var _React$useState = react__WEBPACK_IMPORTED_MODULE_3__.useState(getSize),
      _React$useState2 = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__.default)(_React$useState, 2),
      windowSize = _React$useState2[0],
      setWindowSize = _React$useState2[1];

  var throttled = false;
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    if (!isClient) {
      return false;
    }

    function handleResize() {
      if (!throttled) {
        setWindowSize(getSize());
        throttled = true;
        setTimeout(function () {
          throttled = false;
        }, 300);
      }
    }

    window.addEventListener("resize", handleResize);
    return function () {
      return window.removeEventListener("resize", handleResize);
    };
  }, []);

  if (windowSize) {
    return windowSize.width;
  }

  return null;
};

_s(useWindowWidth, "BavKeL6E6tNTiGKbwq7Pn4eTing=");

var errorGutterId = "errors";
var $$Error = {};
var HoverHint = {};

var make = function make() {
  var tooltip2 = document.createElement("div");
  tooltip2.id = "hover-tooltip";
  tooltip2.className = "absolute hidden select-none font-mono text-12 z-10 bg-sky-10 py-1 px-2 rounded";
  return tooltip2;
};

var hide = function hide(tooltip2) {
  tooltip2.classList.add("hidden");
};

var update = function update(tooltip2, top, left, text) {
  tooltip2.style.left = left + "px";
  tooltip2.style.top = top + "px";
  tooltip2.classList.remove("hidden");
  tooltip2.innerHTML = text;
};

var attach = function attach(tooltip2) {
  document.body.appendChild(tooltip2);
};

var clear = function clear(tooltip2) {
  tooltip2.remove();
};

var tooltip = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(make, void 0);

var isSpanToken = function isSpanToken(el) {
  return el.tagName.toUpperCase() === "SPAN" && el.getAttribute("role") !== "presentation";
};

function useHoverTooltip(cmStateRef, cmRef, param) {
  _s2();

  var stateRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(0);
  var markerRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(void 0);
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    attach(tooltip);
    return function (param2) {
      clear(tooltip);
    };
  }, []);

  var checkIfTextMarker = function checkIfTextMarker(el) {
    var isToken = el.tagName.toUpperCase() === "SPAN" && el.getAttribute("role") !== "presentation";
    return isToken && /CodeMirror-hover-hint-marker/.test(el.className);
  };

  var onMouseOver = function onMouseOver(evt) {
    var cm = cmRef.current;

    if (cm !== void 0) {
      var target = evt.target;

      if (!checkIfTextMarker(target) && isSpanToken(target)) {
        var match = cmStateRef.current;
        var hoverHints = match.hoverHints;
        var pageX = evt.pageX;
        var pageY = evt.pageY;
        var coords = cm.coordsChar({
          top: pageY,
          left: pageX
        });
        var col = coords.ch;
        var line = coords.line + 1 | 0;
        var found = hoverHints.find(function (item) {
          var end = item.end;
          var start = item.start;

          if (line >= start.line && line <= end.line && col >= start.col) {
            return col <= end.col;
          } else {
            return false;
          }
        });

        if (found !== void 0) {
          update(tooltip, pageY - 35 | 0, pageX, found.hint);
          var from_line = found.start.line - 1 | 0;
          var from_ch = found.start.col;
          var from = {
            line: from_line,
            ch: from_ch
          };
          var to__line = found.end.line - 1 | 0;
          var to__ch = found.end.col;
          var to_ = {
            line: to__line,
            ch: to__ch
          };
          var markerObj = {
            className: "CodeMirror-hover-hint-marker border-b"
          };
          var match$1 = stateRef.current;

          if (match$1) {
            var hideTimer = match$1.hideTimer;

            if (hideTimer !== void 0) {
              clearTimeout(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(hideTimer));
            }

            match$1.marker.clear();
            var marker = cm.markText(from, to_, markerObj);
            stateRef.current = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              el: match$1.el,
              marker: marker,
              hoverHint: found,
              hideTimer: void 0
            }, Symbol["for"]("name"), "Shown");
          } else {
            var marker$1 = cm.markText(from, to_, markerObj);
            markerRef.current = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.some(marker$1);
            stateRef.current = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
              el: target,
              marker: marker$1,
              hoverHint: found,
              hideTimer: void 0
            }, Symbol["for"]("name"), "Shown");
          }
        }
      }
    }
  };

  var onMouseOut = function onMouseOut(_evt) {
    var match = stateRef.current;

    if (!match) {
      return;
    }

    var hideTimer = match.hideTimer;
    var marker = match.marker;

    if (hideTimer !== void 0) {
      clearTimeout(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(hideTimer));
    }

    marker.clear();
    var timerId = setTimeout(function (param2) {
      stateRef.current = 0;
      hide(tooltip);
    }, 200);
    stateRef.current = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({
      el: match.el,
      marker: marker,
      hoverHint: match.hoverHint,
      hideTimer: rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.some(timerId)
    }, Symbol["for"]("name"), "Shown");
  };

  var onMouseMove = function onMouseMove(evt) {
    var match = stateRef.current;

    if (!match) {
      return;
    }

    var pageX = evt.pageX;
    var pageY = evt.pageY;
    update(tooltip, pageY - 35 | 0, pageX, match.hoverHint.hint);
  };

  return [onMouseOver, onMouseOut, onMouseMove];
}

_s2(useHoverTooltip, "oNl2IXrL/fbL5RscwCUW4J7xIUM=");

function make$1(rowCol, kind, param) {
  var marker = document.createElement("div");
  var colorClass = kind === "Error" ? "text-fire bg-fire-100" : "text-orange bg-orange-15";
  marker.id = "gutter-marker_" + rowCol[0] + "-" + rowCol[1];
  marker.className = "flex items-center justify-center text-14 text-center ml-1 h-6 font-bold hover:cursor-pointer " + colorClass;
  marker.innerHTML = "!";
  return marker;
}

function extractRowColFromId(id) {
  var match = id.split("_");

  if (match.length !== 2) {
    return;
  }

  var rowColStr = match[1];
  var match$1 = rowColStr.split("-");

  if (match$1.length !== 2) {
    return;
  }

  var rowStr = match$1[0];
  var colStr = match$1[1];
  var row = rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_5__.fromString(rowStr);
  var col = rescript_lib_es6_belt_Int_js__WEBPACK_IMPORTED_MODULE_5__.fromString(colStr);

  if (row !== void 0 && col !== void 0) {
    return [row, col];
  }
}

function hash(a) {
  return a;
}

var eq = rescript_lib_es6_caml_obj_js__WEBPACK_IMPORTED_MODULE_6__.equal;
var ErrorHash = rescript_lib_es6_belt_Id_js__WEBPACK_IMPORTED_MODULE_4__.MakeHashable({
  hash: hash,
  eq: eq
});

function updateErrors(state, onMarkerFocus, onMarkerFocusLeave, cm, errors) {
  rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_7__.forEach(state.marked, function (mark) {
    mark.clear();
  });
  var errorsMap = rescript_lib_es6_belt_HashMap_js__WEBPACK_IMPORTED_MODULE_11__.make(errors.length, ErrorHash);
  state.marked = [];
  cm.clearGutter(errorGutterId);
  var wrapper = cm.getWrapperElement();
  rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_7__.forEachWithIndex(errors, function (idx, e) {
    if (rescript_lib_es6_belt_HashMap_js__WEBPACK_IMPORTED_MODULE_11__.has(errorsMap, e.row)) {
      return;
    }

    var marker = make$1([e.row, e.column], e.kind, void 0);
    rescript_lib_es6_belt_HashMap_js__WEBPACK_IMPORTED_MODULE_11__.set(errorsMap, e.row, idx);
    wrapper.appendChild(marker);
    var row = e.row - 1 | 0;
    var endRow = e.endRow - 1 | 0;
    cm.setGutterMarker(row, errorGutterId, marker);
    var from_ch = e.column;
    var from = {
      line: row,
      ch: from_ch
    };
    var to__ch = e.endColumn;
    var to_ = {
      line: endRow,
      ch: to__ch
    };
    var match = e.kind;
    var markTextColor = match === "Error" ? "border-fire" : "border-orange";

    var __x = cm.markText(from, to_, {
      className: "border-b border-dotted hover:cursor-pointer " + markTextColor,
      attributes: {
        id: "text-marker_" + (String(e.row) + ("-" + (String(e.column) + "")))
      }
    });

    state.marked.push(__x);
  });

  var isMarkerId = function isMarkerId(id) {
    if (id.startsWith("gutter-marker")) {
      return true;
    } else {
      return id.startsWith("text-marker");
    }
  };

  wrapper.onmouseover = function (evt) {
    var target = evt.target;
    var id = target.id;

    if (!isMarkerId(id)) {
      return;
    }

    var rowCol = extractRowColFromId(id);

    if (rowCol !== void 0) {
      return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.forEach(onMarkerFocus, function (cb) {
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(cb, rowCol);
      });
    }
  };

  wrapper.onmouseout = function (evt) {
    var target = evt.target;
    var id = target.id;

    if (!isMarkerId(id)) {
      return;
    }

    var rowCol = extractRowColFromId(id);

    if (rowCol !== void 0) {
      return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.forEach(onMarkerFocusLeave, function (cb) {
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(cb, rowCol);
      });
    }
  };
}

function CodeMirror(Props) {
  _s3();

  var errorsOpt = Props.errors;
  var hoverHintsOpt = Props.hoverHints;
  var minHeight = Props.minHeight;
  var maxHeight = Props.maxHeight;
  var className = Props.className;
  var style = Props.style;
  var onChange = Props.onChange;
  var onMarkerFocus = Props.onMarkerFocus;
  var onMarkerFocusLeave = Props.onMarkerFocusLeave;
  var value = Props.value;
  var mode = Props.mode;
  var readOnlyOpt = Props.readOnly;
  var lineNumbersOpt = Props.lineNumbers;
  var scrollbarStyleOpt = Props.scrollbarStyle;
  var lineWrappingOpt = Props.lineWrapping;
  var errors = errorsOpt !== void 0 ? errorsOpt : [];
  var hoverHints = hoverHintsOpt !== void 0 ? hoverHintsOpt : [];
  var readOnly = readOnlyOpt !== void 0 ? readOnlyOpt : false;
  var lineNumbers = lineNumbersOpt !== void 0 ? lineNumbersOpt : true;
  var scrollbarStyle = scrollbarStyleOpt !== void 0 ? scrollbarStyleOpt : "overlay";
  var lineWrapping = lineWrappingOpt !== void 0 ? lineWrappingOpt : false;
  var inputElement = react__WEBPACK_IMPORTED_MODULE_3__.useRef(null);
  var cmRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(void 0);
  var cmStateRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef({
    marked: [],
    hoverHints: hoverHints
  });

  var windowWidth = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(useWindowWidth, void 0);

  var match = useHoverTooltip(cmStateRef, cmRef, void 0);
  var onMouseMove = match[2];
  var onMouseOut = match[1];
  var onMouseOver = match[0];
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    var input = inputElement.current;

    if (input == null) {
      return;
    }

    var options = {
      theme: "material",
      gutters: [errorGutterId, "CodeMirror-linenumbers"],
      mode: mode,
      lineNumbers: lineNumbers,
      readOnly: readOnly,
      lineWrapping: lineWrapping,
      fixedGutter: false,
      scrollbarStyle: scrollbarStyle
    };
    var cm2 = codemirror__WEBPACK_IMPORTED_MODULE_8__.fromTextArea(input, options);
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.forEach(minHeight, function (minHeight2) {
      cm2.getScrollerElement().style.minHeight = minHeight2;
    });
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.forEach(maxHeight, function (maxHeight2) {
      cm2.getScrollerElement().style.maxHeight = maxHeight2;
    });
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.forEach(onChange, function (onValueChange) {
      cm2.on("change", function (instance) {
        rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(onValueChange, instance.getValue());
      });
    });
    cm2.setValue(value);
    var wrapper = cm2.getWrapperElement();
    codemirror__WEBPACK_IMPORTED_MODULE_8__.on(wrapper, "mouseover", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseOver));
    codemirror__WEBPACK_IMPORTED_MODULE_8__.on(wrapper, "mouseout", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseOut));
    codemirror__WEBPACK_IMPORTED_MODULE_8__.on(wrapper, "mousemove", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseMove));
    cmRef.current = cm2;
    return function (param) {
      codemirror__WEBPACK_IMPORTED_MODULE_8__.off(wrapper, "mouseover", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseOver));
      codemirror__WEBPACK_IMPORTED_MODULE_8__.off(wrapper, "mouseout", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseOut));
      codemirror__WEBPACK_IMPORTED_MODULE_8__.off(wrapper, "mousemove", rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__.__1(onMouseMove));
      cm2.toTextArea();
      cmRef.current = void 0;
    };
  }, []);
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    cmStateRef.current.hoverHints = hoverHints;
  }, [hoverHints]);
  var cm = cmRef.current;

  if (cm !== void 0 && cm.getValue() !== value) {
    var state = cmStateRef.current;
    cm.operation(function () {
      return updateErrors(state, onMarkerFocus, onMarkerFocusLeave, cm, errors);
    });
    cm.setValue(value);
  }

  var errorsFingerprint = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_7__.map(errors, function (e) {
    return "" + e.row + "-" + e.column;
  }).join(";");
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    var state2 = cmStateRef.current;
    var cm2 = cmRef.current;

    if (cm2 !== void 0) {
      cm2.operation(function () {
        return updateErrors(state2, onMarkerFocus, onMarkerFocusLeave, cm2, errors);
      });
    }
  }, [errorsFingerprint]);
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    var cm2 = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.getExn(cmRef.current);
    cm2.setOption("mode", mode);
  }, [mode]);
  react__WEBPACK_IMPORTED_MODULE_3__.useEffect(function () {
    var cm2 = cmRef.current;

    if (cm2 !== void 0) {
      cm2.refresh();
    }
  }, [className, windowWidth]);
  var tmp = {};

  if (className !== void 0) {
    tmp.className = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(className);
  }

  if (style !== void 0) {
    tmp.style = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(style);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("div", tmp, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.createElement("textarea", {
    ref: inputElement,
    className: "hidden"
  }));
}

_s3(CodeMirror, "PSa+MiCEBMZEX0PsIg7TQkmJrgE=", false, function () {
  return [useHoverTooltip];
});

_c = CodeMirror;
var CM = {
  Options: {
    t: function t(prim0, prim1, prim2, prim3, prim4, prim5, prim6, prim7, prim8) {
      var tmp = {
        theme: prim0,
        mode: prim2
      };

      if (prim1 !== void 0) {
        tmp.gutters = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim1);
      }

      if (prim3 !== void 0) {
        tmp.lineNumbers = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim3);
      }

      if (prim4 !== void 0) {
        tmp.readOnly = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim4);
      }

      if (prim5 !== void 0) {
        tmp.lineWrapping = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim5);
      }

      if (prim6 !== void 0) {
        tmp.fixedGutter = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim6);
      }

      if (prim7 !== void 0) {
        tmp.scrollbarStyle = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(prim7);
      }

      return tmp;
    }
  }
};
var make$2 = CodeMirror;


var _c;

$RefreshReg$(_c, "CodeMirror");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/DocSearch.mjs":
/*!**************************************!*\
  !*** ./src/components/DocSearch.mjs ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Textbox": function() { return /* binding */ Textbox; },
/* harmony export */   "make": function() { return /* binding */ make; }
/* harmony export */ });
/* harmony import */ var _Icon_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Icon.mjs */ "./src/components/Icon.mjs");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* module decorator */ module = __webpack_require__.hmd(module);
var _s = $RefreshSig$(),
    _s2 = $RefreshSig$();







function DocSearch(Props) {
  _s();

  var inputRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);
  var match = react__WEBPACK_IMPORTED_MODULE_2__.useState(function () {
    return 1;
  });
  var setState = match[1];
  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {
    var init = window.docsearch;

    if (init !== void 0) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(init, {
        apiKey: "d3d9d7cebf13a7b665e47cb85dc9c582",
        indexName: "rescript-lang",
        inputSelector: "#docsearch"
      });
    }
  }, []);
  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {
    var isEditableTag = function isEditableTag(el) {
      var match2 = el.tagName;

      switch (match2) {
        case "INPUT":
        case "SELECT":
        case "TEXTAREA":
          return true;

        default:
          return false;
      }
    };

    var focusSearch = function focusSearch(e) {
      var el = document.activeElement;

      if (el !== void 0) {
        var el$1 = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.valFromOption(el);

        if (isEditableTag(el$1)) {
          return;
        }

        if (el$1.isContentEditable) {
          return;
        }
      }

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param) {
        return 0;
      });

      rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (prim) {
        prim.focus();
      });
      e.preventDefault();
    };

    var handleGlobalKeyDown = function handleGlobalKeyDown(e) {
      var match2 = e.key;

      switch (match2) {
        case "/":
          return focusSearch(e);

        case "k":
          if (e.ctrlKey || e.metaKey) {
            return focusSearch(e);
          } else {
            return;
          }

        default:
          return;
      }
    };

    window.addEventListener("keydown", handleGlobalKeyDown);
    return function (param) {
      window.addEventListener("keydown", handleGlobalKeyDown);
    };
  }, [setState]);

  var clearInput = function clearInput(param) {
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (el) {
      el.value = "";
    });
  };

  var onClick = function onClick(param) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
      return 0;
    });

    clearInput(void 0);
    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (el) {
      el.focus();
    });
  };

  var onBlur = function onBlur(param) {
    clearInput(void 0);

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
      return 1;
    });
  };

  var onKeyDown = function onKeyDown(evt) {
    var key = evt.key;

    if (key === "Escape") {
      return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (el) {
        el.blur();
      });
    }
  };

  var isActive = match[0] ? false : true;
  var activeClass = isActive ? "text-white border border-gray-60" : "";
  var activeInput = isActive ? "w-32 mr-3" : "w-0";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {
    className: activeClass + " bg-gray-100 border border-gray-70 hover:text-white hover:cursor-pointer flex justify-center p-2 px-3 rounded-lg",
    onClick: onClick
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("input", {
    ref: inputRef,
    className: "transition-all ease-in-out duration-150 text-white bg-gray-100 border-none focus:outline-none " + activeInput,
    id: "docsearch",
    type: "text",
    onKeyDown: onKeyDown,
    onBlur: onBlur
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_0__.MagnifierGlass.make, {
    className: "text-gray-60 w-5 h-5"
  }));
}

_s(DocSearch, "S7k13qbgm8B01bo1Y/T5mqHBwTU=");

_c = DocSearch;

function DocSearch$Textbox(Props) {
  _s2();

  var id = Props.id;
  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(function () {
    var init = window.docsearch;

    if (init !== void 0) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(init, {
        apiKey: "d3d9d7cebf13a7b665e47cb85dc9c582",
        indexName: "rescript-lang",
        inputSelector: "#" + id
      });
    }
  }, []);
  var inputRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);
  var match = react__WEBPACK_IMPORTED_MODULE_2__.useState(function () {
    return 1;
  });
  var setState = match[1];

  var onClick = function onClick(param) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
      return 0;
    });

    rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (el) {
      el.focus();
    });
  };

  var onBlur = function onBlur(param) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_1__._1(setState, function (param2) {
      return 1;
    });
  };

  var onKeyDown = function onKeyDown(evt) {
    var key = evt.key;

    if (key === "Escape") {
      return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_3__.forEach(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.nullable_to_opt(inputRef.current), function (el) {
        el.blur();
      });
    }
  };

  var isActive = match[0] ? false : true;
  var activeClass = isActive ? "text-white border border-white-80" : "opacity-75";
  var activeInput = "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("div", {
    className: activeClass + " hover:text-white hover:cursor-pointer bg-gray-80 flex items-center p-2 px-3 rounded",
    onClick: onClick
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_0__.MagnifierGlass.make, {
    className: "w-5 h-5 mr-3"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement("input", {
    ref: inputRef,
    className: "w-32 bg-gray-80 focus:outline-none " + activeInput,
    id: id,
    type: "text",
    onKeyDown: onKeyDown,
    onBlur: onBlur
  }));
}

_s2(DocSearch$Textbox, "wloCmOr/zKM7HHvHplfPdo3fo44=");

_c2 = DocSearch$Textbox;
var Textbox = {
  make: DocSearch$Textbox
};
var make = DocSearch;


var _c, _c2;

$RefreshReg$(_c, "DocSearch");
$RefreshReg$(_c2, "DocSearch$Textbox");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/Icon.mjs":
/*!*********************************!*\
  !*** ./src/components/Icon.mjs ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GitHub": function() { return /* binding */ GitHub; },
/* harmony export */   "Npm": function() { return /* binding */ Npm; },
/* harmony export */   "Twitter": function() { return /* binding */ Twitter; },
/* harmony export */   "MagnifierGlass": function() { return /* binding */ MagnifierGlass; },
/* harmony export */   "Caret": function() { return /* binding */ Caret; },
/* harmony export */   "DrawerDots": function() { return /* binding */ DrawerDots; },
/* harmony export */   "CornerLeftUp": function() { return /* binding */ CornerLeftUp; },
/* harmony export */   "Table": function() { return /* binding */ Table; },
/* harmony export */   "Close": function() { return /* binding */ Close; },
/* harmony export */   "ArrowRight": function() { return /* binding */ ArrowRight; },
/* harmony export */   "Discourse": function() { return /* binding */ Discourse; },
/* harmony export */   "Hyperlink": function() { return /* binding */ Hyperlink; },
/* harmony export */   "TriangleDown": function() { return /* binding */ TriangleDown; },
/* harmony export */   "ExternalLink": function() { return /* binding */ ExternalLink; },
/* harmony export */   "Copy": function() { return /* binding */ Copy; },
/* harmony export */   "Clipboard": function() { return /* binding */ Clipboard; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* module decorator */ module = __webpack_require__.hmd(module);


function Icon$GitHub(Props) {
  var className = Props.className;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "17.79",
    width: "18.236",
    viewBox: "0 0 18.236 17.79"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    transform: "translate(8 -5.365)"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M17.013,9.906a9.078,9.078,0,0,0-3.318-3.318A8.918,8.918,0,0,0,9.118,5.365,8.919,8.919,0,0,0,4.541,6.588,9.077,9.077,0,0,0,1.223,9.906,8.919,8.919,0,0,0,0,14.483a8.861,8.861,0,0,0,1.739,5.36,8.93,8.93,0,0,0,4.493,3.294.531.531,0,0,0,.475-.083.464.464,0,0,0,.154-.356q0-.036-.006-.641T6.85,21l-.273.047a3.484,3.484,0,0,1-.659.042,5.02,5.02,0,0,1-.825-.083,1.844,1.844,0,0,1-.8-.356,1.506,1.506,0,0,1-.522-.73l-.119-.273a2.966,2.966,0,0,0-.374-.605,1.432,1.432,0,0,0-.516-.451l-.083-.06a.871.871,0,0,1-.154-.143.651.651,0,0,1-.107-.166q-.036-.083.059-.137a.77.77,0,0,1,.344-.053l.237.035a1.733,1.733,0,0,1,.588.285,1.916,1.916,0,0,1,.576.617,2.093,2.093,0,0,0,.659.742,1.4,1.4,0,0,0,.778.255,3.376,3.376,0,0,0,.677-.059,2.362,2.362,0,0,0,.534-.178,1.924,1.924,0,0,1,.582-1.223,8.129,8.129,0,0,1-1.217-.214,4.845,4.845,0,0,1-1.116-.463,3.2,3.2,0,0,1-.956-.8,3.822,3.822,0,0,1-.623-1.247A5.928,5.928,0,0,1,3.3,14.007a3.463,3.463,0,0,1,.938-2.446A3.192,3.192,0,0,1,4.321,9.14a1.664,1.664,0,0,1,1.021.16,7.138,7.138,0,0,1,.991.457q.315.19.5.321a8.574,8.574,0,0,1,4.559,0l.451-.285a6.389,6.389,0,0,1,1.092-.522,1.556,1.556,0,0,1,.962-.13A3.161,3.161,0,0,1,14,11.562a3.463,3.463,0,0,1,.938,2.446,5.994,5.994,0,0,1-.243,1.787,3.674,3.674,0,0,1-.629,1.247,3.319,3.319,0,0,1-.962.789,4.855,4.855,0,0,1-1.116.463,8.121,8.121,0,0,1-1.217.214,2.115,2.115,0,0,1,.617,1.686v2.5a.473.473,0,0,0,.149.356.516.516,0,0,0,.469.083A8.929,8.929,0,0,0,16.5,19.842a8.863,8.863,0,0,0,1.739-5.36A8.926,8.926,0,0,0,17.013,9.906Z",
    transform: "translate(-8 0)"
  })));
}

_c = Icon$GitHub;
var GitHub = {
  make: Icon$GitHub
};

function Icon$Npm(Props) {
  var className = Props.className;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: className,
    viewBox: "0 0 18 7"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    className: "fill-current",
    d: "M0 0h18v6H9v1H5V6H0V0zm1 5h2V2h1v3h1V1H1v4zm5-4v5h2V5h2V1H6zm2 1h1v2H8V2zm3-1v4h2V2h1v3h1V2h1v3h1V1h-6z"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M1 5h2V2h1v3h1V1H1zM6 1v5h2V5h2V1H6zm3 3H8V2h1v2zM11 1v4h2V2h1v3h1V2h1v3h1V1z",
    fill: "#FFF"
  }));
}

_c2 = Icon$Npm;
var Npm = {
  make: Icon$Npm
};

function Icon$Twitter(Props) {
  var className = Props.className;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    viewBox: "0 0 15.53 12.71"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M5.794,12.711a13.325,13.325,0,0,1-2.058-.163A9.659,9.659,0,0,1,.92,11.523L0,11.02l1-.328c1.089-.358,1.751-.58,2.571-.928A3.421,3.421,0,0,1,1.809,7.726l-.232-.7.19.029a3.456,3.456,0,0,1-.433-.534A3.276,3.276,0,0,1,.779,4.57l.044-.614L1.19,4.1a3.437,3.437,0,0,1-.333-.934A3.552,3.552,0,0,1,1.235.774l.32-.588L1.984.7A7.883,7.883,0,0,0,7.091,3.575a3.054,3.054,0,0,1,.185-1.623A3.038,3.038,0,0,1,8.511.536,3.71,3.71,0,0,1,10.664.008a3.439,3.439,0,0,1,2.114.872,7.1,7.1,0,0,0,.774-.258c.17-.064.362-.136.6-.219L15.042.1l-.579,1.652.119-.008L15.53,1.7l-.56.765c-.032.044-.04.056-.052.073-.045.068-.1.153-.87,1.179a1.448,1.448,0,0,0-.271.943,8.916,8.916,0,0,1-.487,3.586,6.346,6.346,0,0,1-1.7,2.524,7.524,7.524,0,0,1-3.566,1.724A10.979,10.979,0,0,1,5.794,12.711Zm0,0",
    transform: "translate(0 -0.001)"
  }));
}

_c3 = Icon$Twitter;
var Twitter = {
  make: Icon$Twitter
};

function Icon$MagnifierGlass(Props) {
  var className = Props.className;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "19.203",
    width: "19.203",
    viewBox: "0 0 19.203 19.203"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    fill: "none",
    strokeLinecap: "round",
    strokeWidth: "2px",
    transform: "translate(-2 -2)"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M6.479,0A6.479,6.479,0,1,1,0,6.479,6.479,6.479,0,0,1,6.479,0Z",
    transform: "translate(3 3)"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("line", {
    strokeLinejoin: "round",
    transform: "translate(14.055 14.055)",
    x1: "5.734",
    y1: "5.734"
  })));
}

_c4 = Icon$MagnifierGlass;
var MagnifierGlass = {
  make: Icon$MagnifierGlass
};

function Icon$Caret(Props) {
  var classNameOpt = Props.className;
  var sizeOpt = Props.size;
  var direction = Props.direction;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  var size = sizeOpt !== void 0 ? sizeOpt : "Sm";
  var width = size === "Sm" ? "10" : "14";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    width: width,
    fill: "none",
    strokeMiterlimit: "10",
    strokeWidth: "2",
    viewBox: "0 0 10 5"
  }, direction === "Down" ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M.6.866,4.509,4.087,8.476.8"
  }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M.6,4.022,4.509.8,8.476,4.087",
    fill: "none"
  }));
}

_c5 = Icon$Caret;
var Caret = {
  make: Icon$Caret
};

function Icon$DrawerDots(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "4",
    width: "22",
    stroke: "none",
    viewBox: "0 0 22 4"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("circle", {
    cx: "2",
    cy: "2",
    r: "2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("circle", {
    cx: "2",
    cy: "2",
    r: "2",
    transform: "translate(9)"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("circle", {
    cx: "2",
    cy: "2",
    r: "2",
    transform: "translate(18)"
  }));
}

_c6 = Icon$DrawerDots;
var DrawerDots = {
  make: Icon$DrawerDots
};

function Icon$CornerLeftUp(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "18",
    width: "18.414",
    fill: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2px"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M11.414 6l-5-5-5 5"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M17.414 17h-7a4 4 0 01-4-4V1"
  }));
}

_c7 = Icon$CornerLeftUp;
var CornerLeftUp = {
  make: Icon$CornerLeftUp
};

function Icon$Table(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "23",
    width: "25"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("defs", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("style", void 0, ".prefix__a,.prefix__b,.prefix__d{fill:none}.prefix__a,.prefix__b{stroke-width:1.5px}.prefix__c{stroke:none}")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    className: "prefix__a"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    className: "prefix__c",
    height: "23",
    width: "10",
    rx: "2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    className: "prefix__d",
    height: "21.5",
    width: "8.5",
    rx: "1.25",
    x: "0.75",
    y: "0.75"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    className: "prefix__a"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    className: "prefix__c",
    height: "23",
    width: "25",
    rx: "2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    className: "prefix__d",
    height: "21.5",
    width: "23.5",
    rx: "1.25",
    x: "0.75",
    y: "0.75"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    className: "prefix__b",
    d: "M2.5 6.5h5M2.5 10.5h5"
  }));
}

_c8 = Icon$Table;
var Table = {
  make: Icon$Table
};

function Icon$Close(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "12.728",
    width: "12.728"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M12.728 11.313l-1.414 1.414L0 1.414 1.414-.001z"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M11.314 0l1.414 1.414L1.415 12.728 0 11.314z"
  }));
}

_c9 = Icon$Close;
var Close = {
  make: Icon$Close
};

function Icon$ArrowRight(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "11.769",
    width: "18",
    viewBox: "0 0 18 11.769"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("defs", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("clipPath", {
    id: "prefix__a"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    clipRule: "evenodd",
    d: "M12.121-16.823a.67.67 0 00-.907 0 .566.566 0 000 .835l4.6 4.277H.635A.611.611 0 000-11.12a.617.617 0 00.635.6h15.179l-4.6 4.269a.576.576 0 000 .844.67.67 0 00.907 0L17.81-10.7a.553.553 0 000-.835z",
    fill: "current",
    transform: "translate(0 17)"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("clipPath", {
    id: "prefix__b"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    className: "prefix__b",
    d: "M-297 336.231h747.692V-534H-297z",
    transform: "translate(297 534)"
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    clipPath: "url(#prefix__a)"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {
    clipPath: "url(#prefix__b)",
    transform: "translate(-205.615 -357.923)"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    className: "prefix__b",
    d: "M202.154 354.462h24.923v18.692h-24.923z"
  }))));
}

_c10 = Icon$ArrowRight;
var ArrowRight = {
  make: Icon$ArrowRight
};

function Icon$Discourse(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M12.103 0C18.666 0 24 5.485 24 11.997c0 6.51-5.33 11.99-11.9 11.99L0 24V11.79C0 5.28 5.532 0 12.103 0zm.116 4.563a7.395 7.395 0 00-6.337 3.57 7.247 7.247 0 00-.148 7.22L4.4 19.61l4.794-1.074a7.424 7.424 0 008.136-1.39 7.256 7.256 0 001.737-7.997 7.375 7.375 0 00-6.84-4.585h-.008z"
  }));
}

_c11 = Icon$Discourse;
var Discourse = {
  make: Icon$Discourse
};

function Icon$Hyperlink(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "0.8em",
    width: "0.8em",
    viewBox: "0 0 20.003 19.944"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M11.927 7.908a4.819 4.819 0 00-3.968-1.3 5.091 5.091 0 00-2.921 1.508L1.47 11.684a4.82 4.82 0 00.192 7.122 4.994 4.994 0 006.76-.4l3.7-3.776a.109.109 0 00-.067-.184s-.649.029-1.132.006a10.116 10.116 0 01-1.35-.226.308.308 0 00-.243.088l-2.529 2.609a2.733 2.733 0 01-3.583.319 2.64 2.64 0 01-.247-3.951l3.755-3.753a2.7 2.7 0 013.654-.073.108.108 0 00.15 0l1.4-1.4a.114.114 0 00-.003-.157z"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M8.076 12.036a4.822 4.822 0 003.967 1.3 5.089 5.089 0 002.922-1.509l3.568-3.568a4.818 4.818 0 00-.192-7.121 5 5 0 00-6.761.4l-3.7 3.777a.108.108 0 00.067.183s.648-.028 1.132-.006a10.151 10.151 0 011.35.226.3.3 0 00.243-.088l2.529-2.608a2.732 2.732 0 013.581-.319 2.638 2.638 0 01.249 3.95l-3.755 3.754a2.706 2.706 0 01-3.654.073.107.107 0 00-.15 0l-1.4 1.4a.113.113 0 00.004.156z"
  }));
}

_c12 = Icon$Hyperlink;
var Hyperlink = {
  make: Icon$Hyperlink
};

function Icon$TriangleDown(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "fill-current " + className,
    height: "5",
    width: "8",
    viewBox: "0 0 8 5"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M4,0,8,5H0Z",
    transform: "translate(8 5) rotate(180)"
  }));
}

_c13 = Icon$TriangleDown;
var TriangleDown = {
  make: Icon$TriangleDown
};

function Icon$ExternalLink(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "16",
    width: "16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6M15 3h6v6M10 14L21 3"
  }));
}

_c14 = Icon$ExternalLink;
var ExternalLink = {
  make: Icon$ExternalLink
};

function Icon$Copy(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "24",
    width: "24",
    fill: "none",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    height: "12",
    width: "12",
    rx: "2",
    strokeLinecap: "round",
    strokeWidth: "2",
    x: "8.00012",
    y: "8.3175"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M16.0001 4.3175H7.00012C5.34327 4.3175 4.00012 5.66065 4.00012 7.3175V16.3175",
    strokeLinecap: "square",
    strokeWidth: "2"
  }));
}

_c15 = Icon$Copy;
var Copy = {
  make: Icon$Copy
};

function Icon$Clipboard(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== void 0 ? classNameOpt : "";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: "stroke-current " + className,
    height: "16",
    width: "16",
    fill: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "2",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {
    d: "M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {
    height: "4",
    width: "8",
    rx: "1",
    ry: "1",
    x: "8",
    y: "2"
  }));
}

_c16 = Icon$Clipboard;
var Clipboard = {
  make: Icon$Clipboard
};


var _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;

$RefreshReg$(_c, "Icon$GitHub");
$RefreshReg$(_c2, "Icon$Npm");
$RefreshReg$(_c3, "Icon$Twitter");
$RefreshReg$(_c4, "Icon$MagnifierGlass");
$RefreshReg$(_c5, "Icon$Caret");
$RefreshReg$(_c6, "Icon$DrawerDots");
$RefreshReg$(_c7, "Icon$CornerLeftUp");
$RefreshReg$(_c8, "Icon$Table");
$RefreshReg$(_c9, "Icon$Close");
$RefreshReg$(_c10, "Icon$ArrowRight");
$RefreshReg$(_c11, "Icon$Discourse");
$RefreshReg$(_c12, "Icon$Hyperlink");
$RefreshReg$(_c13, "Icon$TriangleDown");
$RefreshReg$(_c14, "Icon$ExternalLink");
$RefreshReg$(_c15, "Icon$Copy");
$RefreshReg$(_c16, "Icon$Clipboard");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/Markdown.mjs":
/*!*************************************!*\
  !*** ./src/components/Markdown.mjs ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ P; },
/* harmony export */   "Intro": function() { return /* binding */ Intro; },
/* harmony export */   "Cite": function() { return /* binding */ Cite; },
/* harmony export */   "Info": function() { return /* binding */ Info; },
/* harmony export */   "Warn": function() { return /* binding */ Warn; },
/* harmony export */   "UrlBox": function() { return /* binding */ UrlBox; },
/* harmony export */   "Anchor": function() { return /* binding */ Anchor; },
/* harmony export */   "H1": function() { return /* binding */ H1; },
/* harmony export */   "H2": function() { return /* binding */ H2; },
/* harmony export */   "H3": function() { return /* binding */ H3; },
/* harmony export */   "H4": function() { return /* binding */ H4; },
/* harmony export */   "H5": function() { return /* binding */ H5; },
/* harmony export */   "Pre": function() { return /* binding */ Pre; },
/* harmony export */   "InlineCode": function() { return /* binding */ InlineCode; },
/* harmony export */   "Table": function() { return /* binding */ Table; },
/* harmony export */   "Thead": function() { return /* binding */ Thead; },
/* harmony export */   "Th": function() { return /* binding */ Th; },
/* harmony export */   "Td": function() { return /* binding */ Td; },
/* harmony export */   "Code": function() { return /* binding */ Code; },
/* harmony export */   "CodeTab": function() { return /* binding */ CodeTab; },
/* harmony export */   "Blockquote": function() { return /* binding */ Blockquote; },
/* harmony export */   "Hr": function() { return /* binding */ Hr; },
/* harmony export */   "A": function() { return /* binding */ A; },
/* harmony export */   "Ul": function() { return /* binding */ Ul; },
/* harmony export */   "Ol": function() { return /* binding */ Ol; },
/* harmony export */   "Li": function() { return /* binding */ Li; },
/* harmony export */   "Strong": function() { return /* binding */ Strong; },
/* harmony export */   "$$default": function() { return /* binding */ $$default; },
/* harmony export */   "default": function() { return /* binding */ $$default; }
/* harmony export */ });
/* harmony import */ var _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Mdx.mjs */ "./src/common/Mdx.mjs");
/* harmony import */ var _common_Url_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Url.mjs */ "./src/common/Url.mjs");
/* harmony import */ var _Icon_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Icon.mjs */ "./src/components/Icon.mjs");
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var _common_Util_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/Util.mjs */ "./src/common/Util.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _common_LangUtil_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/LangUtil.mjs */ "./src/common/LangUtil.mjs");
/* harmony import */ var rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/belt_List.js */ "./node_modules/rescript/lib/es6/belt_List.js");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rescript/lib/es6/belt_Option.js */ "./node_modules/rescript/lib/es6/belt_Option.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CodeExample.mjs */ "./src/components/CodeExample.mjs");
/* harmony import */ var _ffi_parse_numeric_range_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ffi/parse-numeric-range.js */ "./src/ffi/parse-numeric-range.js");
/* module decorator */ module = __webpack_require__.hmd(module);
var _s = $RefreshSig$();















function Markdown$P(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", {
    className: "md-p md:leading-5 tracking-[-0.015em] text-gray-80 md:text-16"
  }, children);
}

_c = Markdown$P;
var P = {
  make: Markdown$P
};

function Markdown$Intro(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "text-24 mt-8 mb-4"
  }, children);
}

_c2 = Markdown$Intro;
var Intro = {
  make: Markdown$Intro
};

function Markdown$Cite(Props) {
  var author = Props.author;
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "my-10 border-l-2 border-fire font-normal pl-10 py-1 text-fire",
    style: {
      maxWidth: "30rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("blockquote", {
    className: "text-32 italic mb-2"
  }, children), rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.mapWithDefault(author, null, function (author2) {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("figcaption", {
      className: "font-semibold text-14"
    }, author2);
  }));
}

_c3 = Markdown$Cite;
var Cite = {
  make: Markdown$Cite
};

function Markdown$Info(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "infobox my-5 py-6 pl-8 pr-10 rounded-lg bg-sky-5"
  }, children);
}

_c4 = Markdown$Info;
var Info = {
  make: Markdown$Info
};

function Markdown$Warn(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "my-6 py-6 pl-8 pr-10 rounded-lg bg-orange-10"
  }, children);
}

_c5 = Markdown$Warn;
var Warn = {
  make: Markdown$Warn
};
var imgEl = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("img", {
  className: "mr-2 inline-block",
  src: "/static/hyperlink.svg"
});

function Markdown$UrlBox(Props) {
  var text = Props.text;
  var href = Props.href;
  var children = Props.children;
  var str = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.classify(children);
  var content;

  switch (str.TAG | 0) {
    case 0:
      content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, imgEl, str._0);
      break;

    case 1:
      var subChildren = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.getMdxChildren(str._0);
      content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, imgEl, _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.toReactElement(subChildren));
      break;

    case 2:
      var arr = str._0;
      var length = arr.length;

      if (length >= 1) {
        var head = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__.getExn(arr, 0);
        var headChildren = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.getMdxChildren(head);
        content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$P, {
          children: null
        }, imgEl, _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.toReactElement(headChildren)), length > 1 ? _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.arrToReactElement(arr.slice(1, length)) : null);
      } else {
        content = null;
      }

      break;

    case 3:
      console.log("Received unknown", str._0);
      content = null;
      break;
  }

  var link = _common_Util_mjs__WEBPACK_IMPORTED_MODULE_4__.Url.isAbsolute(href) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", {
    className: "flex items-center",
    href: href,
    rel: "noopener noreferrer"
  }, text, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_2__.ArrowRight.make, {
    className: "ml-1"
  })) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Link.make, {
    href: href,
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", {
      className: "flex items-center"
    }, text, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_2__.ArrowRight.make, {
      className: "ml-1"
    }))
  });
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "md-url-box text-16 border-l-2 border-gray-60 my-6 py-6 pl-8 pr-10 bg-gray-5"
  }, content, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "mt-4 text-sky hover:text-sky-30"
  }, link));
}

_c6 = Markdown$UrlBox;

function Markdown$Anchor(Props) {
  _s();

  var id = Props.id;
  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Router.useRouter(void 0);
  var url = _common_Url_mjs__WEBPACK_IMPORTED_MODULE_1__.parse(router.route);
  var lang = _common_LangUtil_mjs__WEBPACK_IMPORTED_MODULE_6__.whichLang(url);
  var id$1 = lang ? encodeURI(id) : id;
  var style = {
    position: "absolute",
    top: "-7rem"
  };
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", {
    className: "inline group relative"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", {
    className: "invisible text-gray-60 opacity-50 text-inherit hover:opacity-100 hover:text-gray-60 hover:cursor-pointer group-hover:visible",
    href: "#" + id$1
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_2__.Hyperlink.make, {
    className: "inline-block align-middle text-gray-40"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", {
    id: id$1,
    style: style
  }));
}

_s(Markdown$Anchor, "fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=", true);

_c7 = Markdown$Anchor;
var Anchor = {
  make: Markdown$Anchor
};

function Markdown$H1(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("h1", {
    className: "hl-1 mb-6 "
  }, children);
}

_c8 = Markdown$H1;
var H1 = {
  make: Markdown$H1
};

function Markdown$H2(Props) {
  var id = Props.id;
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("h2", {
    className: "group mt-16 mb-3 hl-3"
  }, children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", {
    className: "ml-2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$Anchor, {
    id: id
  }))));
}

_c9 = Markdown$H2;
var H2 = {
  make: Markdown$H2
};

function Markdown$H3(Props) {
  var id = Props.id;
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("h3", {
    className: "group mt-8 mb-1 hl-4"
  }, children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", {
    className: "ml-2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$Anchor, {
    id: id
  })));
}

_c10 = Markdown$H3;
var H3 = {
  make: Markdown$H3
};

function Markdown$H4(Props) {
  var id = Props.id;
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("h4", {
    className: "group mt-8 hl-5"
  }, children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", {
    className: "ml-2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$Anchor, {
    id: id
  })));
}

_c11 = Markdown$H4;
var H4 = {
  make: Markdown$H4
};

function Markdown$H5(Props) {
  var id = Props.id;
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("h5", {
    className: "group mt-12 mb-3 text-12 leading-2 font-sans font-semibold uppercase tracking-wide text-gray-80"
  }, children, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", {
    className: "ml-2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$Anchor, {
    id: id
  })));
}

_c12 = Markdown$H5;
var H5 = {
  make: Markdown$H5
};

function Markdown$Pre(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("pre", {
    className: "mt-2 mb-4 -mx-6 xs:mx-0 block"
  }, children);
}

_c13 = Markdown$Pre;
var Pre = {
  make: Markdown$Pre
};

function Markdown$InlineCode(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("code", {
    className: "md-inline-code px-2 py-0.5 text-14 text-gray-60 font-mono rounded-sm bg-gray-10-tr border border-gray-90 border-opacity-5"
  }, children);
}

_c14 = Markdown$InlineCode;
var InlineCode = {
  make: Markdown$InlineCode
};

function Markdown$Table(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "overflow-x-auto mt-10 mb-16"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("table", {
    className: "md-table"
  }, children));
}

_c15 = Markdown$Table;
var Table = {
  make: Markdown$Table
};

function Markdown$Thead(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("thead", void 0, children);
}

_c16 = Markdown$Thead;
var Thead = {
  make: Markdown$Thead
};

function Markdown$Th(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("th", {
    className: "py-2 pr-8 text-12 text-gray-60 uppercase font-medium tracking-wide text-left border-b-2 border-gray-20"
  }, children);
}

_c17 = Markdown$Th;
var Th = {
  make: Markdown$Th
};

function Markdown$Td(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", {
    className: "border-b border-gray-20 py-3 pr-8"
  }, children);
}

_c18 = Markdown$Td;
var Td = {
  make: Markdown$Td
};

var isArray = function isArray(thing) {
  return thing instanceof Array;
};

var isObject = function isObject(thing) {
  return thing instanceof Object;
};

function parseNumericRangeMeta(metastring) {
  return rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.getWithDefault(rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.map(rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.undefined_to_opt(metastring.split(" ").find(function (s) {
    if (s.startsWith("{")) {
      return s.endsWith("}");
    } else {
      return false;
    }
  })), function (str) {
    return _ffi_parse_numeric_range_js__WEBPACK_IMPORTED_MODULE_12__.parsePart(str.replace(/[\{\}]/g, ""));
  }), []);
}

function Markdown$Code(Props) {
  var className = Props.className;
  var metastring = Props.metastring;
  var children = Props.children;
  var lang;

  if (className !== void 0) {
    var match = className.split("-");

    if (match.length !== 2) {
      lang = "text";
    } else {
      var match$1 = match[0];

      if (match$1 === "language") {
        var lang$1 = match[1];
        lang = lang$1 === "" ? "text" : lang$1;
      } else {
        lang = "text";
      }
    }
  } else {
    lang = "text";
  }

  if (!isArray(children)) {
    if (isObject(children)) {
      return children;
    } else {
      var codeElement;

      if (metastring !== void 0) {
        var metaSplits = rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_7__.fromArray(metastring.split(" "));
        var highlightedLines = parseNumericRangeMeta(metastring);
        codeElement = rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_7__.has(metaSplits, "example", function (prim0, prim1) {
          return prim0 === prim1;
        }) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__.make, {
          code: children,
          lang: lang
        }) : rescript_lib_es6_belt_List_js__WEBPACK_IMPORTED_MODULE_7__.has(metaSplits, "sig", function (prim0, prim1) {
          return prim0 === prim1;
        }) ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__.make, {
          code: children,
          showLabel: false,
          lang: lang
        }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__.make, {
          highlightedLines: highlightedLines,
          code: children,
          lang: lang
        });
      } else {
        codeElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__.make, {
          code: children,
          lang: lang
        });
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "md-code font-mono w-full block mt-5 mb-5"
      }, codeElement);
    }
  }

  var code = children.join("");
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$InlineCode, {
    children: code
  });
}

_c19 = Markdown$Code;

var getMdxMetastring = function getMdxMetastring(element) {
  if (element == null || element.props == null) {
    return;
  }

  return element.props.metastring;
};

function Markdown$CodeTab(Props) {
  var children = Props.children;
  var labelsOpt = Props.labels;
  var labels = labelsOpt !== void 0 ? labelsOpt : [];
  var mdxElements = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.classify(children);
  var mdxElements$1;

  switch (mdxElements.TAG | 0) {
    case 1:
      mdxElements$1 = [mdxElements._0];
      break;

    case 2:
      mdxElements$1 = mdxElements._0;
      break;

    case 0:
    case 3:
      mdxElements$1 = [];
      break;
  }

  var tabs = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__.reduceWithIndex(mdxElements$1, [], function (acc, mdxElement, i) {
    var child = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.classify(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.getMdxChildren(mdxElement));

    if (child.TAG === 1) {
      var codeEl = child._0;
      var match = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.getMdxType(codeEl);

      if (match === "code") {
        var className = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.getWithDefault(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.getMdxClassName(codeEl), "");
        var metastring = rescript_lib_es6_belt_Option_js__WEBPACK_IMPORTED_MODULE_9__.getWithDefault(getMdxMetastring(codeEl), "");
        var match$1 = className.split("-");
        var lang;

        if (match$1.length !== 2) {
          lang = void 0;
        } else {
          var match$2 = match$1[0];
          lang = match$2 === "language" ? match$1[1] : void 0;
        }

        var code = String(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.MdxChildren.getMdxChildren(codeEl));
        var label = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__.get(labels, i);
        var tab_highlightedLines = parseNumericRangeMeta(metastring);
        var tab = {
          highlightedLines: tab_highlightedLines,
          label: label,
          lang: lang,
          code: code
        };
        acc.push(tab);
      }
    }

    return acc;
  });
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
    className: "md-codetab mt-8 mb-8 -mx-6 xs:mx-0"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_CodeExample_mjs__WEBPACK_IMPORTED_MODULE_11__.Toggle.make, {
    tabs: tabs
  }));
}

_c20 = Markdown$CodeTab;

function Markdown$Blockquote(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("blockquote", {
    className: "md-blockquote"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(Markdown$Info, {
    children: children
  }));
}

_c21 = Markdown$Blockquote;
var Blockquote = {
  make: Markdown$Blockquote
};

function Markdown$Hr(Props) {
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("hr", {
    className: "my-4"
  });
}

_c22 = Markdown$Hr;
var Hr = {
  make: Markdown$Hr
};

function Markdown$A(Props) {
  var href = Props.href;
  var target = Props.target;
  var children = Props.children;

  if (_common_Util_mjs__WEBPACK_IMPORTED_MODULE_4__.Url.isAbsolute(href)) {
    var tmp = {
      className: "no-underline text-fire hover:underline",
      href: href,
      rel: "noopener noreferrer"
    };

    if (target !== void 0) {
      tmp.target = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(target);
    }

    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", tmp, children);
  }

  var regex = /\.md(x)?|\.html$/;
  var match = href.split("#");
  var len = match.length;
  var href$1;

  if (len >= 3) {
    href$1 = href;
  } else {
    switch (len) {
      case 0:
        href$1 = href;
        break;

      case 1:
        var pathname = match[0];
        href$1 = pathname.replace(regex, "");
        break;

      case 2:
        var pathname$1 = match[0];
        var anchor = match[1];
        href$1 = pathname$1.replace(regex, "") + ("#" + anchor);
        break;
    }
  }

  var tmp$1 = {
    className: "no-underline text-fire hover:underline",
    href: href$1,
    rel: "noopener noreferrer"
  };

  if (target !== void 0) {
    tmp$1.target = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.valFromOption(target);
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_3__.Link.make, {
    href: href$1,
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("a", tmp$1, children)
  });
}

_c23 = Markdown$A;
var A = {
  make: Markdown$A
};

function Markdown$Ul(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("ul", {
    className: "md-ul mt-12 mb-16"
  }, children);
}

_c24 = Markdown$Ul;
var Ul = {
  make: Markdown$Ul
};

function Markdown$Ol(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("ol", {
    className: "md-ol ml-2"
  }, children);
}

_c25 = Markdown$Ol;
var Ol = {
  make: Markdown$Ol
};

var typeOf = function typeOf(thing) {
  return typeof thing;
};

var isArray$1 = function isArray$1(thing) {
  return thing instanceof Array;
};

function Markdown$Li(Props) {
  var children = Props.children;
  var elements;

  if (isArray$1(children)) {
    var last = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__.getExn(children, children.length - 1 | 0);
    var head = children.slice(0, children.length - 1 | 0);
    var first = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_8__.getExn(head, 0);
    var match = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.getMdxType(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.fromReactElement(last));
    var exit = 0;

    switch (match) {
      case "li":
      case "pre":
      case "ul":
        exit = 1;
        break;

      default:
        elements = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, children);
    }

    if (exit === 1) {
      var match$1 = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.getMdxType(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.fromReactElement(first));
      elements = match$1 === "p" ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, void 0, head, last) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(react__WEBPACK_IMPORTED_MODULE_5__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, head), last);
    }
  } else if (typeOf(children) === "string") {
    elements = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, _common_Util_mjs__WEBPACK_IMPORTED_MODULE_4__.Unsafe.elementAsString(children));
  } else {
    var match$2 = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.getMdxType(_common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.fromReactElement(children));

    switch (match$2) {
      case "p":
      case "pre":
        elements = children;
        break;

      default:
        elements = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", void 0, children);
    }
  }

  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("li", {
    className: "md-li mt-3 leading-4 ml-2"
  }, elements);
}

_c26 = Markdown$Li;

function Markdown$Strong(Props) {
  var children = Props.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("strong", {
    className: "font-semibold"
  }, children);
}

_c27 = Markdown$Strong;
var Strong = {
  make: Markdown$Strong
};
var $$default = _common_Mdx_mjs__WEBPACK_IMPORTED_MODULE_0__.Components.t(Markdown$Cite, Markdown$Info, Markdown$Warn, Markdown$Intro, Markdown$UrlBox, Markdown$CodeTab, Markdown$P, Markdown$Li, Markdown$H1, Markdown$H2, Markdown$H3, Markdown$H4, Markdown$H5, Markdown$Ul, Markdown$Ol, Markdown$Table, Markdown$Thead, Markdown$Th, Markdown$Td, Markdown$Blockquote, Markdown$InlineCode, Markdown$Strong, Markdown$Hr, Markdown$Code, Markdown$Pre, Markdown$A, void 0);
var UrlBox = {
  make: Markdown$UrlBox
};
var Code = {
  make: Markdown$Code
};
var CodeTab = {
  make: Markdown$CodeTab
};
var Li = {
  make: Markdown$Li
};


var _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27;

$RefreshReg$(_c, "Markdown$P");
$RefreshReg$(_c2, "Markdown$Intro");
$RefreshReg$(_c3, "Markdown$Cite");
$RefreshReg$(_c4, "Markdown$Info");
$RefreshReg$(_c5, "Markdown$Warn");
$RefreshReg$(_c6, "Markdown$UrlBox");
$RefreshReg$(_c7, "Markdown$Anchor");
$RefreshReg$(_c8, "Markdown$H1");
$RefreshReg$(_c9, "Markdown$H2");
$RefreshReg$(_c10, "Markdown$H3");
$RefreshReg$(_c11, "Markdown$H4");
$RefreshReg$(_c12, "Markdown$H5");
$RefreshReg$(_c13, "Markdown$Pre");
$RefreshReg$(_c14, "Markdown$InlineCode");
$RefreshReg$(_c15, "Markdown$Table");
$RefreshReg$(_c16, "Markdown$Thead");
$RefreshReg$(_c17, "Markdown$Th");
$RefreshReg$(_c18, "Markdown$Td");
$RefreshReg$(_c19, "Markdown$Code");
$RefreshReg$(_c20, "Markdown$CodeTab");
$RefreshReg$(_c21, "Markdown$Blockquote");
$RefreshReg$(_c22, "Markdown$Hr");
$RefreshReg$(_c23, "Markdown$A");
$RefreshReg$(_c24, "Markdown$Ul");
$RefreshReg$(_c25, "Markdown$Ol");
$RefreshReg$(_c26, "Markdown$Li");
$RefreshReg$(_c27, "Markdown$Strong");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/Meta.mjs":
/*!*********************************!*\
  !*** ./src/components/Meta.mjs ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make": function() { return /* binding */ make; }
/* harmony export */ });
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* module decorator */ module = __webpack_require__.hmd(module);



function Meta(Props) {
  var siteNameOpt = Props.siteName;
  var keywordsOpt = Props.keywords;
  var descriptionOpt = Props.description;
  var canonical = Props.canonical;
  var title = Props.title;
  var ogLocaleOpt = Props.ogLocale;
  var ogSiteName = Props.ogSiteName;
  var ogDescriptionOpt = Props.ogDescription;
  var ogTitle = Props.ogTitle;
  var ogImage = Props.ogImage;
  var siteName = siteNameOpt !== void 0 ? siteNameOpt : "ReScript Documentation";
  var keywords = keywordsOpt !== void 0 ? keywordsOpt : [];
  var description = descriptionOpt !== void 0 ? descriptionOpt : "The ReScript language and ecosystem docs";
  var ogLocale = ogLocaleOpt !== void 0 ? ogLocaleOpt : "en_US";
  var ogDescription = ogDescriptionOpt !== void 0 ? ogDescriptionOpt : description;
  var title$1 = title !== void 0 && title !== "" ? title : siteName;
  var ogSiteName$1 = ogSiteName !== void 0 ? ogSiteName : siteName;
  var ogTitle$1 = ogTitle !== void 0 ? ogTitle : title$1;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_0__.Head.make, {
    children: null
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("title", {
    key: "title"
  }, title$1), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    charSet: "utf-8"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    content: "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, minimal-ui",
    name: "viewport"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "description",
    content: description,
    name: "description"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "keywords",
    content: keywords.join(","),
    name: "keywords"
  }), canonical !== void 0 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    key: "canonical",
    href: canonical,
    rel: "canonical"
  }) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    href: "/static/favicon/apple-touch-icon.png",
    rel: "apple-touch-icon",
    sizes: "180x180"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    href: "/static/favicon/favicon-32x32.png",
    rel: "icon",
    sizes: "32x32",
    type: "image/png"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    href: "/static/favicon/favicon-16x16.png",
    rel: "icon",
    sizes: "16x16",
    type: "image/png"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    href: "/static/favicon/site.webmanifest",
    rel: "manifest"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "og:site_name",
    content: ogSiteName$1,
    property: "og:site_name"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "og:locale",
    content: ogLocale,
    property: "og:locale"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "og:title",
    content: ogTitle$1,
    property: "og:title"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "og:description",
    content: ogDescription,
    property: "og:description"
  }), ogImage !== void 0 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "og:image",
    content: ogImage,
    property: "og:image"
  }) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "twitter:title",
    content: title$1,
    name: "twitter:title"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "twitter:description",
    content: description,
    name: "twitter:description"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "twitter:site",
    content: "@reasonml",
    name: "twitter:site"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "twitter:creator",
    content: "@ReasonAssoc",
    name: "twitter:creator"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    content: "image/jpeg",
    property: "og:image:type"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("meta", {
    key: "twitter:card",
    content: "summary_large_image",
    name: "twitter:card"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement("link", {
    title: "ReScript Blog",
    href: "/blog/feed.xml",
    rel: "alternate",
    type: "application/rss+xml"
  }));
}

_c = Meta;
var make = Meta;


var _c;

$RefreshReg$(_c, "Meta");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/Navigation.mjs":
/*!***************************************!*\
  !*** ./src/components/Navigation.mjs ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "make": function() { return /* binding */ make; }
/* harmony export */ });
/* harmony import */ var _common_Url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Url.mjs */ "./src/common/Url.mjs");
/* harmony import */ var _Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Icon.mjs */ "./src/components/Icon.mjs");
/* harmony import */ var _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bindings/Next.mjs */ "./src/bindings/Next.mjs");
/* harmony import */ var _common_Util_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Util.mjs */ "./src/common/Util.mjs");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var _common_Hooks_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Hooks.mjs */ "./src/common/Hooks.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _common_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Constants.mjs */ "./src/common/Constants.mjs");
/* harmony import */ var _DocSearch_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DocSearch.mjs */ "./src/components/DocSearch.mjs");
/* harmony import */ var rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rescript/lib/es6/belt_Array.js */ "./node_modules/rescript/lib/es6/belt_Array.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var _rescript_react_src_ReactDOMStyle_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @rescript/react/src/ReactDOMStyle.mjs */ "./node_modules/@rescript/react/src/ReactDOMStyle.mjs");
/* module decorator */ module = __webpack_require__.hmd(module);
var _s = $RefreshSig$(),
    _s2 = $RefreshSig$();













var link = "no-underline block text-inherit hover:cursor-pointer hover:text-fire-30 text-gray-40 mb-px";
var activeLink = "text-inherit font-medium text-fire-30 border-b border-fire";

function linkOrActiveLink(target, route) {
  if (target === route) {
    return activeLink;
  } else {
    return link;
  }
}

function linkOrActiveLinkSubroute(target, route) {
  if (route.startsWith(target)) {
    return activeLink;
  } else {
    return link;
  }
}

function linkOrActiveApiSubroute(route) {
  var url = _common_Url_mjs__WEBPACK_IMPORTED_MODULE_0__.parse(route);
  var match = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_9__.get(url.pagepath, 0);

  if (match === "api") {
    return activeLink;
  } else {
    return link;
  }
}

var githubHref = "https://github.com/reason-association/rescript-lang.org#rescript-langorg";
var discourseHref = "https://forum.rescript-lang.org";

function Navigation$CollapsibleLink(Props) {
  var title = Props.title;
  var onStateChange = Props.onStateChange;
  var allowHoverOpt = Props.allowHover;
  var id = Props.id;
  var state = Props.state;
  var activeOpt = Props.active;
  var children = Props.children;
  var allowHover = allowHoverOpt !== void 0 ? allowHoverOpt : true;
  var active = activeOpt !== void 0 ? activeOpt : false;

  var onClick = function onClick(_evt) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(onStateChange, id, state >= 2 ? 0 : 2);
  };

  var onMouseEnter = function onMouseEnter(evt) {
    evt.preventDefault();

    if (allowHover) {
      return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(onStateChange, id, 1);
    }
  };

  var isOpen = state < 2;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(react__WEBPACK_IMPORTED_MODULE_6__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "relative",
    onMouseEnter: onMouseEnter
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex items-center"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("button", {
    className: (active ? activeLink : link) + (" border-none flex items-center hover:cursor-pointer " + (isOpen ? " text-fire-30" : "")),
    tabIndex: 0,
    onClick: onClick
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", {
    className: active ? "border-b border-fire" : ""
  }, title))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: (isOpen ? "flex" : "hidden") + " fixed left-0 overflow-y-scroll overflow-x-hidden border-gray-80 border-gray-40 min-w-320 w-full h-full bg-white sm:overflow-y-auto sm:bg-transparent sm:h-auto sm:justify-center sm:rounded-bl-xl sm:rounded-br-xl sm:shadow",
    style: {
      marginTop: "1rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "w-full"
  }, children))));
}

_c = Navigation$CollapsibleLink;

function Navigation$DocsSection$LinkCard(Props) {
  var icon = Props.icon;
  var title = Props.title;
  var description = Props.description;
  var href = Props.href;
  var activeOpt = Props.active;
  var active = activeOpt !== void 0 ? activeOpt : false;
  var isAbsolute = _common_Util_mjs__WEBPACK_IMPORTED_MODULE_3__.Url.isAbsolute(href);
  var content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "hover:bg-gray-5 hover:shadow hover:-mx-8 hover:px-8 hover:cursor-pointer active:bg-gray-20 py-4 flex space-x-4 items-start rounded-xl"
  }, icon, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex items-center text-16 font-medium " + (active ? "text-fire" : "text-gray-80") + ""
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", void 0, title), isAbsolute ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ExternalLink.make, {
    className: "inline-block ml-2 w-4 h-4"
  }) : null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "block text-14 text-gray-60 " + (active ? "text-fire-50" : "text-gray-60") + ""
  }, description)));

  if (isAbsolute) {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
      className: "",
      href: href,
      rel: "noopener noreferrer"
    }, content);
  } else {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
      href: href,
      children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
        className: ""
      }, content)
    });
  }
}

_c2 = Navigation$DocsSection$LinkCard;

function Navigation$DocsSection(Props) {
  _s();

  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.useRouter(void 0);
  var url = _common_Url_mjs__WEBPACK_IMPORTED_MODULE_0__.parse(router.route);
  var match = react__WEBPACK_IMPORTED_MODULE_6__.useState(function () {
    var version2 = url.version;

    if (typeof version2 === "number") {
      return "latest";
    } else {
      return version2._0;
    }
  });
  var version = match[0];
  var languageManual = _common_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.languageManual(version);
  var documentation = [{
    imgSrc: "/static/ic_manual@2x.png",
    title: "\u8BED\u8A00\u624B\u518C",
    description: "\u6240\u6709\u7684\u8BED\u8A00\u7279\u6027\u7684\u53C2\u8003\u6307\u5357",
    href: "/docs-cn/manual/" + version + "/introduction",
    isActive: function isActive(url2) {
      var match2 = url2.base;

      if (match2.length !== 2) {
        return false;
      }

      var match$12 = match2[0];

      if (match$12 !== "docs-cn") {
        return false;
      }

      var match$22 = match2[1];

      if (match$22 === "manual") {
        return true;
      } else {
        return false;
      }
    }
  }, {
    imgSrc: "/static/ic_rescript_react@2x.png",
    title: "ReScript & React",
    description: "ReactJS \u7684\u4E00\u7B49\u516C\u6C11\u7ED1\u5B9A",
    href: "/docs/react/latest/introduction",
    isActive: function isActive(url2) {
      var match2 = url2.base;

      if (match2.length !== 2) {
        return false;
      }

      var match$12 = match2[0];

      if (match$12 !== "docs") {
        return false;
      }

      var match$22 = match2[1];

      if (match$22 === "react") {
        return true;
      } else {
        return false;
      }
    }
  }, {
    imgSrc: "/static/ic_gentype@2x.png",
    title: "GenType",
    description: "\u65E0\u7F1D\u8854\u63A5 TypeScript & Flow \u96C6\u6210",
    href: "/docs/gentype/latest/introduction",
    isActive: function isActive(url2) {
      var match2 = url2.base;

      if (match2.length !== 2) {
        return false;
      }

      var match$12 = match2[0];

      if (match$12 !== "docs") {
        return false;
      }

      var match$22 = match2[1];

      if (match$22 === "gentype") {
        return true;
      } else {
        return false;
      }
    }
  }, {
    imgSrc: "/static/ic_reanalyze@2x.png",
    title: "Reanalyze",
    description: "\u6B7B\u4EE3\u7801\u6D88\u9664 & \u505C\u673A\u5206\u6790",
    href: "https://github.com/reason-association/reanalyze",
    isActive: function isActive(param) {
      return false;
    }
  }];
  var languageManualColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex px-4 sm:justify-center border-r border-gray-10 pt-8 pb-10"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "text-12 font-medium text-gray-100 tracking-wide uppercase subpixel-antialiased"
  }, "\u5FEB\u901F\u8DF3\u8F6C"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("ul", {
    className: "space-y-2 ml-2 mt-6"
  }, languageManual.map(function (item) {
    var href = item[1];
    var text = item[0];
    var linkClass = router.route === href ? "text-fire-50" : "hover:text-fire-50";
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
      key: text
    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("span", {
      className: "text-fire mr-2"
    }, "-"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
      href: href,
      children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
        className: linkClass
      }, text)
    }));
  })))));
  var ecosystemColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex px-4 sm:h-full sm:justify-center border-r border-gray-10 pt-8"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "w-full pb-16",
    style: {
      maxWidth: "19.625rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "text-12 font-medium text-gray-100 tracking-wide uppercase subpixel-antialiased"
  }, "Documentation"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "mt-6"
  }, documentation.map(function (item) {
    var title = item.title;
    var icon2 = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
      style: {
        width: "2.1875rem"
      },
      src: item.imgSrc
    });
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$DocsSection$LinkCard, {
      icon: icon2,
      title: title,
      description: item.description,
      href: item.href,
      active: rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(item.isActive, url),
      key: title
    });
  })))));
  var icon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "w-6 h-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
    className: "w-full",
    src: "/static/ic_package.svg"
  }));
  var match$1 = url.base;
  var active;

  if (match$1.length !== 1) {
    active = false;
  } else {
    var match$2 = match$1[0];
    active = match$2 === "packages" ? true : false;
  }

  /*#__PURE__*/
  react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$DocsSection$LinkCard, {
    icon: icon,
    title: "Packages",
    description: "Explore third party libraries and bindings",
    href: "/packages",
    active: active
  });
  var match$3 = url.base;
  var active$1;

  if (match$3.length !== 1) {
    active$1 = false;
  } else {
    var match$4 = match$3[0];
    active$1 = match$4 === "syntax-lookup" ? true : false;
  }

  var icon$1 = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "-mr-2 flex w-6 h-6 justify-center items-center"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
    className: "w-4 h-4",
    src: "/static/ic_search.svg"
  }));
  var syntaxLookupLink = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$DocsSection$LinkCard, {
    icon: icon$1,
    title: "\u8BED\u6CD5\u67E5\u627E",
    description: "\u63A2\u7D22\u6240\u6709\u8BED\u6CD5\u7ED3\u6784",
    href: "/syntax-lookup",
    active: active$1
  });
  var quickReferenceColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex px-4 sm:h-full sm:justify-center pb-12 pt-8 pb-10"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "w-full",
    style: {
      maxWidth: "19.625rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "text-12 font-medium text-gray-100 tracking-wide uppercase subpixel-antialiased"
  }, "Exploration"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "mt-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(react__WEBPACK_IMPORTED_MODULE_6__.Fragment, void 0, syntaxLookupLink))));
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "relative w-full bg-white pb-32 min-h-full sm:pb-0 text-gray-60 text-14 rounded-bl-xl rounded-br-xl"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex justify-center"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "w-full sm:grid sm:grid-cols-3 max-w-1280"
  }, languageManualColumn, ecosystemColumn, quickReferenceColumn)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
    className: "hidden xl:block absolute bottom-0 right-0",
    style: {
      maxWidth: "27.8rem"
    },
    src: "/static/illu_index_rescript@2x.png"
  }));
}

_s(Navigation$DocsSection, "VMpuOoDu32vTzGVWAmT86LN31cg=", true);

_c3 = Navigation$DocsSection;

function Navigation$MobileNav(Props) {
  var route = Props.route;
  var base = "font-normal mx-4 py-5 text-gray-20 border-b border-gray-80";
  var extLink = "block hover:cursor-pointer hover:text-white text-gray-60";
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "border-gray-80 border-t"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("ul", void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_DocSearch_mjs__WEBPACK_IMPORTED_MODULE_8__.Textbox.make, {
    id: "docsearch-mobile"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
    href: "/try",
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
      className: linkOrActiveLink("/try", route)
    }, "\u5DE5\u4F5C\u53F0")
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
    href: "/blog",
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
      className: linkOrActiveLinkSubroute("/blog", route)
    }, "Blog")
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: extLink,
    href: "https://twitter.com/rescriptlang",
    rel: "noopener noreferrer"
  }, "Twitter")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: extLink,
    href: githubHref,
    rel: "noopener noreferrer"
  }, "GitHub")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("li", {
    className: base
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: extLink,
    href: discourseHref,
    rel: "noopener noreferrer"
  }, "Forum"))));
}

_c4 = Navigation$MobileNav;

function Navigation(Props) {
  _s2();

  var fixedOpt = Props.fixed;
  var overlayState = Props.overlayState;
  var fixed = fixedOpt !== void 0 ? fixedOpt : true;
  var minWidth = "20rem";
  var router = _bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.useRouter(void 0);
  var route = router.route;
  var match = react__WEBPACK_IMPORTED_MODULE_6__.useState(function () {
    return [{
      title: "\u6587\u6863",
      children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$DocsSection, {}),
      isActiveRoute: function isActiveRoute(route2) {
        var url = _common_Url_mjs__WEBPACK_IMPORTED_MODULE_0__.parse(route2);
        var match2 = url.base;
        var len = match2.length;

        if (len >= 3) {
          return false;
        }

        switch (len) {
          case 0:
            return false;

          case 1:
            var match$1 = match2[0];

            if (match$1 !== "docs") {
              return false;
            }

            break;

          case 2:
            var match$2 = match2[0];

            if (match$2 !== "docs") {
              return false;
            }

            var match$3 = match2[1];

            switch (match$3) {
              case "gentype":
              case "manual":
                break;

              default:
                return false;
            }

            break;
        }

        var match$4 = rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_9__.get(url.pagepath, 0);

        if (match$4 === "api") {
          return false;
        } else {
          return true;
        }
      },
      href: "/docs/manual/latest/api",
      state: 2
    }];
  });
  var setCollapsibles = match[1];
  var collapsibles = match[0];
  var isSubnavOpen = rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_10__.undefined_to_opt(collapsibles.find(function (c) {
    return c.state !== 2;
  })) !== void 0;
  var setOverlayOpen = overlayState[1];
  var isOverlayOpen = overlayState[0];

  var resetCollapsibles = function resetCollapsibles(param) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(setCollapsibles, function (prev) {
      return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_9__.map(prev, function (c) {
        return {
          title: c.title,
          children: c.children,
          isActiveRoute: c.isActiveRoute,
          href: c.href,
          state: 2
        };
      });
    });
  };

  var navRef = react__WEBPACK_IMPORTED_MODULE_6__.useRef(null);
  _common_Hooks_mjs__WEBPACK_IMPORTED_MODULE_5__.useOutsideClick(navRef, resetCollapsibles);
  react__WEBPACK_IMPORTED_MODULE_6__.useEffect(function () {
    var events = router.events;

    var onChangeComplete = function onChangeComplete(_url) {
      resetCollapsibles(void 0);

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(setOverlayOpen, function (param) {
        return false;
      });
    };

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.Events.on, events, {
      NAME: "routeChangeComplete",
      VAL: onChangeComplete
    });

    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.Events.on, events, {
      NAME: "hashChangeComplete",
      VAL: onChangeComplete
    });

    return function (param) {
      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.Events.off, events, {
        NAME: "routeChangeComplete",
        VAL: onChangeComplete
      });

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._2(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Router.Events.off, events, {
        NAME: "hashChangeComplete",
        VAL: onChangeComplete
      });
    };
  }, []);
  var fixedNav = fixed ? "fixed top-0" : "relative";

  var onStateChange = function onStateChange(id, state) {
    rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(setCollapsibles, function (prev) {
      return rescript_lib_es6_belt_Array_js__WEBPACK_IMPORTED_MODULE_9__.keepMap(prev, function (next) {
        if (next.title === id) {
          return {
            title: next.title,
            children: next.children,
            isActiveRoute: next.isActiveRoute,
            href: next.href,
            state: state
          };
        }
      });
    });
  };

  var collapsibleElements = collapsibles.map(function (coll) {
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$CollapsibleLink, {
      title: coll.title,
      onStateChange: onStateChange,
      allowHover: false,
      id: coll.title,
      state: coll.state,
      active: rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(coll.isActiveRoute, route),
      children: coll.children,
      key: coll.title
    });
  });
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(react__WEBPACK_IMPORTED_MODULE_6__.Fragment, void 0, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("nav", {
    ref: navRef,
    className: fixedNav + " z-50 px-4 flex xs:justify-center w-full h-16 bg-gray-90 shadow text-white-80 text-14",
    id: "header",
    style: {
      minWidth: minWidth
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex justify-between items-center h-full w-full max-w-1280"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "h-8 w-8 lg:h-10 lg:w-32"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: "block hover:cursor-pointer w-full h-full flex justify-center items-center font-bold",
    href: "/"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
    className: "lg:hidden",
    src: "/static/nav-logo@2x.png"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("img", {
    className: "hidden lg:block",
    src: "/static/nav-logo-full@2x.png"
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex items-center xs:justify-between w-full bg-gray-90 sm:h-auto sm:relative"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "flex ml-10 space-x-5 w-full max-w-320",
    style: {
      maxWidth: "26rem"
    }
  }, collapsibleElements, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
    href: "/docs-cn/manual/latest/api",
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
      className: linkOrActiveApiSubroute(route)
    }, "API")
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_bindings_Next_mjs__WEBPACK_IMPORTED_MODULE_2__.Link.make, {
    href: "/try",
    children: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
      className: "hidden xs:block " + linkOrActiveLink("/try", route)
    }, "\u5DE5\u4F5C\u53F0")
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "hidden md:flex items-center"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: "hidden sm:block mr-6"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_DocSearch_mjs__WEBPACK_IMPORTED_MODULE_8__.make, {})), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: "mr-5 " + link,
    href: githubHref,
    rel: "noopener noreferrer"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.GitHub.make, {
    className: "w-6 h-6 opacity-50 hover:opacity-100"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: "mr-5 " + link,
    href: "https://twitter.com/rescriptlang",
    rel: "noopener noreferrer"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Twitter.make, {
    className: "w-6 h-6 opacity-50 hover:opacity-100"
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("a", {
    className: link,
    href: discourseHref,
    rel: "noopener noreferrer"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Discourse.make, {
    className: "w-6 h-6 opacity-50 hover:opacity-100"
  }))))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("button", {
    className: "h-full px-4 xs:hidden flex items-center hover:text-white",
    onClick: function onClick(evt) {
      evt.preventDefault();
      resetCollapsibles(void 0);

      rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_4__._1(setOverlayOpen, function (prev) {
        return !prev;
      });
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.DrawerDots.make, {
    className: "h-1 w-auto block " + (isOverlayOpen ? "text-fire" : "text-gray-60")
  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: (isOverlayOpen && !isSubnavOpen ? "flex" : "hidden") + " sm:hidden flex-col fixed top-0 left-0 h-full w-full z-50 sm:w-9/12 bg-gray-100 sm:h-auto sm:flex sm:relative sm:flex-row sm:justify-between",
    style: {
      minWidth: minWidth,
      top: "4rem"
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement(Navigation$MobileNav, {
    route: route
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_6__.createElement("div", {
    className: (isSubnavOpen ? "fixed" : "hidden") + " z-40 bg-gray-10-tr w-full h-full bottom-0",
    style: _rescript_react_src_ReactDOMStyle_mjs__WEBPACK_IMPORTED_MODULE_11__.unsafeAddProp(_rescript_react_src_ReactDOMStyle_mjs__WEBPACK_IMPORTED_MODULE_11__.unsafeAddProp({}, "backdropFilter", "blur(2px)"), "WebkitBackdropFilter", "blur(2px)")
  }));
}

_s2(Navigation, "fAZgIFBXFkQC28EvIOS0YITbKlo=", true, function () {
  return [_common_Hooks_mjs__WEBPACK_IMPORTED_MODULE_5__.useOutsideClick];
});

_c5 = Navigation;
var make = Navigation;


var _c, _c2, _c3, _c4, _c5;

$RefreshReg$(_c, "Navigation$CollapsibleLink");
$RefreshReg$(_c2, "Navigation$DocsSection$LinkCard");
$RefreshReg$(_c3, "Navigation$DocsSection");
$RefreshReg$(_c4, "Navigation$MobileNav");
$RefreshReg$(_c5, "Navigation");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/components/Text.mjs":
/*!*********************************!*\
  !*** ./src/components/Text.mjs ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Link": function() { return /* binding */ Link; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
var Link = {
  inline: "no-underline border-b border-gray-80 hover:border-bs-purple text-inherit",
  standalone: "no-underline text-fire"
};


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/ffi/loadScript.js":
/*!*******************************!*\
  !*** ./src/ffi/loadScript.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ loadScript; },
/* harmony export */   "removeScript": function() { return /* binding */ removeScript; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
var isBrowser =  true && typeof window.document !== "undefined";
function loadScript(src, onSuccess, onError) {
  if (!isBrowser) return;
  var scriptEl = document.createElement("script");
  scriptEl.setAttribute("src", src);
  scriptEl.addEventListener("load", onSuccess);
  scriptEl.addEventListener("error", onError);
  document.body.appendChild(scriptEl);
  return function () {
    scriptEl.removeEventListener("load", onSuccess);
    scriptEl.removeEventListener("error", onError);
  };
}
function removeScript(src) {
  var existing = document.body.querySelectorAll("script[src=\"".concat(src, "\"]"));
  existing.forEach(function (el) {
    document.body.removeChild(el);
  });
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/ffi/parse-numeric-range.js":
/*!****************************************!*\
  !*** ./src/ffi/parse-numeric-range.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parsePart": function() { return /* binding */ parsePart; }
/* harmony export */ });
/* harmony import */ var _home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* module decorator */ module = __webpack_require__.hmd(module);


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function parsePart(string) {
  console.log("string", string);
  var res = [];
  var m;

  var _iterator = _createForOfIteratorHelper(string.split(",").map(function (str2) {
    return str2.trim();
  })),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var str = _step.value;

      if (/^-?\d+$/.test(str)) {
        res.push(parseInt(str, 10));
      } else if (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/)) {
        var _m = m,
            _m2 = (0,_home_jiae_rs_ko_rescript_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__.default)(_m, 4),
            _ = _m2[0],
            lhs = _m2[1],
            sep = _m2[2],
            rhs = _m2[3];

        if (lhs && rhs) {
          lhs = parseInt(lhs);
          rhs = parseInt(rhs);
          var incr = lhs < rhs ? 1 : -1;
          if (sep === "-" || sep === ".." || sep === "\u2025") rhs += incr;

          for (var i = lhs; i !== rhs; i += incr) {
            res.push(i);
          }
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return res;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./src/vendor/Json_decode.mjs":
/*!************************************!*\
  !*** ./src/vendor/Json_decode.mjs ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DecodeError": function() { return /* binding */ DecodeError; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "bool": function() { return /* binding */ bool; },
/* harmony export */   "$$float": function() { return /* binding */ $$float; },
/* harmony export */   "$$int": function() { return /* binding */ $$int; },
/* harmony export */   "string": function() { return /* binding */ string; },
/* harmony export */   "$$char": function() { return /* binding */ $$char; },
/* harmony export */   "date": function() { return /* binding */ date; },
/* harmony export */   "nullable": function() { return /* binding */ nullable; },
/* harmony export */   "nullAs": function() { return /* binding */ nullAs; },
/* harmony export */   "array": function() { return /* binding */ array; },
/* harmony export */   "list": function() { return /* binding */ list; },
/* harmony export */   "pair": function() { return /* binding */ pair; },
/* harmony export */   "tuple2": function() { return /* binding */ tuple2; },
/* harmony export */   "tuple3": function() { return /* binding */ tuple3; },
/* harmony export */   "tuple4": function() { return /* binding */ tuple4; },
/* harmony export */   "dict": function() { return /* binding */ dict; },
/* harmony export */   "field": function() { return /* binding */ field; },
/* harmony export */   "at": function() { return /* binding */ at; },
/* harmony export */   "optional": function() { return /* binding */ optional; },
/* harmony export */   "oneOf": function() { return /* binding */ oneOf; },
/* harmony export */   "either": function() { return /* binding */ either; },
/* harmony export */   "withDefault": function() { return /* binding */ withDefault; },
/* harmony export */   "map": function() { return /* binding */ map; },
/* harmony export */   "andThen": function() { return /* binding */ andThen; }
/* harmony export */ });
/* harmony import */ var rescript_lib_es6_list_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rescript/lib/es6/list.js */ "./node_modules/rescript/lib/es6/list.js");
/* harmony import */ var rescript_lib_es6_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rescript/lib/es6/array.js */ "./node_modules/rescript/lib/es6/array.js");
/* harmony import */ var rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rescript/lib/es6/curry.js */ "./node_modules/rescript/lib/es6/curry.js");
/* harmony import */ var rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rescript/lib/es6/js_dict.js */ "./node_modules/rescript/lib/es6/js_dict.js");
/* harmony import */ var rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rescript/lib/es6/caml_option.js */ "./node_modules/rescript/lib/es6/caml_option.js");
/* harmony import */ var rescript_lib_es6_caml_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rescript/lib/es6/caml_string.js */ "./node_modules/rescript/lib/es6/caml_string.js");
/* harmony import */ var rescript_lib_es6_caml_exceptions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rescript/lib/es6/caml_exceptions.js */ "./node_modules/rescript/lib/es6/caml_exceptions.js");
/* harmony import */ var rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rescript/lib/es6/caml_js_exceptions.js */ "./node_modules/rescript/lib/es6/caml_js_exceptions.js");
/* module decorator */ module = __webpack_require__.hmd(module);









function _isInteger(value) {
  if (Number.isFinite(value)) {
    return Math.floor(value) === value;
  } else {
    return false;
  }
}

var DecodeError = /* @__PURE__ */rescript_lib_es6_caml_exceptions_js__WEBPACK_IMPORTED_MODULE_6__.create("Json_decode.DecodeError");

function id(json) {
  return json;
}

function bool(json) {
  if (typeof json === "boolean") {
    return json;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected boolean, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function $$float(json) {
  if (typeof json === "number") {
    return json;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected number, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function $$int(json) {
  var f = $$float(json);

  if (_isInteger(f)) {
    return f;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected integer, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function string(json) {
  if (typeof json === "string") {
    return json;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected string, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function $$char(json) {
  var s = string(json);

  if (s.length === 1) {
    return rescript_lib_es6_caml_string_js__WEBPACK_IMPORTED_MODULE_5__.get(s, 0);
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected single-character string, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function date(json) {
  return new Date(string(json));
}

function nullable(decode, json) {
  if (json === null) {
    return null;
  } else {
    return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json);
  }
}

function nullAs(value, json) {
  if (json === null) {
    return value;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected null, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function array(decode, json) {
  if (Array.isArray(json)) {
    var length = json.length;
    var target = new Array(length);

    for (var i = 0; i < length; ++i) {
      var value;

      try {
        value = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json[i]);
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + ("\n	in array at index " + String(i)),
            Error: new Error()
          };
        }

        throw msg;
      }

      target[i] = value;
    }

    return target;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected array, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function list(decode, json) {
  return rescript_lib_es6_array_js__WEBPACK_IMPORTED_MODULE_1__.to_list(array(decode, json));
}

function pair(decodeA, decodeB, json) {
  if (Array.isArray(json)) {
    var length = json.length;

    if (length === 2) {
      try {
        return [rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeA, json[0]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeB, json[1])];
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + "\n	in pair/tuple2",
            Error: new Error()
          };
        }

        throw msg;
      }
    } else {
      throw {
        RE_EXN_ID: DecodeError,
        _1: "Expected array of length 2, got array of length " + length,
        Error: new Error()
      };
    }
  } else {
    throw {
      RE_EXN_ID: DecodeError,
      _1: "Expected array, got " + JSON.stringify(json),
      Error: new Error()
    };
  }
}

function tuple3(decodeA, decodeB, decodeC, json) {
  if (Array.isArray(json)) {
    var length = json.length;

    if (length === 3) {
      try {
        return [rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeA, json[0]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeB, json[1]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeC, json[2])];
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + "\n	in tuple3",
            Error: new Error()
          };
        }

        throw msg;
      }
    } else {
      throw {
        RE_EXN_ID: DecodeError,
        _1: "Expected array of length 3, got array of length " + length,
        Error: new Error()
      };
    }
  } else {
    throw {
      RE_EXN_ID: DecodeError,
      _1: "Expected array, got " + JSON.stringify(json),
      Error: new Error()
    };
  }
}

function tuple4(decodeA, decodeB, decodeC, decodeD, json) {
  if (Array.isArray(json)) {
    var length = json.length;

    if (length === 4) {
      try {
        return [rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeA, json[0]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeB, json[1]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeC, json[2]), rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decodeD, json[3])];
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + "\n	in tuple4",
            Error: new Error()
          };
        }

        throw msg;
      }
    } else {
      throw {
        RE_EXN_ID: DecodeError,
        _1: "Expected array of length 4, got array of length " + length,
        Error: new Error()
      };
    }
  } else {
    throw {
      RE_EXN_ID: DecodeError,
      _1: "Expected array, got " + JSON.stringify(json),
      Error: new Error()
    };
  }
}

function dict(decode, json) {
  if (typeof json === "object" && !Array.isArray(json) && json !== null) {
    var keys = Object.keys(json);
    var l = keys.length;
    var target = {};

    for (var i = 0; i < l; ++i) {
      var key = keys[i];
      var value;

      try {
        value = rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json[key]);
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + "\n	in dict",
            Error: new Error()
          };
        }

        throw msg;
      }

      target[key] = value;
    }

    return target;
  }

  throw {
    RE_EXN_ID: DecodeError,
    _1: "Expected object, got " + JSON.stringify(json),
    Error: new Error()
  };
}

function field(key, decode, json) {
  if (typeof json === "object" && !Array.isArray(json) && json !== null) {
    var value = rescript_lib_es6_js_dict_js__WEBPACK_IMPORTED_MODULE_3__.get(json, key);

    if (value !== void 0) {
      try {
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.valFromOption(value));
      } catch (raw_msg) {
        var msg = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_msg);

        if (msg.RE_EXN_ID === DecodeError) {
          throw {
            RE_EXN_ID: DecodeError,
            _1: msg._1 + ("\n	at field '" + (key + "'")),
            Error: new Error()
          };
        }

        throw msg;
      }
    } else {
      throw {
        RE_EXN_ID: DecodeError,
        _1: "Expected field '" + key + "'",
        Error: new Error()
      };
    }
  } else {
    throw {
      RE_EXN_ID: DecodeError,
      _1: "Expected object, got " + JSON.stringify(json),
      Error: new Error()
    };
  }
}

function at(key_path, decoder) {
  if (key_path) {
    var rest = key_path.tl;
    var key = key_path.hd;

    if (!rest) {
      return function (param) {
        return field(key, decoder, param);
      };
    }

    var partial_arg = at(rest, decoder);
    return function (param) {
      return field(key, partial_arg, param);
    };
  }

  throw {
    RE_EXN_ID: "Invalid_argument",
    _1: "Expected key_path to contain at least one element",
    Error: new Error()
  };
}

function optional(decode, json) {
  try {
    return rescript_lib_es6_caml_option_js__WEBPACK_IMPORTED_MODULE_4__.some(rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json));
  } catch (raw_exn) {
    var exn = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_exn);

    if (exn.RE_EXN_ID === DecodeError) {
      return;
    }

    throw exn;
  }
}

function oneOf(decoders, json) {
  var _decoders = decoders;
  var _errors = 0;

  while (true) {
    var errors = _errors;
    var decoders$1 = _decoders;

    if (decoders$1) {
      try {
        return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decoders$1.hd, json);
      } catch (raw_e) {
        var e = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_e);

        if (e.RE_EXN_ID === DecodeError) {
          _errors = {
            hd: e._1,
            tl: errors
          };
          _decoders = decoders$1.tl;
          continue;
        }

        throw e;
      }
    } else {
      var revErrors = rescript_lib_es6_list_js__WEBPACK_IMPORTED_MODULE_0__.rev(errors);
      throw {
        RE_EXN_ID: DecodeError,
        _1: "All decoders given to oneOf failed. Here are all the errors: " + revErrors + ". And the JSON being decoded: " + JSON.stringify(json),
        Error: new Error()
      };
    }
  }

  ;
}

function either(a, b) {
  var partial_arg_1 = {
    hd: b,
    tl: 0
  };
  var partial_arg = {
    hd: a,
    tl: partial_arg_1
  };
  return function (param) {
    return oneOf(partial_arg, param);
  };
}

function withDefault($$default, decode, json) {
  try {
    return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json);
  } catch (raw_exn) {
    var exn = rescript_lib_es6_caml_js_exceptions_js__WEBPACK_IMPORTED_MODULE_7__.internalToOCamlException(raw_exn);

    if (exn.RE_EXN_ID === DecodeError) {
      return $$default;
    }

    throw exn;
  }
}

function map(f, decode, json) {
  return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(f, rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(decode, json));
}

function andThen(b, a, json) {
  return rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._2(b, rescript_lib_es6_curry_js__WEBPACK_IMPORTED_MODULE_2__._1(a, json), json);
}

var tuple2 = pair;


;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "?ca47":
/*!******************************************!*\
  !*** ./utils/resolve-rewrites (ignored) ***!
  \******************************************/
/***/ (function() {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,